@using MauiApp1.Components.DB
@inject DBService db

@CurrentStation
<div class="my-grid-wrapper">
    <QuickGrid Items="tableHead" class="quickGrid">
        <Columns>
            <TemplateColumn Title="Tool">
                <CellTemplate>
                    <div @onclick='() => CurrentFormular("toolFormular")'>
                        @context.Tool
                        <div class="status-circle"></div>
                    </div>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Operation">
                <CellTemplate>
                    <div @onclick='() => CurrentFormular("operationFormular")'>
                        @context.Operation
                        <div class="status-circle"></div>
                    </div>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Classes">
                <CellTemplate>
                    <div @onclick='() => CurrentFormular("operationclassFormular")'>
                        <div class="status-circle"></div>
                    </div>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Network">
                <CellTemplate>
                    <div @onclick='() => CurrentFormular("networkFormular")'>
                        <div class="status-circle"></div>
                    </div>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Status">
                <CellTemplate>
                    <div @onclick='() => CurrentFormular("statusFormular")'>
                        <div class="status-circle"></div>
                    </div>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </QuickGrid>

    <button id="addRow" @onlick="AddRow">
        +
    </button>
</div>

@code {
    [Parameter]
    public EventCallback<string> SetFormular { get; set; }

    private int _currentStation;
    [Parameter]
    public int CurrentStation
    {
        get => _currentStation;
        set
        {
            if (_currentStation != value)
            {
                _currentStation = value;
                LoadData(); // => neue Daten laden wenn Station sich ändert!
            }
        }
    }

    private IQueryable<TableHead> tableHead;

    private record TableHead(string Tool, string Operation);

    protected override void OnInitialized()
    {
        LoadData(); // Lade die Daten auch beim Start
    }

    private void LoadData()
    {
        if (CurrentStation != 0)
        {
            var operations = db.GetOperationsFromStation(CurrentStation);

            tableHead = operations
                .Select(op => new TableHead(op.operationDescription, op.toolID.ToString()))
                .AsQueryable();
        }
        else
        {
            tableHead = Enumerable.Empty<TableHead>().AsQueryable();
        }

        InvokeAsync(StateHasChanged); // Wichtig, damit UI neu gerendert wird!
    }

    private void CurrentFormular(string formular)
    {
        SetFormular.InvokeAsync(formular);
    }

    private void AddRow()
    {
        //tableHead.Add(new TableHead(string.Empty, string.Empty));
        StateHasChanged();
    }
}
