
<div class="my-grid-wrapper">
    <QuickGrid Items="tableHead" class="quickGrid">
        <Columns>
            <TemplateColumn Title="Tool">
                <CellTemplate>
                    <div @onclick="() => SetTool(context)">
                        @context.Tool
                    </div>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Operation">
                <CellTemplate>
                    <div @onclick="() => SetOperation(context)">
                        @context.Operation
                    </div>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Classes">
                <CellTemplate>
                    <div @onclick="() => SetClasses(context)">
                        @context.Classes
                    </div>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Network">
                <CellTemplate>
                    <div @onclick="() => SetNetwork(context)">
                        @context.Network
                    </div>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Status">
                <CellTemplate>
                    <div @onclick="() => SetStatus(context)">
                        @context.Status
                    </div>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </QuickGrid>
</div>

@code {

    [Parameter]
    public EventCallback<int> SetFormular { get; set; }


    private IQueryable<TableHead> tableHead = new List<TableHead>
    {
        new("Tool1", "Operation1", "Class1", "Network1", "Status1"),
        new("Tool2", "Operation2", "Class2", "Network2", "Status2"),
        new("Tool3", "Operation3", "Class3", "Network3", "Status3"),
        new("Tool4", "Operation4", "Class4", "Network4", "Status4"),
        // … weitere Datensätze …
    }.AsQueryable();

    private record TableHead(string Tool, string Operation, string Classes, string Network, string Status);


    private void SetTool(TableHead item)
    {
        SetFormular.InvokeAsync(0);
    }

    private void SetOperation(TableHead item)
    {
        SetFormular.InvokeAsync(1);
    }


    private void SetClasses(TableHead item)
    {
        SetFormular.InvokeAsync(2);
    }

    private void SetNetwork(TableHead item)
    {
        SetFormular.InvokeAsync(3);
    }
    
    private void SetStatus(TableHead item)
    {
        SetFormular.InvokeAsync(4);
    }


}