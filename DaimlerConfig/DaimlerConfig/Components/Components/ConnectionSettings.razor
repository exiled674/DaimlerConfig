
@using Microsoft.Extensions.Configuration
@using System.IO
@using DaimlerConfig.Security

@inject IConfiguration Configuration

<h3>Connection Settings</h3>

@if (hasError)
{
    <div class="alert alert-danger">
        <strong>Error:</strong> @errorMessage
    </div>
}
else if (isLoading)
{
    <div class="alert alert-info">
        Loading settings...
    </div>
}
else
{
    <div class="mb-3">
        <label class="form-label">Connection String:</label>
        <textarea class="form-control"
                  @bind="connectionString"
                  rows="4"
                  placeholder="Enter your connection string here..."></textarea>
    </div>

    <button class="btn btn-primary" @onclick="SaveSettings" disabled="@isSaving">
        @if (isSaving)
        {
            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
        }
        Save Settings
    </button>

    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert @(isStatusError ? "alert-danger" : "alert-success") mt-3">
            @statusMessage
        </div>
    }
}

@code {
    private string connectionString = "";
    private string statusMessage = "";
    private string errorMessage = "";
    private bool isLoading = true;
    private bool hasError = false;
    private bool isStatusError = false;
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(100); // Kurze Verzögerung für bessere UX

        try
        {
            // Sichere Konfigurationsabfrage
            var configValue = Configuration?.GetConnectionString("DefaultConnection");
            connectionString = configValue ?? "";

            isLoading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            hasError = true;
            errorMessage = $"Fehler beim Laden der Konfiguration: {ex.Message}";
            isLoading = false;

            // Debug-Ausgabe
            System.Diagnostics.Debug.WriteLine($"Configuration Error: {ex}");
            Console.WriteLine($"Configuration Error: {ex}");

            StateHasChanged();
        }
    }

    private async Task SaveSettings()
    {
        if (string.IsNullOrWhiteSpace(connectionString))
        {
            statusMessage = "Connection String darf nicht leer sein.";
            isStatusError = true;
            return;
        }

        isSaving = true;
        statusMessage = "";
        StateHasChanged();

        try
        {
            var appSettingsPath = Path.Combine(
                Environment.GetFolderPath(Environment.SpecialFolder.UserProfile),
                "appsettings.json");

            // Datei erstellen falls nicht vorhanden
            if (!File.Exists(appSettingsPath))
            {
                var initialConfig = @"{
    ""ConnectionStrings"": {
        ""DefaultConnection"": """"
    }
}";
                await File.WriteAllTextAsync(appSettingsPath, initialConfig);
            }

            // Hier prüfen ob ConfigurationEncryptor verfügbar ist
            if (typeof(ConfigurationEncryptor).GetMethod("EncryptConnectionString") != null)
            {
                ConfigurationEncryptor.EncryptConnectionString(connectionString, appSettingsPath);
            }
            else
            {
                throw new InvalidOperationException("ConfigurationEncryptor.EncryptConnectionString ist nicht verfügbar");
            }

            statusMessage = "Einstellungen erfolgreich gespeichert. Anwendung wird neu gestartet...";
            isStatusError = false;
            StateHasChanged();

            await Task.Delay(2000);

            // Neustart der Anwendung
            if (Microsoft.Maui.Controls.Application.Current != null)
            {
                Microsoft.Maui.Controls.Application.Current.Quit();
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Fehler beim Speichern: {ex.Message}";
            isStatusError = true;

            System.Diagnostics.Debug.WriteLine($"Save Error: {ex}");
            Console.WriteLine($"Save Error: {ex}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }
}