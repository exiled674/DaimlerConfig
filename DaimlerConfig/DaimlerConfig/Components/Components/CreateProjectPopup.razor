@inject DaimlerConfig.Components.Fassade.Fassade Fassade
@using DaimlerConfig.Components.Models
@using DaimlerConfig.Services
@inject UsernameService usernameService
@inject SignalRService SignalRService

<MudDialog Style="width:500px; max-width:90vw; border-radius:16px; box-shadow: 0 8px 24px rgba(0,0,0,0.2);">
    <TitleContent>
        <MudText Typo="Typo.h6" Class="mt-2 ml-2">@(IsEditMode ? "Projekt bearbeiten" : "Neues Projekt")</MudText>
    </TitleContent>

    <DialogContent>
        <MudForm @ref="_form" OnValidSubmit="HandleValidSubmit">
            <MudPaper Class="p-4" Elevation="0" Style="border-radius:12px;">
                <MudTextField @bind-Value="_inputValue"
                              Label="Projektname"
                              Variant="Variant.Filled"
                              AutoFocus="true"
                              Margin="Margin.Dense"
                              Class="search-field-enhanced"
                              Error="@lineExists"
                              ErrorText="@errorText" />
            </MudPaper>

            <!-- Optionaler versteckter Submit-Button für Enter-Taste -->
            <MudButton Type="ButtonType.Submit" Style="display:none;" />
        </MudForm>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Text" Color="Color.Default" Class="rounded-button">Abbrechen</MudButton>
        <MudButton Type="ButtonType.Submit"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   OnClick="HandleValidSubmit"
                   Class="rounded-button">
            @(IsEditMode ? "Speichern" : "OK")
        </MudButton>
    </DialogActions>
</MudDialog>

<style>
    /* Card Hintergrundfarbe */
    .mud-paper.p-4 {
        background-color: white !important; /* sehr helles kühles Grau */
        border-radius: 12px;
    }

    /* Input Hintergrundfarbe etwas dunkler als Card */
    .search-field-enhanced .mud-input-root {
        background-color: #e1e8ef !important; /* kühles, helles Grau-Blau, etwas dunkler als Card */
        color: #202020;
        border-radius: 12px;
    }

        /* Fokuszustand Input */
        .search-field-enhanced .mud-input-root.mud-focused {
            background-color: #cbd6e3 !important; /* noch etwas dunkler beim Fokus */
            box-shadow: 0 0 8px rgba(70,130,180,0.3) !important;
        }

</style>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Line ExistingLine { get; set; }

    private MudForm _form;
    private string _inputValue;
    private bool lineExists;
    private string errorText;
    private string _originalValue;

    private bool IsEditMode => ExistingLine != null;

    protected override void OnInitialized()
    {
        usernameService.PropertyChanged += (_, __) => InvokeAsync(StateHasChanged);

        if (IsEditMode)
        {
            _inputValue = ExistingLine.lineName;
            _originalValue = ExistingLine.lineName;
        }
        else
        {
            _inputValue = string.Empty;
        }

        lineExists = false;
    }

    private async Task HandleValidSubmit()
    {
        // Prüfung auf leeren Namen
        if (string.IsNullOrWhiteSpace(_inputValue))
        {
            lineExists = true;
            errorText = "Project name cannot be empty. Please enter a valid name.";
            return;
        }

        // Prüfung auf doppelte Namen (außer bei sich selbst im Edit-Modus)
        bool nameExists = await Fassade.LineExistsByName(_inputValue);
        if (nameExists && (!IsEditMode || _inputValue != _originalValue))
        {
            lineExists = true;
            errorText = "Project already exists. Please choose a different name.";
            return;
        }

        try
        {
            if (IsEditMode)
            {
                // Bearbeiten eines bestehenden Projekts
                ExistingLine.lineName = _inputValue;
                ExistingLine.lastModified = DateTime.Now;
                ExistingLine.modifiedBy = usernameService.Username;

                if (!(await Fassade.UpdateLine(ExistingLine)))
                {
                    lineExists = true;
                    errorText = "Error updating project in database";
                    return;
                }

                await SignalRService.SendMessageToServer($"LineUpdated;{ExistingLine.lineID}");
            }
            else
            {
                // Erstellen eines neuen Projekts
                Line line = new Line
                    {
                        lineName = _inputValue,
                        lastModified = DateTime.Now,
                        modifiedBy = usernameService.Username,
                        lineID = 0,
                    };

                if (!(await Fassade.AddLine(line)))
                {
                    lineExists = true;
                    errorText = "Error with database";
                    return;
                }

                var savedLine = await Fassade.GetLineByName(line.lineName);
                if (savedLine != null)
                {
                    await SignalRService.SendMessageToServer($"LineAdded;{savedLine.lineID}");
                }
            }

            lineExists = false;
            MudDialog.Close(DialogResult.Ok(_inputValue));
        }
        catch (Exception ex)
        {
            lineExists = true;
            errorText = $"An error occurred: {ex.Message}";
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}