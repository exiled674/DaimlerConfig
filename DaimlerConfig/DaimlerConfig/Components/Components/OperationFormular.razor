@using DaimlerConfig.Components.Models
@inject DaimlerConfig.Components.Fassade.Fassade Fassade

<div>
    <div class="class-header justify-content-between align-items-center">
        <h2>Operation</h2>
        @if (SelectedOperation.operationID == 0)
        {
            <div class="d-flex justify-content-end align-items-center mb-3">
                <button class="btn btn-primary btn-sm" @onclick="AddOperationAsync">Create</button>
            </div>
        }

        @if (SelectedOperation.operationID != 0)
        {
            <div class="d-flex justify-content-end align-items-center mb-3">
                <button class="btn btn-primary btn-sm">Delete</button>
            </div>
        }
    </div>
    <div class="layout position-relative">
        <div class="toolColoumnLeft">

            <div class="form-floating mb-3">
                <input type="text" class="form-control form-control" placeholder="" @bind="SelectedOperation.operationID" readonly @onblur="UpdateOperationAsync">
                <label>Operation ID</label>
            </div>

            <div class="form-floating mb-3">
                <input type="text" class="form-control form-control" maxlength="16" placeholder="" @bind="SelectedOperation.operationShortname" @onblur="UpdateOperationAsync">
                <label>Operation Shortname</label>
                <datalist id="datalistOptions">

                    <option value="San Francisco"></option>
                    <option value="New York"></option>
                     <option value="Seattle"></option>
                    <option value="Los Angeles"></option>
                    <option value="Chicago"></option>
                                </datalist>
            </div>

            <div class="form-floating mb-3">
                <textarea type="text" class="form-control form-control " maxlength="100" placeholder="" style="height: 150px" @bind="SelectedOperation.operationDescription" @onblur="UpdateOperationAsync"></textarea>
                <label>Operation Description</label>
                <span class="position-absolute end-0 bottom-0 me-2 mb-1 text-muted small">
                    @($"{SelectedOperation?.operationDescription?.Length ?? 0}/100")</span>
            </div>


        </div>

        <div class="toolColoumnRight ">

           
            <div class="form-floating mb-3">
                <select class="form-select form-select" id="ProcessingMode">
                    <option value="">select...</option>
                    <option value="Serial">Serial</option>
                    <option value="Parallel">Parallel</option>
                </select>
                <label for="ProcessingMode">Processing Mode</label>
            </div>

            <div class="form-floating mb-3">
                <input type="text" class="form-control form-control" placeholder="">
                <label>Operation Sequenz</label>
            </div>

            <div class="form-floating mb-3">
                <input type="text" class="form-control form-control" placeholder="">
                <label>Operation Sequenz Group</label>
            </div>

        </div>

         

        
    </div>
    <hr />
    <div >
        <h2>Classes</h2>
        <div class="layout position-relative">
            <div class="toolColoumnLeft">
                <div class="form-floating mb-3">
                    <select class="form-select form-select" id="DecisionClass">
                        <option value="">select...</option>
                        <option value="Class1">needs</option>
                        <option value="Class2">binding</option>
                    </select>
                    <label for="DecisionClass">Decision Class</label>
                </div>

                <div class="form-floating mb-3">
                    <select class="form-select form-select" id="GenerationClass">
                        <option value="">select...</option>
                        <option value="Class1">needs</option>
                        <option value="Class2">binding</option>
                    </select>
                    <label for="GenerationClass">Generation Class</label>
                </div>


                <div class="form-floating mb-3">
                    <select class="form-select form-select" id="VerificationClass">
                        <option value="">select...</option>
                        <option value="Class1">needs</option>
                        <option value="Class2">binding</option>
                    </select>
                    <label for="VerificationClass">Verification Class</label>
                </div>

                <div class="form-floating mb-3">
                    <select class="form-select form-select" id="SavingClass">
                        <option value="">select...</option>
                        <option value="Class1">needs</option>
                        <option value="Class2">binding</option>
                    </select>
                    <label for="SavingClass">Saving Class</label>
                </div>
            </div>

            <div class="toolColoumnRight">

                <div class="form-floating">
                    <textarea class="form-control form-control" maxlength="100" placeholder="" id="DecisionCriteria" style="height: 150px"></textarea>
                    <label for="DecisionCriteria">Decision Criteria</label>
                </div>
            </div>            

        </div>
    </div>
</div>

@code {
    [Parameter]
    public Operation? SelectedOperation { get; set; }

    [Parameter]
    public EventCallback OnUpdated { get; set; }

    private async Task UpdateOperationAsync()
    {
        if (SelectedOperation != null)
        {
            await Fassade.UpdateOperation(SelectedOperation);
            await OnUpdated.InvokeAsync();
        }
    }

    private async Task AddOperationAsync()
    {
        if (SelectedOperation == null)
            return;

        if (string.IsNullOrWhiteSpace(SelectedOperation.operationShortname))
        {
            Console.WriteLine("Operation Shortname darf nicht leer sein.");
            return;
        }

        bool exists = await Fassade.OperationExistsByName(SelectedOperation.operationShortname);
        if (exists)
        {
            Console.WriteLine("Operation Shortname ist bereits vergeben.");
            return;
        }

        await Fassade.AddOperation(SelectedOperation);
        await OnUpdated.InvokeAsync();
    }
}
