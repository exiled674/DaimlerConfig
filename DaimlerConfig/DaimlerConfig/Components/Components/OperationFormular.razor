@using DaimlerConfig.Components.Models
@inject DaimlerConfig.Components.Fassade.Fassade Fassade

@using DaimlerConfig.Services
@inject SignalRService SignalRService
@inject DirtyManagerService DirtyManagerService

<div>
    <div class="class-header justify-content-between align-items-center">
        <h2>Operation</h2>
        <div class="d-flex justify-content-end align-items-center gap-2">
            @if (SelectedOperation.operationID == 0)
            {
                <div class="d-flex justify-content-end align-items-center mb-3">
                    <button class="btn btn-primary btn-sm" @onclick="AddOperationAsync">Create</button>
                </div>
            }
            @if (SelectedOperation.operationID != 0)
            {
                <div class="d-flex justify-content-end align-items-center mb-3">
                    <button class="btn btn-primary btn-sm" @onclick="UpdateOperationAsync">Update</button>
                </div>
            }


            @if (SelectedOperation.operationID != 0)
            {
                <div class="d-flex justify-content-end align-items-center mb-3">
                    <button class="btn btn-primary btn-sm" @onclick="DeleteOperationAsync">Delete</button>
                </div>
            }
        </div>
    </div>


    <div class="layout position-relative">
        <div class="toolColoumnLeft">

            <div class="form-floating mb-3">
                <input type="text" class="form-control form-control" placeholder="" @onblur="CheckIfDirty" @bind="SelectedOperation.operationID" readonly>
                <label>Operation ID</label>
            </div>

            <div class="form-floating mb-3">
                <input type="text" class="form-control form-control" maxlength="16" placeholder="" @onblur="CheckIfDirty" @bind="SelectedOperation.operationShortname">
                <label>Operation Shortname</label>
            </div>

            <div class="form-floating mb-3">
                <textarea type="text" class="form-control form-control " maxlength="100" placeholder="" style="height: 150px" @onblur="CheckIfDirty" @bind="SelectedOperation.operationDescription"></textarea>
                <label>Operation Description</label>
                <span class="position-absolute end-0 bottom-0 me-2 mb-1 text-muted small">
                    @($"{SelectedOperation?.operationDescription?.Length ?? 0}/100")</span>
            </div>
        </div>
        <div class="toolColoumnRight ">

            <div class="form-floating mb-3">
                <select class="form-select form-select" id="ProcessingMode">
                    <option value="">select...</option>
                    <option value="Serial">Serial</option>
                    <option value="Parallel">Parallel</option>
                </select>
                <label for="ProcessingMode">Processing Mode</label>
            </div>

            <div class="form-floating mb-3">
                <input type="text" class="form-control form-control" placeholder="">
                <label>Operation Sequenz</label>
            </div>

            <div class="form-floating mb-3">
                <input type="text" class="form-control form-control" placeholder="">
                <label>Operation Sequenz Group</label>
            </div>

        </div>
    </div>

    <hr />

    <h2>Classes</h2>
    <div class="layout position-relative">
        <div class="toolColoumnLeft">
            <div class="form-floating mb-3">
                <select class="form-select form-select" id="DecisionClass" @bind="SelectedOperation.decisionClassID">
                    @foreach (var decision in decisionClasses)
                    {
                        <option value="@decision.ID">@decision.name</option>
                    }
                </select>
                <label for="DecisionClass">Decision Class</label>
            </div>

            <div class="form-floating mb-3">
                <select class="form-select form-select" id="GenerationClass" @bind="SelectedOperation.generationClassID">
                    @foreach (var generation in generationClasses)
                    {
                        <option value="@generation.ID">@generation.name</option>
                    }
                </select>
                <label for="GenerationClass">Generation Class</label>
            </div>
            <div class="form-floating mb-3">
                <select class="form-select form-select" id="VerificationClass" @bind="SelectedOperation.verificationClassID">
                    @foreach (var verification in verificationClasses)
                    {
                      <option value="@verification.ID">@verification.name</option>
                    }
                </select>
                <label for="VerificationClass">Verification Class</label>
            </div>

            <div class="form-floating mb-3">
                <select class="form-select form-select" id="SavingClass" @bind="SelectedOperation.savingClassID">
                    @foreach (var saving in savingClasses)
                    {
                      <option value="@saving.ID">@saving.name</option>
                    }
                </select>
                <label for="SavingClass">Saving Class</label>
            </div>
        </div>

        <div class="toolColoumnRight">

            <div class="form-floating">
                <textarea class="form-control form-control" maxlength="100" placeholder="" id="DecisionCriteria" style="height: 150px"></textarea>
                <label for="DecisionCriteria">Decision Criteria</label>
            </div>
        </div>     
    </div>

</div>



@code {
    [Parameter]
    public Operation? SelectedOperation { get; set; }

    [Parameter]
    public EventCallback OnUpdated { get; set; }

    private Operation? OriginalOperation { get; set; }

    private Tool? currentTool;

    private Template? currentTemplate;

    private IEnumerable<DecisionClass> decisionClasses = Enumerable.Empty<DecisionClass>();

    private IEnumerable<SavingClass> savingClasses = Enumerable.Empty<SavingClass>();

    private IEnumerable<VerificationClass> verificationClasses = Enumerable.Empty<VerificationClass>();

    private IEnumerable<GenerationClass> generationClasses = Enumerable.Empty<GenerationClass>();

    protected override async Task OnParametersSetAsync()
    {
        if (SelectedOperation != null)
        {
            OriginalOperation = SelectedOperation.Clone();
            OriginalOperation.operationID = SelectedOperation.operationID;
            OriginalOperation.toolID = SelectedOperation.toolID;

            currentTool = await Fassade.GetTool(SelectedOperation.toolID);
            var toolClassId = currentTool.toolClassID;
            currentTemplate = await Fassade.TemplateRepository.Get(toolClassId);

            await InitializeClasses();
        }
        StateHasChanged();
    }

    #region CRUD
    public async Task UpdateOperationAsync()
    {
        if (await ValidateData() == false)
            return;

        await Fassade.UpdateOperation(SelectedOperation);
        await OnUpdated.InvokeAsync();
        await SignalRService.SendMessageToServer("OperationChanged");

    }

    private async Task AddOperationAsync()
    {
        if (await ValidateData() == false)
            return;

        await Fassade.AddOperation(SelectedOperation);
        await OnUpdated.InvokeAsync();
        await SignalRService.SendMessageToServer("OperationChanged");
    }

    private async Task DeleteOperationAsync()
    {
        if(SelectedOperation != null)
        {
            await Fassade.DeleteOperation(SelectedOperation);
            await OnUpdated.InvokeAsync();
            await SignalRService.SendMessageToServer("OperationChanged");

        }
    }
    #endregion

    #region Validate
    private async Task<bool> ValidateData()
    {
        //Objekt
        if (SelectedOperation == null)
            return false;

        //OperationShortname
        if (string.IsNullOrWhiteSpace(SelectedOperation.operationShortname))
            return false;

        if (SelectedOperation.operationShortname.Length > 16)
            return false;

        if (!SelectedOperation.toolID.HasValue)
            return false;

        if (await Fassade.OperationExistsInTool(SelectedOperation.operationShortname, SelectedOperation.toolID.Value))
            return false;

        //OperationDescription
        if (SelectedOperation.operationDescription != null)
        {
            if (SelectedOperation.operationDescription.Length > 100)
                return false;
        }
        return true;
    }

    #endregion

    #region Dirty
    private async Task<bool> CheckIfDirty()
    {
        if (SelectedOperation?.operationID == 0)
            return false;
        return await DirtyManagerService.CheckIfDirty(SelectedOperation, OriginalOperation);
    }

    public async Task ResetOperation()
    {
        if (OriginalOperation != null)
        {
            SelectedOperation = OriginalOperation.Clone();
            SelectedOperation.operationID = OriginalOperation.operationID;
            SelectedOperation.toolID = OriginalOperation.toolID;
        }
        await SignalRService.SendMessageToServer("OperationChanged");
    }
    #endregion

    #region Classes
    private async Task InitializeClasses()
    {
        decisionClasses = await Fassade.GetDecisionClasses();

        savingClasses = await Fassade.GetSavingClasses(currentTemplate.templateID);

        verificationClasses = await Fassade.GetVerificationClasses(currentTemplate.templateID);

        generationClasses = await Fassade.GetGenerationClasses(currentTemplate.templateID);

        if (verificationClasses == null || !verificationClasses.Any())
        {
            var list = verificationClasses.ToList();
            list.AddRange(await Fassade.GetVerificationClass(0));
            verificationClasses = list.AsEnumerable();


        }

        
    }
    #endregion
}
