@using DaimlerConfig.Components.Models
@inject DaimlerConfig.Components.Fassade.Fassade Fassade

@using DaimlerConfig.Services
@inject SignalRService SignalRService

<div>
    <h2>Operation</h2>
    <div class="layout">
        <div class="toolColoumn">
            <label>Operation ID:</label>
            <input class="input-field" type="text" @bind="SelectedOperation.operationID" readonly  />

            <label>Operation Shortname:</label>
            <input class="input-field" type="text" @bind="SelectedOperation.operationShortname"  />

            <label>Operation Description:</label>
            <input class="input-field" type="text" @bind="SelectedOperation.operationDescription"  />
        </div>

        <div class="toolColoumn">
            <label>Serial Parallel</label>
            <select class="input-field">
                <option value="">Select</option>
                <option value="Serial">Serial</option>
                <option value="Parallel">Parallel</option>
            </select>

            <label>Operation Sequenz</label>
            <input class="input-field" type="text" />

            <label>Operation Sequenz Group</label>
            <input class="input-field" type="text" />
        </div>
    </div>
    <hr />
    <div>
        <h3>Classes</h3>
        <div class="layout">
            <div class="toolColoumn">
                <label>Decision Class:</label>
                <select class="input-field" @bind="SelectedOperation.decisionClassID">
                    <option value="">Select</option>
                    @foreach (var option in _decisionClasses)
                    {
                        <option value="@option.decisionClassID">@option.decisionClassName</option>
                    }
                </select>

                <label>Generation Class:</label>
                <select class="input-field" @bind="SelectedOperation.generationClassID">
                    <option value="">Select</option>
                    @foreach (var option in _generationClasses)
                    {
                        <option value="@option.generationClassID">@option.generationClassName</option>
                    }
                </select>
            </div>

            <div class="toolColoumn">
                <label>Verification Class:</label>
                <select class="input-field" @bind="SelectedOperation.verificationClassID">
                    <option value="">Select</option>
                    @foreach (var option in _verificationClasses)
                    {
                        <option value="@option.verificationClassID">@option.verificationClassName</option>
                    }
                </select>

                <label>Saving Class:</label>
                <select class="input-field" @bind="SelectedOperation.savingClassID">
                    <option value="">Select</option>
                    @foreach (var option in _savingClasses)
                    {
                        <option value="@option.savingClassID">@option.savingClassName</option>
                    }
                </select>
            </div>

            <div class="toolColoumn">
                <label>Decision Criteria:</label>
                <textarea class="input-field" rows="4" cols="25" placeholder="Gib deinen Text hier ein..."></textarea>
            </div>

            @if (SelectedOperation.operationID == 0)
            {
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <button class="btn btn-success btn-sm" @onclick="AddOperationAsync">Create</button>
                </div>
            }

            @if (SelectedOperation.operationID != 0)
            {
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <button class="btn btn-success btn-sm" @onclick="UpdateOperationAsync">Update</button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Operation? SelectedOperation { get; set; }

    [Parameter]
    public EventCallback OnUpdated { get; set; }
    
    private Tool? currentTool;
    
    private ToolType? currentToolType;
    
    private Template? currentTemplate;

    private List<DecisionClass>? _decisionClasses;
    private List<GenerationClass>? _generationClasses;
    private List<SavingClass>? _savingClasses;
    private List<VerificationClass>? _verificationClasses;

    protected override async Task OnInitializedAsync()
    {
        var tools = await Fassade.ToolRepository.Find(t => t.toolID == SelectedOperation.toolID);
        currentTool = tools.FirstOrDefault();
        var toolTypeId = currentTool.toolTypeID;
        currentTemplate = await Fassade.TemplateRepository.Get(toolTypeId);
        InitializeClasses();
    }

    #region CRUD
    private async Task UpdateOperationAsync()
    {
        if (await ValidateData() == false)
            return;

        await Fassade.UpdateOperation(SelectedOperation);
        await OnUpdated.InvokeAsync();
        await SignalRService.SendMessageToServer("OperationChanged");

    }

    private async Task AddOperationAsync()
    {
        if (await ValidateData() == false)
            return;

        await Fassade.AddOperation(SelectedOperation);
        await OnUpdated.InvokeAsync();
        await SignalRService.SendMessageToServer("OperationChanged");
    }
    #endregion

    #region Validate
    private async Task<bool> ValidateData()
    {
        //Objekt
        if (SelectedOperation == null)
            return false;

        //OperationShortname
        if (string.IsNullOrWhiteSpace(SelectedOperation.operationShortname))
            return false;

        if (SelectedOperation.operationShortname.Length > 16)
            return false;

        if (!SelectedOperation.toolID.HasValue)
            return false;

        if (await Fassade.OperationExistsInTool(SelectedOperation.operationShortname, SelectedOperation.toolID.Value))
            return false;

        //OperationDescription
        if (SelectedOperation.operationDescription != null)
        {
            if (SelectedOperation.operationDescription.Length > 100)
                return false;
        }
       

        return true;
    }

    #endregion

    #region Classes
    protected async Task InitializeClasses()
    {
        _decisionClasses = (await Fassade.DecisionClassRepository
                .Find(_ => true))
                .ToList();
        _generationClasses = (await Fassade.GenerationClassRepository
                .Find(t => t.TemplateId == currentTemplate.TemplateId))
                .ToList();
        _savingClasses = (await Fassade.SavingClassRepository
                .Find(t => t.TemplateId == currentTemplate.TemplateId))
                .ToList();
        _verificationClasses = (await Fassade.VerificationClassRepository
                .Find(t => t.TemplateId == currentTemplate.TemplateId))
                .ToList();
    }
    #endregion

}
