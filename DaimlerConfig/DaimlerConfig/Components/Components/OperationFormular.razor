@using DaimlerConfig.Components.Models
@inject DaimlerConfig.Components.Fassade.Fassade Fassade

@using DaimlerConfig.Services
@using Microsoft.IdentityModel.Tokens
@inject SignalRService SignalRService
@inject DirtyManagerService DirtyManagerService
@inject UsernameService UsernameService

<div class="container-lg px-3">
    <div class="class-header justify-content-between align-items-center">
        <MudText Typo="Typo.h5" Style="color: var(--mud-palette-text-primary); font-weight: 600;">
            @Fassade.Language.Operation
            @if (ReadOnly && !string.IsNullOrWhiteSpace(SelectedOperation?.lockedBy))
            {
                <MudIcon Icon="@Icons.Material.Filled.Lock" Style="margin-left: 8px;" />
                <span style="margin-left: 4px;">@SelectedOperation.lockedBy.Split(';')[0]</span>
            }
        </MudText>
        <div class="d-flex justify-content-end align-items-center gap-2">
            <div class="form-floating" style="min-width:200px;">
                <MudSelect T="int?" Label="Version"
                           Variant="Variant.Outlined"
                           Margin="Margin.Normal"
                           Disabled="@ReadOnly"
                           Class="flex-grow-1 search-field-enhanced"
                           Style="background: white; border-radius: 12px;"
                           Value="selectedVersionId"
                           ValueChanged="OnVersionChanged"
                           OnBlur="LockOperation">
                    <MudSelectItem T="int?" Value="-1">Aktuelle Version</MudSelectItem>
                    @foreach (var version in OperationVersions.OrderByDescending(v => v.operationVersionID))
                    {
                        <MudSelectItem T="int?" Value="@version.operationVersionID">
                            @version.modifiedBy?.Split(';')[0] - @version.lastModified
                        </MudSelectItem>
                    }
                </MudSelect>

            </div>
            @if (SelectedOperation.operationID == 0)
            {
                <div class="d-flex justify-content-end align-items-center mb-3">
                    <MudButton StartIcon="@Icons.Material.Filled.AddCircle"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Class="btn btn-primary btn-sm"
                               @onclick="AddOperationAsync">
                        @Fassade.Language.Create
                    </MudButton>
                </div>
            }
            @if (SelectedOperation.operationID != 0)
            {
                <MudButton StartIcon="@Icons.Material.Filled.Save"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Class="btn btn-primary btn-sm"
                           @onclick="UpdateOperationAsync"
                           Disabled="@ReadOnly">
                    Save
                </MudButton>
            }
        </div>
    </div>
    <div class="row mb-4">
        <!-- First Row: Operation ID and Operation Shortname -->
        <div class="col-md-6 mb-3">
            <MudTextField T="int?"
                          Label="@Fassade.Language.OperationId"
                          Value="SelectedOperation.operationID"
                          ReadOnly="true"
                          Variant="Variant.Outlined"
                          Margin="Margin.Normal"
                          Class="w-100"
                          Style="background: white; border-radius: 12px;"
                          Adornment="Adornment.End"
                          AdornmentIcon="@Icons.Material.Filled.Lock" />
        </div>
        <div class="col-md-6 mb-3">
            <div style="position: relative;">
                <MudTextField T="string"
                              Label="@Fassade.Language.OperationShortname"
                              @bind-Value="SelectedOperation.operationShortname"
                              MaxLength="16"
                              ReadOnly="@ReadOnly"
                              Variant="Variant.Outlined"
                              Margin="Margin.Normal"
                              @onclick="LockOperation"
                              OnBlur="CheckIfDirty"
                              Error="@errorMessages.ContainsKey("OperationShortname")"
                              ErrorText="@((errorMessages.ContainsKey("OperationShortname")) ? errorMessages["OperationShortname"] : null)"
                              Adornment="@(ReadOnly ? Adornment.End : Adornment.None)"
                              AdornmentIcon="@(ReadOnly ? Icons.Material.Filled.Lock : null)" />
                <span style="position: absolute; right: 10px; bottom: 5px; color: rgba(0, 0, 0, 0.6); font-size: 0.75rem;">
                    @($"{SelectedOperation?.operationShortname?.Length ?? 0}/16")
                </span>
            </div>
        </div>
        <!-- Second Row: Processing Mode and Operation Sequence -->
        <div class="col-md-6 mb-3">
            <MudSelect T="int"
                       Label="@Fassade.Language.ProcessingMode"
                       @bind-Value="SelectedOperation.parallel"
                       ReadOnly="@ReadOnly"
                       Variant="Variant.Outlined"
                       Margin="Margin.Normal"
                       Style="background: white; border-radius: 12px;"
                       OnOpen="LockOperation"
                       OnBlur="CheckIfDirty"
                       Adornment="@(ReadOnly ? Adornment.End : Adornment.None)"
                       AdornmentIcon="@(ReadOnly ? Icons.Material.Filled.Lock : null)">
                <MudSelectItem Value="0">parallel</MudSelectItem>
                <MudSelectItem Value="1">serial</MudSelectItem>
            </MudSelect>
        </div>
        <div class="col-md-6 mb-3">
            <div class="form-floating">
                <MudTextField T="string"
                              Label="@Fassade.Language.OperationSequence"
                              @bind-Value="SelectedOperation.operationSequence"
                              ReadOnly="@ReadOnly"
                              Variant="Variant.Outlined"
                              Margin="Margin.Normal"
                              @onclick="LockOperation"
                              OnBlur="CheckIfDirty"
                              Adornment="@(ReadOnly ? Adornment.End : Adornment.None)"
                              AdornmentIcon="@(ReadOnly ? Icons.Material.Filled.Lock : null)" />


            </div>
        </div>
        <!-- Third Row: Operation Sequence Group and Comment -->
        <div class="col-md-6 mb-3">
            <div class="form-floating">
                <MudTextField T="string"
                              Label="@Fassade.Language.OperationSequenceGroup"
                              @bind-Value="SelectedOperation.operationSequenceGroup"
                              ReadOnly="@ReadOnly"
                              Variant="Variant.Outlined"
                              Margin="Margin.Normal"
                              @onclick="LockOperation"
                              OnBlur="CheckIfDirty"
                              Adornment="@(ReadOnly ? Adornment.End : Adornment.None)"
                              AdornmentIcon="@(ReadOnly ? Icons.Material.Filled.Lock : null)" />
            </div>
        </div>
        <div class="col-md-6 mb-3">
            <div class="form-floating">
                

                <div style="position: relative;">
                    <MudTextField T="string"
                                  Label="@Fassade.Language.Comment"
                                  @bind-Value="SelectedOperation.Comment"
                                  ReadOnly="@ReadOnly"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Normal"
                                  Lines="4"
                                  MaxLength="1000"
                                  Style="background: white; border-radius: 12px;"
                                  @onclick="LockOperation"
                                  OnBlur="CheckIfDirty"
                                  Class="w-100"
                                  Adornment="@(ReadOnly ? Adornment.End : Adornment.None)"
                                  AdornmentIcon="@(ReadOnly ? Icons.Material.Filled.Lock : null)" />
                    <span style="position: absolute; right: 10px; bottom: 5px; color: rgba(0, 0, 0, 0.6); font-size: 0.75rem;">
                        @($"{SelectedOperation?.Comment.Length ?? 0}/1000")
                    </span>
                </div>


                
            </div>
        </div>
    </div>
    <hr />
    <h2>@Fassade.Language.Classes</h2>
    <div class="row mb-4">
        <!-- First Row: Decision Class and Generation Class -->
        <div class="col-md-6 mb-3">
            <MudSelect T="int?" Label="@Fassade.Language.DecisionClass"
                       Variant="Variant.Outlined"
                       Margin="Margin.Normal"
                       Disabled="@ReadOnly"
                       Class="flex-grow-1"
                       Style="background: white; border-radius: 12px;"
                       Value="SelectedOperation.decisionClassID"
                       OnBlur="LockOperation">
                @foreach (var decision in decisionClasses.OrderBy(d => d.decisionClassName))
                {
                    <MudSelectItem T="int?" Value="@decision.decisionClassID">@decision.decisionClassName</MudSelectItem>
                }
            </MudSelect>
        </div>

        <div class="col-md-6 mb-3">
            <MudSelect T="int?" Label="@Fassade.Language.GenerationClass"
                       Variant="Variant.Outlined"
                       Margin="Margin.Normal"
                       Disabled="@ReadOnly"
                       Class="flex-grow-1"
                       Style="background: white; border-radius: 12px;"
                       Value="SelectedOperation.generationClassID"
                       OnBlur="LockOperation">
                @foreach (var generation in generationClasses.OrderBy(g => g.generationClassName))
                {
                    <MudSelectItem T="int?" Value="@generation.generationClassID">@generation.generationClassName</MudSelectItem>
                }
            </MudSelect>
        </div>

        <!-- Second Row: Verification Class and Saving Class -->
        <div class="col-md-6 mb-3">
            <MudSelect T="int?" Label="@Fassade.Language.VerificationClass"
                       Variant="Variant.Outlined"
                       Margin="Margin.Normal"
                       Disabled="@ReadOnly"
                       Class="flex-grow-1"
                       Style="background: white; border-radius: 12px;"
                       Value="SelectedOperation.verificationClassID"
                       OnBlur="LockOperation">
                @foreach (var verification in verificationClasses.OrderBy(v => v.verificationClassName))
                {
                    <MudSelectItem T="int?" Value="@verification.verificationClassID">@verification.verificationClassName</MudSelectItem>
                }
            </MudSelect>
        </div>

        <div class="col-md-6 mb-3">
            <MudSelect T="int?" Label="@Fassade.Language.SavingClass"
                       Variant="Variant.Outlined"
                       Margin="Margin.Normal"
                       Disabled="@ReadOnly"
                       Class="flex-grow-1"
                       Style="background: white; border-radius: 12px;"
                       Value="SelectedOperation.savingClassID"
                       OnBlur="LockOperation">
                @foreach (var saving in savingClasses.OrderBy(s => s.savingClassName))
                {
                    <MudSelectItem T="int?" Value="@saving.savingClassID">@saving.savingClassName</MudSelectItem>
                }
            </MudSelect>
        </div>

        <!-- Third Row: Decision Criteria -->
        <div class="col-md-12 mb-3">
            <div class="form-floating">
                <textarea class="form-control form-control" maxlength="100" placeholder="" id="DecisionCriteria" style="height: 150px" readonly="@ReadOnly" @onclick="LockOperation"></textarea>
                <label for="DecisionCriteria">@Fassade.Language.DecisionCriteria</label>
            </div>
        </div>
    </div>
</div>




@code {
    [Parameter]
    public string? CurrentUser { get; set; }


    [Parameter]
    public Operation? SelectedOperation { get; set; }

    [Parameter]
    public IEnumerable<OperationVersion> OperationVersions { get; set; } = Enumerable.Empty<OperationVersion>();
    private int selectedVersionId = -1;

    [Parameter]
    public bool ReadOnly { get; set; }

    private Operation? OriginalOperation { get; set; }
    private Dictionary<string, string> errorMessages = new();
    private bool showErrors = false;


    private Tool? currentTool;

    private List<int> currentTemplates = new List<int>();

    private IEnumerable<DecisionClass> decisionClasses = Enumerable.Empty<DecisionClass>();

    private IEnumerable<SavingClass> savingClasses = Enumerable.Empty<SavingClass>();

    private IEnumerable<VerificationClass> verificationClasses = Enumerable.Empty<VerificationClass>();

    private IEnumerable<GenerationClass> generationClasses = Enumerable.Empty<GenerationClass>();

    private IEnumerable<ToolTypeHasTemplate> toolTypeHasTemplates = Enumerable.Empty<ToolTypeHasTemplate>();


    protected override async Task OnInitializedAsync()
    {
        UsernameService.PropertyChanged += (_, __) => InvokeAsync(StateHasChanged);

    }

    protected override async Task OnParametersSetAsync()
    {
        ResetValidationState();
        if (SelectedOperation != null)
        {
            OriginalOperation = SelectedOperation.Clone();
            OriginalOperation.operationID = SelectedOperation.operationID;
            OriginalOperation.toolID = SelectedOperation.toolID;

            currentTool = await Fassade.GetTool(SelectedOperation.toolID);
            if(currentTool != null)
            {
                var toolTypeId = currentTool?.toolTypeID ?? 0;

                toolTypeHasTemplates = await Fassade.ToolTypeHasTemplateRepository.Find(t=>t.ToolTypeId ==toolTypeId);

                currentTemplates.Clear();
                foreach (var toolTypeHasTemplate in toolTypeHasTemplates)
                {
                    currentTemplates.Add(toolTypeHasTemplate.TemplateId);
                }
            }
            await InitializeClasses();

			OperationVersions = await Fassade.GetOperationVersions(SelectedOperation.operationID.Value);
            selectedVersionId = -1;

            StateHasChanged();
        }
    }

    #region CRUD
    public async Task UpdateOperationAsync()
    {
        ResetValidationState();


        //if (!await DirtyManagerService.CheckIfDirty(SelectedOperation, OriginalOperation))
        //return;

        var dbOperation = await Fassade.GetOperation(SelectedOperation.operationID);
        if (dbOperation.Equals(SelectedOperation))
        {
            return;
        }



        if (await ValidateData() == false)
            return;

		    SelectedOperation.modifiedBy = UsernameService.Username;

        if (!await Fassade.UpdateOperationWithVersion(SelectedOperation, OriginalOperation))
            return;

        await SignalRService.SendMessageToServer($"OperationUpdated;{SelectedOperation.operationID}");
        await DirtyManagerService.setClean();
    }

    private async Task AddOperationAsync()
    {
        if (await ValidateData() == false)
            return;

		SelectedOperation.modifiedBy = UsernameService.Username;

        if (!await Fassade.AddOperation(SelectedOperation))
            return;
		var createdOperation = await Fassade.GetOperationByName(SelectedOperation.operationShortname, SelectedOperation.toolID.Value);
        await SignalRService.SendMessageToServer($"OperationCreated;{createdOperation.operationID}");
        await DirtyManagerService.setClean();
    }

    private async Task DeleteOperationAsync()
    {
        if (SelectedOperation != null && (SelectedOperation.isLocked == false || SelectedOperation.lockedBy == UsernameService.Username))
        {
            if (!await Fassade.DeleteOperation(SelectedOperation))
                return;

            await SignalRService.SendMessageToServer($"OperationDeleted;{SelectedOperation.operationID}");
            await DirtyManagerService.setClean();
        }
    }
    #endregion

    #region Validate
    public async Task<bool> ValidateData()
    {
        ResetValidationState();

        //Objekt
        if (SelectedOperation == null)
            return false; //??

        //OperationShortname
        if (string.IsNullOrWhiteSpace(SelectedOperation.operationShortname))
        {
            errorMessages["OperationShortname"] = Fassade.Language.OperationShortnameMissing;
        }

        if (!SelectedOperation.toolID.HasValue)
            return false; //??

        if (await Fassade.OperationExistsInTool(SelectedOperation.operationShortname, SelectedOperation.operationID.Value, SelectedOperation.toolID.Value))
        {
            errorMessages["OperationShortname"] = Fassade.Language.OperationShortnameAlreadyExists;

        }

        showErrors = errorMessages.Any();
        return !showErrors;
    }

    private void ResetValidationState()
    {
        errorMessages.Clear();
        showErrors = false;
    }

    #endregion

    #region Dirty
    private async Task<bool> CheckIfDirty()
    {
        if (SelectedOperation?.operationID == 0)
            return false;
        return await DirtyManagerService.CheckIfDirty(SelectedOperation, OriginalOperation, "Operation");
    }

    public async Task ResetOperation()
    {
        var signaloperation = await Fassade.GetOperation(SelectedOperation.operationID.Value);
        await SignalRService.SendMessageToServer($"OperationUpdated;{signaloperation.operationID}");
        await DirtyManagerService.setClean();
    }
    #endregion

    #region Lock
    private System.Threading.CancellationTokenSource? lockCancellationTokenSource;

    public async Task LockOperation()
    {

        if (SelectedOperation.operationID == 0) return;
        if(SelectedOperation.isLocked == true && SelectedOperation.lockedBy == UsernameService.Username)
        {
            lockCancellationTokenSource?.Cancel();
			StartUnlockTimer();
        }
        if (SelectedOperation.isLocked == false)
        {
            SelectedOperation.isLocked = true;
            SelectedOperation.lockedBy = UsernameService.Username;
			SelectedOperation.lockTimestamp = DateTime.Now;
            await Fassade.UpdateOperation(SelectedOperation);
            
           
            await SignalRService.SendMessageToServer($"OperationLocked;{SelectedOperation.operationID}");
            ReadOnly = false;
			StateHasChanged();
			StartUnlockTimer();
           

        }
    }

   
    private void StartUnlockTimer()
    {
        // Wenn bereits ein Timer läuft, abbrechen
        lockCancellationTokenSource?.Cancel();
        lockCancellationTokenSource = new System.Threading.CancellationTokenSource();

        _ = Task.Run(async () =>
        {
            try
            {
                // Warte 10 Minuten (600000 ms)
                await Task.Delay(TimeSpan.FromSeconds(600000), lockCancellationTokenSource.Token);

                // Nach 10 Minuten entsperren
                await UnlockOperationAsync();
            }
            catch (TaskCanceledException)
            {
                // Timer wurde abgebrochen (z.B. bei erneutem Lock)
            }
        });
    }

    private async Task UnlockOperationAsync()
    {
        if (SelectedOperation == null) return;

        SelectedOperation.isLocked = false;
        SelectedOperation.lockedBy = null;
        SelectedOperation.lockTimestamp = null;
        await Fassade.UpdateOperation(SelectedOperation);

        
        await SignalRService.SendMessageToServer($"OperationUnlocked;{SelectedOperation.operationID}");

        ReadOnly = true;
        StateHasChanged();
    }

    // Optional: Falls man das Lock manuell aufheben will
    public async Task ManualUnlockOperationAsync()
    {
        // Timer stoppen
        lockCancellationTokenSource?.Cancel();
        await UnlockOperationAsync();
    }
    #endregion

    #region Classes
    private async Task InitializeClasses()
    {
        decisionClasses = await Fassade.GetDecisionClasses();

        if (!currentTemplates.IsNullOrEmpty())
        {
            var savingClassesList = new List<SavingClass>();
            var verificationClassesList = new List<VerificationClass>();
            var generationClassesList = new List<GenerationClass>();

            foreach (var currentTemplate in currentTemplates.ToList())
            {
                savingClassesList.AddRange(await Fassade.GetSavingClasses(currentTemplate));
                verificationClassesList.AddRange(await Fassade.GetVerificationClasses(currentTemplate));
                generationClassesList.AddRange(await Fassade.GetGenerationClasses(currentTemplate));
            }
            //Set standards if classes are null (Saving never null)
            if (verificationClassesList.IsNullOrEmpty())
                verificationClassesList.AddRange(await Fassade.GetVerificationClasses(0));
            if (generationClassesList.IsNullOrEmpty())
                generationClassesList.AddRange(await Fassade.GetGenerationClasses(0));

            savingClasses = savingClassesList;
            verificationClasses = verificationClassesList;
            generationClasses = generationClassesList;
        }
    }

    #endregion

    #region 
    private async Task OnVersionChanged(int? versionId)
    {
        if (versionId.HasValue)
        {
            selectedVersionId = versionId.Value;

            if (versionId == -1)
            {
                if (SelectedOperation?.operationID != null)
                {
                    var currentOperation = await Fassade.GetOperation(SelectedOperation.operationID);
                    if (currentOperation != null)
                    {
                        SelectedOperation = currentOperation;
                    }
                }
            }
            else
            {
                var selectedVersion = OperationVersions.FirstOrDefault(v => v.operationVersionID == versionId);
                if (selectedVersion != null && SelectedOperation != null)
                {
                    SelectedOperation.operationShortname = selectedVersion.operationShortname;
                    SelectedOperation.operationDescription = selectedVersion.operationDescription;
                    SelectedOperation.operationSequence = selectedVersion.operationSequence;
                    SelectedOperation.operationSequenceGroup = selectedVersion.operationSequenceGroup;
                    SelectedOperation.operationDecisionCriteria = selectedVersion.operationDecisionCriteria;
                    SelectedOperation.alwaysPerform = selectedVersion.alwaysPerform;
                    SelectedOperation.decisionClassID = selectedVersion.decisionClassID;
                    SelectedOperation.generationClassID = selectedVersion.generationClassID;
                    SelectedOperation.verificationClassID = selectedVersion.verificationClassID;
                    SelectedOperation.savingClassID = selectedVersion.savingClassID;
                    SelectedOperation.parallel = selectedVersion.parallel;
                    SelectedOperation.qGateID = selectedVersion.qGateID;
                    SelectedOperation.lastModified = selectedVersion.lastModified;
                    SelectedOperation.modifiedBy = selectedVersion.modifiedBy;
                    SelectedOperation.Comment = selectedVersion.Comment;
                    SelectedOperation.Status = selectedVersion.Status;
                }
            }
            StateHasChanged();
        }
    }




    #endregion
}
