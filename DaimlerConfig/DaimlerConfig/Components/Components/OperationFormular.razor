@using DaimlerConfig.Components.Models
@inject DaimlerConfig.Components.Fassade.Fassade Fassade

@using DaimlerConfig.Services
@using Microsoft.IdentityModel.Tokens
@inject SignalRService SignalRService
@inject DirtyManagerService DirtyManagerService

<div>
    <div class="class-header justify-content-between align-items-center">
        <h2>Operation</h2>
        <div class="d-flex justify-content-end align-items-center gap-2">
            @if (SelectedOperation.operationID == 0)
            {
                <div class="d-flex justify-content-end align-items-center mb-3">
                    <button class="btn btn-primary btn-sm" @onclick="AddOperationAsync">Create</button>
                </div>
            }
            @if (SelectedOperation.operationID != 0)
            {
                <div class="d-flex justify-content-end align-items-center mb-3">
                    <button class="btn btn-primary btn-sm" @onclick="UpdateOperationAsync">Update</button>
                </div>
            }


            @if (SelectedOperation.operationID != 0)
            {
                <div class="d-flex justify-content-end align-items-center mb-3">
                    <button class="btn btn-primary btn-sm" @onclick="DeleteOperationAsync">Delete</button>
                </div>
            }
        </div>
    </div>


    <div class="layout position-relative">
        <div class="toolColoumnLeft">

            <div class="form-floating mb-3">
                <input type="text" class="form-control form-control" placeholder="" @onblur="CheckIfDirty" @bind="SelectedOperation.operationID" readonly>
                <label>Operation ID</label>
            </div>

            <div class="form-floating mb-3">
                <input type="text" class="form-control form-control" maxlength="16" placeholder="" @onblur="CheckIfDirty" @bind="SelectedOperation.operationShortname">
                <label>Operation Shortname</label>
            </div>

            <div class="form-floating mb-3">
                <textarea type="text" class="form-control form-control " maxlength="100" placeholder="" style="height: 150px" @onblur="CheckIfDirty" @bind="SelectedOperation.operationDescription"></textarea>
                <label>Operation Description</label>
                <span class="position-absolute end-0 bottom-0 me-2 mb-1 text-muted small">
                    @($"{SelectedOperation?.operationDescription?.Length ?? 0}/100")</span>
            </div>
        </div>
        <div class="toolColoumnRight ">

            <div class="form-floating mb-3">
                <select class="form-select form-select" id="ProcessingMode">
                    <option value="">select...</option>
                    <option value="Serial">Serial</option>
                    <option value="Parallel">Parallel</option>
                </select>
                <label for="ProcessingMode">Processing Mode</label>
            </div>

            <div class="form-floating mb-3">
                <input type="text" class="form-control form-control" placeholder="">
                <label>Operation Sequenz</label>
            </div>

            <div class="form-floating mb-3">
                <input type="text" class="form-control form-control" placeholder="">
                <label>Operation Sequenz Group</label>
            </div>

        </div>
    </div>
    <hr />
    <div>
        <h2>Classes</h2>
        <div class="layout position-relative">
            <div class="toolColoumnLeft">
                <div class="form-floating mb-3">
                    <select class="form-select form-select" id="DecisionClass" @bind="SelectedOperation.decisionClassID">
                        @foreach (var option in _decisionClasses)
                        {
                            <option value="@option.decisionClassID">@option.decisionClassName</option>
                        }
                    </select>
                    <label for="DecisionClass">Decision Class</label>
                </div>
                <div class="form-floating mb-3">
                    <select class="form-select form-select" id="GenerationClass" @bind="SelectedOperation.generationClassID">
                        @foreach (var option in _generationClasses)
                        {
                            <option value="@option.generationClassID">@option.generationClassName</option>
                        }
                    </select>
                    <label for="GenerationClass">Generation Class</label>
                </div>
                <div class="form-floating mb-3">
                    <select class="form-select form-select" id="VerificationClass" @bind="SelectedOperation.verificationClassID">
                        @foreach (var option in _verificationClasses)
                        {
                            <option value="@option.verificationClassID">@option.verificationClassName</option>
                        }
                    </select>
                    <label for="VerificationClass">Verification Class</label>
                </div>
                <div class="form-floating mb-3">
                    <select class="form-select form-select" id="SavingClass" @bind="SelectedOperation.savingClassID">
                        @foreach (var option in _savingClasses)
                        {
                            <option value="@option.savingClassID">@option.savingClassName</option>
                        }
                    </select>
                    <label for="SavingClass">Saving Class</label>
                </div>
            </div>
            <div class="toolColoumnRight">

                <div class="form-floating">
                    <textarea class="form-control form-control" maxlength="100" placeholder="" id="DecisionCriteria" style="height: 150px"></textarea>
                    <label for="DecisionCriteria">Decision Criteria</label>
                </div>
            </div>     
        </div>
    </div>
</div>
@code {
    [Parameter]
    public Operation? SelectedOperation { get; set; }

    [Parameter]
    public EventCallback OnUpdated { get; set; }
    
    private Tool? currentTool;
    
    private ToolType? currentToolType;
    
    private Template? currentTemplate;
    
    private Operation? OriginalOperation { get; set; }

    private List<DecisionClass>? _decisionClasses = new List<DecisionClass>();
    private List<GenerationClass>? _generationClasses = new List<GenerationClass>();
    private List<SavingClass>? _savingClasses = new List<SavingClass>();
    private List<VerificationClass>? _verificationClasses = new List<VerificationClass>();
    
    protected override async Task OnInitializedAsync()
    {
        if (SelectedOperation != null)
        {
            OriginalOperation = SelectedOperation.Clone();
            OriginalOperation.operationID = SelectedOperation.operationID;
            OriginalOperation.toolID = SelectedOperation.toolID;
        }
        var tools = await Fassade.ToolRepository.Find(t => t.toolID == SelectedOperation.toolID);
        currentTool = tools.FirstOrDefault();
        var toolClassId = currentTool.toolClassID;
        currentTemplate = await Fassade.TemplateRepository.Get(toolClassId);
        await InitializeClasses();
        StateHasChanged();
    }

    #region CRUD
    public async Task UpdateOperationAsync()
    {
        if (await ValidateData() == false)
            return;

        await Fassade.UpdateOperation(SelectedOperation);
        await OnUpdated.InvokeAsync();
        await SignalRService.SendMessageToServer("OperationChanged");

    }

    private async Task AddOperationAsync()
    {
        if (await ValidateData() == false)
            return;

        await Fassade.AddOperation(SelectedOperation);
        await OnUpdated.InvokeAsync();
        await SignalRService.SendMessageToServer("OperationChanged");
    }

    private async Task DeleteOperationAsync()
    {
        if(SelectedOperation != null)
        {
            await Fassade.DeleteOperation(SelectedOperation);
            await OnUpdated.InvokeAsync();
            await SignalRService.SendMessageToServer("OperationChanged");

        }
    }
    #endregion

    #region Validate
    private async Task<bool> ValidateData()
    {
        //Objekt
        if (SelectedOperation == null)
            return false;

        //OperationShortname
        if (string.IsNullOrWhiteSpace(SelectedOperation.operationShortname))
            return false;

        if (SelectedOperation.operationShortname.Length > 16)
            return false;

        if (!SelectedOperation.toolID.HasValue)
            return false;

        if (await Fassade.OperationExistsInTool(SelectedOperation.operationShortname, SelectedOperation.toolID.Value))
            return false;

        //OperationDescription
        if (SelectedOperation.operationDescription != null)
        {
            if (SelectedOperation.operationDescription.Length > 100)
                return false;
        }
        return true;
    }

    #endregion

    #region Dirty
    private async Task<bool> CheckIfDirty()
    {
        if (SelectedOperation?.operationID == 0)
            return false;
        return await DirtyManagerService.CheckIfDirty(SelectedOperation, OriginalOperation);
    }

    public async Task ResetOperation()
    {
        if (OriginalOperation != null)
        {
            SelectedOperation = OriginalOperation.Clone();
            SelectedOperation.operationID = OriginalOperation.operationID;
			SelectedOperation.toolID = OriginalOperation.toolID;
        }
        await SignalRService.SendMessageToServer("OperationChanged");
    }
    #endregion

    #region Classes
    protected async Task InitializeClasses()
    {
        _decisionClasses = (await Fassade.DecisionClassRepository
                .Find(_ => true))
                .ToList();
        _generationClasses = (await Fassade.GenerationClassRepository
                .Find(t => t.TemplateId == currentTemplate.TemplateId))
                .ToList();
        _savingClasses = (await Fassade.SavingClassRepository
                .Find(t => t.TemplateId == currentTemplate.TemplateId))
                .ToList();
        _verificationClasses = (await Fassade.VerificationClassRepository
                .Find(t => t.TemplateId == currentTemplate.TemplateId))
                .ToList();
        if (_verificationClasses.IsNullOrEmpty())
        {
            _verificationClasses.Add(await Fassade.VerificationClassRepository.Get(0));
        }
    }
    #endregion

}
