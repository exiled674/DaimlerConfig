
@page "/settings"

@using System.Diagnostics
@using Microsoft.Extensions.Configuration
@using System.IO
@using System.Text.Json
@using System.Text.Json.Nodes
@using DaimlerConfig.Security
@using MudBlazor
@using System.Text.RegularExpressions
@using DaimlerConfig.Components.Models

@inject IConfiguration Configuration
@inject ISnackbar Snackbar
@using DaimlerConfig.Services
@using Microsoft.Extensions.FileProviders
@inject AppStartupValidationService ValidationService
@inject SettingsValidationService SettingsValidation
@inject UsernameService UsernameS
@inject DaimlerConfig.Components.Fassade.Fassade Fassade

<div class="popup-backdrop">
    <div class="popup-dialog">
        <div class="popup-header">
            <MudText Typo="Typo.h6" Class="popup-title" Margin="Margin.Dense">@Fassade.Language.Settings</MudText>
            <MudIconButton Icon="@Icons.Material.Filled.Close"
                           Color="Color.Default"
                           Size="Size.Small"
                           Disabled="@isEditMode"
                           OnClick="CloseSomething"
                           Class="close-btn"
                           />
        </div>

        <div class="popup-content">
            @if (ValidationService.HasErrors)
            {
                <MudAlert Severity="Severity.Error" Class="mb-3" Dense="true">
                    <MudText Typo="Typo.body2">@ValidationService.ErrorMessage</MudText>
                </MudAlert>
            }

            <MudTabs Elevation="0" Rounded="false" Border="true" Class="compact-tabs">
                <MudTabPanel Text="General" Class="tab-panel" Margin="Margin.Dense">
                    <div class="setting-section">
                        <MudGrid>
                            <MudItem md="12" xs="12">
                                <MudTextField @bind-Value="_newUsername"
                                              Label="@Fassade.Language.Username"
                                              Placeholder="@Fassade.Language.EnterUsername"
                                              Variant="Variant.Outlined"
                                              @oninput="OnUsernameInput"
                                              Margin="Margin.Dense"
                                              HelperText="@Fassade.Language.UsernameHelperText"
                                              Class="mb-3"
                                              Style="flex: 1;"
                                               />

                                <MudTooltip Text="Reset" ShowOnHover="true">
                                    <MudIconButton Icon="@Icons.Material.Filled.Restore"
                                                   Color="Color.Primary"
                                                   OnClick="ResetToWindowsName" />
                                </MudTooltip>
                              
                            </MudItem>
                        
                        </MudGrid>

                        <MudSelect T="string"
                                   @bind-Value="_selectedLanguage"
                                   Label="Language"
                                   Variant="Variant.Outlined"
                                   Margin="Margin.Dense"
                                   Class="mb-3">
                            @if (_availableLanguages != null)
                            {
                                @foreach (var lang in _availableLanguages)
                                {
                                    <MudSelectItem Value="@lang">@lang.ToUpper()</MudSelectItem>
                                }
                            }
                        </MudSelect>
                    </div>
                </MudTabPanel>

                <MudTabPanel Text="Connection" Class="tab-panel" Margin="Margin.Dense">
                    <div class="setting-section">
                        <MudGrid Spacing="2">
                            <MudItem xs="8">
                                <MudTextField @bind-Value="serverIp"
                                              Label="Server IP"
                                              Variant="Variant.Outlined"
                                              Margin="Margin.Dense"
                                              HelperText="Database server address" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudNumericField @bind-Value="port"
                                                 Label="Port"
                                                 Variant="Variant.Outlined"
                                                 Margin="Margin.Dense" />
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField @bind-Value="initialCatalog"
                                              Label="Database"
                                              Variant="Variant.Outlined"
                                              Margin="Margin.Dense" />
                            </MudItem>
                            <MudItem xs="6">
                                <MudTextField @bind-Value="userId"
                                              Label="Username"
                                              Variant="Variant.Outlined"
                                              Margin="Margin.Dense" />
                            </MudItem>
                            <MudItem xs="6">
                                <MudTextField @bind-Value="password"
                                              Label="Password"
                                              InputType="@(showPassword? InputType.Text: InputType.Password)"
                                              Variant="Variant.Outlined"
                                              Margin="Margin.Dense"
                                              Adornment="Adornment.End"
                                              AdornmentIcon="@(showPassword? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                                              OnAdornmentClick="TogglePasswordVisibility" />
                            </MudItem>
                        </MudGrid>

                        <div class="checkbox-section">
                            <MudCheckBox @bind-Value="encrypt"
                                         Label="Encrypt connection"
                                         Color="Color.Primary"
                                         Dense="true" />
                            <MudCheckBox @bind-Value="trustServerCertificate"
                                         Label="Trust server certificate"
                                         Color="Color.Primary"
                                         Dense="true" />
                        </div>
                    </div>
                </MudTabPanel>
            </MudTabs>

            <div class="button-section">
                <MudButton Variant="Variant.Text"
                           Color="Color.Default"
                           OnClick="CloseSomething"
                           Class="flex-grow-1">
                    Cancel
                </MudButton>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="Icons.Material.Filled.Save"
                           OnClick="async () => {
                                        await SaveGeneralSettings();
                                        await ChangeUsername();
                                    }"
                           Class="flex-grow-1">
                    Save
                </MudButton>
            </div>
        </div>
    </div>
</div>

<style>
    .popup-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.4);
        z-index: 1000;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .popup-dialog {
        background: white;
        border-radius: 8px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
        width: 480px;
        max-width: 40vw;
        max-height: 56vh;
        overflow: hidden;
        display: flex;
        flex-direction: column;
    }

    .popup-header {
        padding: 16px 20px;
        border-bottom: 1px solid var(--mud-palette-lines-default);
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: var(--mud-palette-surface);
        flex-shrink: 0;
    }

    .popup-title {
        font-weight: 600;
        margin: 0;
    }

    .close-btn {
        margin: -8px;
    }

    .popup-content {
        padding: 0;
        overflow-y: auto;
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    .compact-tabs {
        flex: 1;
        display: flex;
        flex-direction: column;
    }

        .compact-tabs .mud-tabs-toolbar {
            min-height: 48px;
            padding: 0 16px;
            background: var(--mud-palette-surface);
        }

        .compact-tabs .mud-tabs-panels {
            flex: 1;
            padding: 0;
        }

    .tab-panel {
        padding: 20px;
        height: 100%;
    }

    .setting-section {
        display: flex;
        flex-direction: row;
        gap: 8px;
    }

    .checkbox-section {
        margin-top: 16px;
        display: flex;
        flex-direction: column;
        gap: 4px;
    }

    .button-section {
        padding: 16px 20px;
        border-top: 1px solid var(--mud-palette-lines-default);
        display: flex;
        gap: 12px;
        background: var(--mud-palette-surface);
        flex-shrink: 0;
    }

    .flex-grow-1 {
        flex: 1;
    }

    /* Remove default MudTabs bottom border since we have our own */
    .compact-tabs .mud-tabs-toolbar {
        border-bottom: 1px solid var(--mud-palette-lines-default);
    }

    /* Compact spacing for form elements */
    .mud-input-control-input-container {
        min-height: 40px;
    }

    .mud-select .mud-input-control-input-container {
        min-height: 40px;
    }

    /* Make checkboxes more compact */
    .mud-checkbox {
        margin: 4px 0;
    }
</style>



@code {

    [Parameter]
    public EventCallback OnClosing { get; set; }


    // Original fields
    private string connectionString = "";
    private string signalRHubUrl = "";
    private string statusMessage = "";
    private string errorMessage = "";
    private bool isLoading = true;
    private bool hasError = false;
    private bool isStatusError = false;
    private bool isSaving = false;

    // New fields for edit mode and form handling
    private bool isEditMode = false;
    private bool hasUnsavedChanges = false;
    private bool showPassword = false;

    // Connection string components
    private string serverIp = "";
    private int port = 1433;
    private string initialCatalog = "";
    private string userId = "";
    private string password = "";
    private bool persistSecurityInfo = false;
    private bool multipleActiveResultSets = false;
    private bool encrypt = false;
    private bool trustServerCertificate = true;
    private int connectionTimeout = 30;

    // Backup values for reset functionality
    private string backupServerIp = "";
    private int backupPort = 1433;
    private string backupInitialCatalog = "";
    private string backupUserId = "";
    private string backupPassword = "";
    private bool backupPersistSecurityInfo = false;
    private bool backupMultipleActiveResultSets = false;
    private bool backupEncrypt = false;
    private bool backupTrustServerCertificate = true;
    private int backupConnectionTimeout = 30;
    private string backupSignalRHubUrl = "";

    private bool isValidating = false;
    private List<string> validationErrors = new List<string>();

    private List<string> _availableLanguages = new();
    private string _selectedLanguage;
    
    private void ParseConnectionString(string connStr)
    {
        if (string.IsNullOrEmpty(connStr)) return;

        var parts = connStr.Split(';', StringSplitOptions.RemoveEmptyEntries);

        foreach (var part in parts)
        {
            var keyValue = part.Split('=', 2);
            if (keyValue.Length != 2) continue;

            var key = keyValue[0].Trim();
            var value = keyValue[1].Trim();

            switch (key.ToLower())
            {
                case "server":
                    var serverParts = value.Split(',');
                    serverIp = serverParts[0];
                    if (serverParts.Length > 1 && int.TryParse(serverParts[1], out int parsedPort))
                        port = parsedPort;
                    break;
                case "initial catalog":
                    initialCatalog = value;
                    break;
                case "user id":
                    userId = value;
                    break;
                case "password":
                    password = value;
                    break;
                case "persist security info":
                    persistSecurityInfo = bool.TryParse(value, out bool psi) && psi;
                    break;
                case "multipleactiveresultsets":
                    multipleActiveResultSets = bool.TryParse(value, out bool mars) && mars;
                    break;
                case "encrypt":
                    encrypt = bool.TryParse(value, out bool enc) && enc;
                    break;
                case "trustservercertificate":
                    trustServerCertificate = bool.TryParse(value, out bool tsc) && tsc;
                    break;
                case "connection timeout":
                    if (int.TryParse(value, out int timeout))
                        connectionTimeout = timeout;
                    break;
            }
        }
    }

    private string BuildConnectionString()
    {
        return $"Server={serverIp},{port};Initial Catalog={initialCatalog};Persist Security Info={persistSecurityInfo};User ID={userId};Password={password};MultipleActiveResultSets={multipleActiveResultSets};Encrypt={encrypt};TrustServerCertificate={trustServerCertificate};Connection Timeout={connectionTimeout};";
    }

    private void BackupCurrentValues()
    {
        backupServerIp = serverIp;
        backupPort = port;
        backupInitialCatalog = initialCatalog;
        backupUserId = userId;
        backupPassword = password;
        backupPersistSecurityInfo = persistSecurityInfo;
        backupMultipleActiveResultSets = multipleActiveResultSets;
        backupEncrypt = encrypt;
        backupTrustServerCertificate = trustServerCertificate;
        backupConnectionTimeout = connectionTimeout;
        backupSignalRHubUrl = signalRHubUrl;
    }

    private void EnableEditMode()
    {
        isEditMode = true;
        hasUnsavedChanges = false;
        BackupCurrentValues();
    }

    private void CancelEdit()
    {
        isEditMode = false;
        hasUnsavedChanges = false;
        ResetChanges();
    }

    private void ResetChanges()
    {
        serverIp = backupServerIp;
        port = backupPort;
        initialCatalog = backupInitialCatalog;
        userId = backupUserId;
        password = backupPassword;
        persistSecurityInfo = backupPersistSecurityInfo;
        multipleActiveResultSets = backupMultipleActiveResultSets;
        encrypt = backupEncrypt;
        trustServerCertificate = backupTrustServerCertificate;
        connectionTimeout = backupConnectionTimeout;
        signalRHubUrl = backupSignalRHubUrl;

        hasUnsavedChanges = false;
        StateHasChanged();
    }

    private void OnFieldChanged()
    {
        hasUnsavedChanges = true;
        StateHasChanged();
    }

    private void OnFieldChanged(bool value)
    {
        hasUnsavedChanges = true;
        StateHasChanged();
    }

    private void TogglePasswordVisibility()
    {
        if (isEditMode)
        {
            showPassword = !showPassword;
        }
    }

    private async Task SaveGeneralSettings()
    {
        try
        {
            var languageFilePath = Path.Combine(GetLanguagesFolderPath(), $"{_selectedLanguage}.json");
            
            await Fassade.LoadLanguageFromFileAsync(languageFilePath);
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ordner konnte nicht geöffnet werden: {ex.Message}");
        }
    }
    private string GetLanguagesFolderPath()
    {
        // Pfad zum Languages-Ordner bestimmen
        var appDataPath = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
        return Path.Combine(appDataPath);
    }

    private async Task SaveSettings()
    {
        // Clear previous validation errors
        validationErrors.Clear();
        statusMessage = "";

        if (string.IsNullOrWhiteSpace(serverIp) || string.IsNullOrWhiteSpace(initialCatalog) ||
            string.IsNullOrWhiteSpace(userId) || string.IsNullOrWhiteSpace(password))
        {
            statusMessage = Fassade.Language.MissingDbInfo;
            isStatusError = true;
            return;
        }

        if (string.IsNullOrWhiteSpace(signalRHubUrl))
        {
            statusMessage = Fassade.Language.MissingSignalRInfo;
            isStatusError = true;
            return;
        }

        isValidating = true;
        isSaving = true;
        statusMessage = "";
        StateHasChanged();

        try
        {
            // Build new connection string (declare once and reuse)
            var newConnectionString = BuildConnectionString();

            // Validate settings using the new service
            var validationResult = await SettingsValidation.ValidateSettingsAsync(newConnectionString, signalRHubUrl);

            if (!validationResult.IsValid)
            {
                validationErrors = validationResult.ErrorMessages;
                isStatusError = true;
                return;
            }

            var appSettingsPath = Path.Combine(
                Environment.GetFolderPath(Environment.SpecialFolder.UserProfile),
                "appsettings.json");

            // Create file if it doesn't exist
            if (!File.Exists(appSettingsPath))
            {
                var initialConfig = @"{
  ""ConnectionStrings"": {
    ""DefaultConnection"": """"
  },
  ""SignalR"": {
    ""HubUrl"": """"
  }
}";
                await File.WriteAllTextAsync(appSettingsPath, initialConfig);
            }

            // Load current JSON content
            string jsonText = await File.ReadAllTextAsync(appSettingsPath);
            var jsonNode = JsonNode.Parse(jsonText) ?? new JsonObject();

            // Use the already declared newConnectionString variable
            if (jsonNode["ConnectionStrings"] == null)
                jsonNode["ConnectionStrings"] = new JsonObject();

            jsonNode["ConnectionStrings"]["DefaultConnection"] = newConnectionString;

            // Set SignalR URL
            if (jsonNode["SignalR"] == null)
                jsonNode["SignalR"] = new JsonObject();

            jsonNode["SignalR"]["HubUrl"] = signalRHubUrl;

            // Write JSON back to file
            var updatedJson = jsonNode.ToJsonString(new JsonSerializerOptions { WriteIndented = true });
            await File.WriteAllTextAsync(appSettingsPath, updatedJson);

            // Apply encryption if available
            if (typeof(ConfigurationEncryptor).GetMethod("EncryptConnectionString") != null)
            {
                ConfigurationEncryptor.EncryptConnectionString(newConnectionString, appSettingsPath);
            }

            statusMessage = @Fassade.Language.SavedAppWillRestart;
            isStatusError = false;
            hasUnsavedChanges = false;
            isEditMode = false;

            // Update backup values
            BackupCurrentValues();

            StateHasChanged();

            await Task.Delay(2000);

            // Restart application
            if (Microsoft.Maui.Controls.Application.Current != null)
            {
                Microsoft.Maui.Controls.Application.Current.Quit();
            }
        }
        catch (Exception ex)
        {
            statusMessage =  @Fassade.Language.SaveError + ex.Message;
            isStatusError = true;
            System.Diagnostics.Debug.WriteLine($"Save Error: {ex}");
            Console.WriteLine($"Save Error: {ex}");
        }
        finally
        {
            isValidating = false;
            isSaving = false;
            StateHasChanged();
        }
    }
    
    private void OpenLanguageFolder()
    {
        var folderPath = Path.Combine(GetLanguagesFolderPath());

        if (Directory.Exists(folderPath))
        {
            try
            {
                Process.Start(new ProcessStartInfo
                {
                    FileName = folderPath,
                    UseShellExecute = true // wichtig für Ordner/Dateien
                });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ordner konnte nicht geöffnet werden: {ex.Message}");
            }
        }
    }


    private async Task CloseSomething()
    {
        if (isEditMode) return;
        await OnClosing.InvokeAsync();
    }

    #region Username Change Logic

    private string _newUsername = "";

    protected override async Task OnInitializedAsync()
    {
        //Language picker
        var fileProvider = new PhysicalFileProvider(Path.Combine(GetLanguagesFolderPath()));
        _availableLanguages = fileProvider.GetDirectoryContents("")
            .Where(f => f.Name.EndsWith("LANG.json"))
            .Select(f => Path.GetFileNameWithoutExtension(f.Name))
            .ToList();
        // Extrahiere nur den Username-Teil (vor dem Semikolon)
        _newUsername = GetDisplayUsername(UsernameS.Username);

        await Task.Delay(100);

        try
        {
            connectionString = Configuration?.GetConnectionString("DefaultConnection") ?? "";
            signalRHubUrl = Configuration?["SignalR:HubUrl"] ?? "";

            ParseConnectionString(connectionString);
            BackupCurrentValues();

            isLoading = false;
        }
        catch (Exception ex)
        {
            hasError = true;
            errorMessage = @Fassade.Language.LoadingError + ex.Message;
            isLoading = false;
        }

        StateHasChanged();
    }

    private string GetDisplayUsername(string fullUsername)
    {
        if (string.IsNullOrWhiteSpace(fullUsername))
            return "";

        // Extrahiere nur den Teil vor dem Semikolon
        var semicolonIndex = fullUsername.IndexOf(';');
        if (semicolonIndex > 0)
        {
            return fullUsername.Substring(0, semicolonIndex);
        }

        return fullUsername;
    }

    private string GetGuidPart(string fullUsername)
    {
        if (string.IsNullOrWhiteSpace(fullUsername))
            return "";

        // Extrahiere den Teil nach dem Semikolon (die GUID)
        var semicolonIndex = fullUsername.IndexOf(';');
        if (semicolonIndex >= 0 && semicolonIndex < fullUsername.Length - 1)
        {
            return fullUsername.Substring(semicolonIndex + 1);
        }

        return "";
    }

    private async Task ChangeUsername()
    {
        if (!string.IsNullOrWhiteSpace(_newUsername))
        {
            // Kombiniere den neuen Username mit der existierenden GUID
            var guidPart = GetGuidPart(UsernameS.Username);
            var newFullUsername = string.IsNullOrWhiteSpace(guidPart)
                ? _newUsername
                : $"{_newUsername};{guidPart}";

            UsernameS.UpdateUsername(newFullUsername);
            StateHasChanged();
        }
    }

    private void ResetToWindowsName()
    {
        UsernameS.ResetToWindowsUsername();
        _newUsername = GetDisplayUsername(UsernameS.Username);
        StateHasChanged();
    }

    private void OnUsernameInput(ChangeEventArgs e)
    {
        _newUsername = e.Value?.ToString() ?? "";
        StateHasChanged(); // Trigger re-render to update avatar
    }

    private string GetUserInitial()
    {
        var displayName = string.IsNullOrWhiteSpace(_newUsername)
            ? GetDisplayUsername(UsernameS.Username)
            : _newUsername;
        return string.IsNullOrWhiteSpace(displayName) ? "U" : displayName[0].ToString().ToUpper();
    }

    // Für die Anzeige des Usernames im HTML
    private string GetDisplayUsernameForUI()
    {
        return string.IsNullOrWhiteSpace(_newUsername)
            ? GetDisplayUsername(UsernameS.Username)
            : _newUsername;
    }

    private string GetAvatarStyle()
    {
        return "width: 120px; height: 120px; font-size: 48px; font-weight: bold; " +
               "background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;";
    }

    #endregion
}