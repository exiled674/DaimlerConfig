@using DaimlerConfig.Components.Models
@inject DaimlerConfig.Components.Fassade.Fassade Fassade

@using DaimlerConfig.Services
@inject SignalRService SignalRService

<div>
    <h2>Tool</h2>
    <div class="layout">
        <div class="toolColoumn">
            <label>Tool ID:</label>
            <input class="input-field" type="text" @bind="SelectedTool.toolID" readonly  />

            <label>Tool Shortname:</label>
            <input class="input-field" type="text" @bind="SelectedTool.toolShortname" />

            <label>Tool Description:</label>
            <input class="input-field" type="text" @bind="SelectedTool.toolDescription"  />
        </div>

            <div class="form-floating mb-3">
                <input type="text" class="form-control form-control" maxlength="16" placeholder="" @bind="SelectedTool.toolShortname" @onblur="UpdateToolAsync">
                <label>Tool Shortname</label>
                <datalist id="datalistOptions">

                    <option value="San Francisco"></option>
                    <option value="New York"></option>
                    <option value="Seattle"></option>
                    <option value="Los Angeles"></option>
                    <option value="Chicago"></option>
                </datalist>
            </div>

            <div class="form-floating mb-3">
                <textarea type="text" class="form-control form-control" placeholder="" style="height: 100px" @bind="SelectedTool.toolDescription" @onblur="UpdateToolAsync"></textarea>
                <label>Tool Description</label>
                <span class="position-absolute end-0 bottom-0 me-2 mb-1 text-muted small">
                    @($"{SelectedTool?.toolDescription?.Length ?? 0}/100")
                </span>
            </div>


        </div>

        <div class="toolColoumnRight ">


            <div class="form-floating mb-3">
                <select class="form-select form-select" id="ToolClass">
                    <option value="">select...</option>
                    <option value="Class1">needs</option>
                    <option value="Class2">binding</option>
                </select>
                <label for="ToolClass">Tool Class</label>
            </div>

            <div class="form-floating mb-3">
                <select class="form-select form-select" id="ToolType">
                    <option value="">select...</option>
                    <option value="Class1">needs</option>
                    <option value="Class2">binding</option>
                </select>
                <label for="ToolType">Tool Type</label>
            </div>
         </div>

        </div>
    <hr />
    <div>
        <h3>Network</h3>
        <div class="layout">
            <div class="toolColoumn">
                <label>IP-Address Device:</label>
                <input class="input-field" type="text" @bind="SelectedTool.ipAddressDevice" @onblur="e => ValidateIP()" placeholder="0.0.0.0" />

                @if (!string.IsNullOrEmpty(IPValidationMessage))
                {
                    <div class="text-danger">@IPValidationMessage</div>
                }

                <label>PLC Name:</label>
                <input class="input-field" type="text" />

                <label>DBNo Send:</label>
                <input class="input-field" type="text" />

            <div class="toolColoumnRight">
            <div class="form-floating mb-3">
                <input type="text" class="form-control form-control" placeholder="">
                <label>Address in Send-DB</label>
            </div>
            <div class="form-floating mb-3">
                <input type="text" class="form-control form-control" placeholder="">
                <label>Address in Receive-DB</label>
            </div>
            <div class="form-floating mb-3">
                <input type="text" class="form-control form-control" placeholder="">
                <label>Byte Pre Check</label>
            </div>
                

                @if (SelectedTool?.toolID == 0)
                {
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <button class="btn btn-primary btn-sm" @onclick="CreateToolAsync">Create</button>
                    </div>
                    @if (!string.IsNullOrEmpty(ValidationMessage))
                    {
                        <div class="text-danger">@ValidationMessage</div>
                    }
                }

                @if (SelectedTool?.toolID != 0)
                {
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <button class="btn btn-primary btn-sm" @onclick="UpdateToolAsync">Update</button>
                    </div>
                    @if (!string.IsNullOrEmpty(ValidationMessage))
                    {
                        <div class="text-danger">@ValidationMessage</div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {















    [Parameter]
    public Tool? SelectedTool { get; set; }

    [Parameter]
    public EventCallback OnUpdated { get; set; }

    private string? ValidationMessage;

    private async Task UpdateToolAsync()
    {
        if (SelectedTool != null && SelectedTool.toolID != 0)
        {
            await Fassade.UpdateTool(SelectedTool);
            await OnUpdated.InvokeAsync();
            await SignalRService.SendMessageToServer("ToolChanged");
        }
    }

    private async Task CreateToolAsync()
    {
        ValidationMessage = null;

        if (SelectedTool == null)
        {
            ValidationMessage = "Tool-Daten fehlen.";
            return;
        }

        if (string.IsNullOrWhiteSpace(SelectedTool.toolShortname))
        {
            ValidationMessage = "Tool Shortname darf nicht leer sein.";
            return;
        }

        bool exists = await Fassade.ToolExistsByName(SelectedTool.toolShortname);
        if (exists)
        {
            ValidationMessage = "Tool Shortname ist bereits vergeben.";
            return;
        }

        if (!ValidateIP())
        {
            ValidationMessage = "Ungültige IP-Adresse.";
            return;
        }

       
        await Fassade.AddTool(SelectedTool);
        await OnUpdated.InvokeAsync();

        await SignalRService.SendMessageToServer("ToolChanged");
    }




    private string? IPValidationMessage;

    private bool ValidateIP()
    {
        IPValidationMessage = null;

        if (string.IsNullOrWhiteSpace(SelectedTool.ipAddressDevice))
        {
            IPValidationMessage = "IP-Adresse darf nicht leer sein.";
            return false;
        }

        var regex = new System.Text.RegularExpressions.Regex(@"^(([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])$");

        if (!regex.IsMatch(SelectedTool.ipAddressDevice))
        {
            IPValidationMessage = "Ungültiges IP-Adressformat.";

            return false;
        }



        return true;
    }

}
