@using DaimlerConfig.Components.Models
@inject DaimlerConfig.Components.Fassade.Fassade Fassade

@using DaimlerConfig.Services
@inject SignalRService SignalRService

<div>
    <h2>Tool</h2>
    <div class="layout">
        <div class="toolColoumn">
            <label>Tool ID:</label>
            <input class="input-field" type="text" @bind="SelectedTool.toolID" readonly  />

            <label>Tool Shortname:</label>
            <input class="input-field" type="text" @bind="SelectedTool.toolShortname" />

            <label>Tool Description:</label>
            <input class="input-field" type="text" @bind="SelectedTool.toolDescription"  />
        </div>

        <div class="toolColoumn">
            <label>Tool Class</label>
            <select class="input-field">
                <option value="">Select</option>
                <option value="Option 1">Option 1</option>
                <option value="Option 2">Option 2</option>
                <option value="Option 3">Option 3</option>
            </select>

            <label>Tool Type</label>
            <select class="input-field">
                <option value="">Select</option>
                <option value="Option Type 1">Option Type 1</option>
                <option value="Option Type 2">Option Type 2</option>
                <option value="Option Type 3">Option Type 3</option>
            </select>
        </div>
    </div>
    <hr />
    <div>
        <h3>Network</h3>
        <div class="layout">
            <div class="toolColoumn">
                <label>IP-Address Device:</label>
                <input class="input-field" type="text" @bind="SelectedTool.ipAddressDevice" @onblur="e => ValidateIP()" placeholder="0.0.0.0" />

                @if (!string.IsNullOrEmpty(IPValidationMessage))
                {
                    <div class="text-danger">@IPValidationMessage</div>
                }

                <label>PLC Name:</label>
                <input class="input-field" type="text" />

                <label>DBNo Send:</label>
                <input class="input-field" type="text" />

                <label>DBNo Receive:</label>
                <input class="input-field" type="text" />
            </div>

            <div class="toolColoumn">
                <label>Address in Send-DB:</label>
                <input class="input-field" type="text" />

                <label>Address in Receive-DB:</label>
                <input class="input-field" type="text" />

                <label>Byte Pre Check:</label>
                <input class="input-field" type="text" />

                @if (SelectedTool?.toolID == 0)
                {
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <button class="btn btn-primary btn-sm" @onclick="CreateToolAsync">Create</button>
                    </div>
                    @if (!string.IsNullOrEmpty(ValidationMessage))
                    {
                        <div class="text-danger">@ValidationMessage</div>
                    }
                }

                @if (SelectedTool?.toolID != 0)
                {
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <button class="btn btn-primary btn-sm" @onclick="UpdateToolAsync">Update</button>
                    </div>
                    @if (!string.IsNullOrEmpty(ValidationMessage))
                    {
                        <div class="text-danger">@ValidationMessage</div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {















    [Parameter]
    public Tool? SelectedTool { get; set; }

    [Parameter]
    public EventCallback OnUpdated { get; set; }

    private string? ValidationMessage;

    private async Task UpdateToolAsync()
    {
        if (SelectedTool != null && SelectedTool.toolID != 0)
        {
            await Fassade.UpdateTool(SelectedTool);
            await OnUpdated.InvokeAsync();
            await SignalRService.SendMessageToServer("ToolChanged");
        }
    }

    private async Task CreateToolAsync()
    {
        ValidationMessage = null;

        if (SelectedTool == null)
        {
            ValidationMessage = "Tool-Daten fehlen.";
            return;
        }

        if (string.IsNullOrWhiteSpace(SelectedTool.toolShortname))
        {
            ValidationMessage = "Tool Shortname darf nicht leer sein.";
            return;
        }

        bool exists = await Fassade.ToolExistsByName(SelectedTool.toolShortname);
        if (exists)
        {
            ValidationMessage = "Tool Shortname ist bereits vergeben.";
            return;
        }

        if (!ValidateIP())
        {
            ValidationMessage = "Ungültige IP-Adresse.";
            return;
        }

       
        await Fassade.AddTool(SelectedTool);
        await OnUpdated.InvokeAsync();

        await SignalRService.SendMessageToServer("ToolChanged");
    }




    private string? IPValidationMessage;

    private bool ValidateIP()
    {
        IPValidationMessage = null;

        if (string.IsNullOrWhiteSpace(SelectedTool.ipAddressDevice))
        {
            IPValidationMessage = "IP-Adresse darf nicht leer sein.";
            return false;
        }

        var regex = new System.Text.RegularExpressions.Regex(@"^(([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])$");

        if (!regex.IsMatch(SelectedTool.ipAddressDevice))
        {
            IPValidationMessage = "Ungültiges IP-Adressformat.";

            return false;
        }



        return true;
    }

}
