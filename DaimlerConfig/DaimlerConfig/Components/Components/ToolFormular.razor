@using DaimlerConfig.Components.Models
@inject DaimlerConfig.Components.Fassade.Fassade Fassade

@using DaimlerConfig.Services
@inject SignalRService SignalRService
@inject DirtyManagerService DirtyManagerService
@implements IDisposable
@inject UsernameService UsernameService

<div class="container-lg" style="padding-left: 0px;">
    <!-- Header mit konsistenter Styling wie die anderen Spalten -->
    <div style="background: white;">
        <div class="d-flex justify-content-between align-items-center" style="padding: 25px 20px 20px 20px; margin-bottom: 0 !important;">

            <MudText Typo="Typo.h5"
                     Class="mud-typography-h5"
                     Style="color: var(--mud-palette-text-primary) !important; font-weight: 700 !important; font-size: 1.3rem !important; margin: 0 !important; padding-bottom:12px;">
                @Fassade.Language.Tool
                @if (ReadOnly && !string.IsNullOrWhiteSpace(SelectedTool?.lockedBy))
                {
                    <MudIcon Icon="@Icons.Material.Filled.Lock" Style="margin-left: 8px;" />
                    <span style="margin-left: 4px;">@SelectedTool.lockedBy.Split(';')[0]</span>
                }
            </MudText>

            <div class="d-flex align-items-center gap-2">
                <!-- Dropdown mit eigenständiger Positionierung -->
                <div style="align-self: flex-start; margin-top: -8px;">
                    <MudSelect T="int?" Label="Version"
                               Variant="Variant.Outlined"
                               Disabled="@ReadOnly"
                               Class="compact-select"
                               Style="background: white; border-radius: 6px; min-width: 180px;"
                               Value="selectedVersionId"
                               ValueChanged="OnVersionChanged"
                               OnBlur="LockTool">
                        <MudSelectItem T="int?" Value="-1">@Fassade.Language.CurrentVersion</MudSelectItem>
                        @foreach (var version in ToolVersions.OrderByDescending(v => v.toolVersionID))
                        {
                            <MudSelectItem T="int?" Value="@version.toolVersionID">
                                @version.modifiedBy?.Split(';')[0] - @version.lastModified
                            </MudSelectItem>
                        }
                    </MudSelect>
                </div>

                @if (SelectedTool?.toolID == 0)
                {
                    <MudButton StartIcon="@Icons.Material.Filled.AddCircle"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="Size.Small"
                               Class="add-station-btn-consistent"
                               Style="min-width: 90px; height: 32px; font-size: 0.75rem; margin-bottom:12px;"
                               @onclick="CreateToolAsync">
                        @Fassade.Language.Create
                    </MudButton>
                }

                @if (SelectedTool?.toolID != 0)
                {
                    <MudButton StartIcon="@Icons.Material.Filled.Save"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="Size.Small"
                               Class="add-station-btn-consistent"
                               Style="min-width: 90px; height: 32px; font-size: 0.75rem; margin-bottom:12px;"
                               @onclick="UpdateToolAsync"
                               disabled="@ReadOnly">
                        @Fassade.Language.Save
                    </MudButton>
                }

                @if (!string.IsNullOrEmpty(ValidationMessage))
                {
                    <div class="alert alert-danger mb-0 ms-2">@ValidationMessage</div>
                }
            </div>
        </div>
    </div>

    <!-- Separate Linie mit Padding -->
    <div style="padding: 0px 24px 0px 0px;">
        <div style="border-bottom: 1px solid rgba(0,0,0,0.08);"></div>
    </div>

    <!-- Optimierter Formular-Bereich mit besserem Spacing -->
    <div class="layout position-relative" style="padding: 28px 24px 24px 24px;">
        <!-- Tool Information Section -->
        <div class="row mb-4">
            <!-- First Row: Tool ID and Tool Shortname -->
            <div class="col-md-6 mb-3">
                <MudTextField T="int?"
                              Label="@Fassade.Language.ToolId"
                              Value="SelectedTool.toolID"
                              ReadOnly="true"
                              Variant="Variant.Outlined"
                              Margin="Margin.Normal"
                              Class="w-100"
                              Style="background: white; border-radius: 12px;"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Lock" />
            </div>

            <div class="col-md-6 mb-3">
                <div style="position: relative;">
                    <MudTextField T="string"
                                  Label="@Fassade.Language.ToolShortname"
                                  @bind-Value="SelectedTool.toolShortname"
                                  MaxLength="16"
                                  ReadOnly="@ReadOnly"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Normal"
                                  @onclick="LockTool"
                                  OnBlur="CheckIfDirty"
                                  Error="@errorMessages.ContainsKey("ToolShortname")"
                                  ErrorText="@((errorMessages.ContainsKey("ToolShortname")) ? errorMessages["ToolShortname"] : null)"
                                  Adornment="@(ReadOnly ? Adornment.End : Adornment.None)"
                                  AdornmentIcon="@(ReadOnly ? Icons.Material.Filled.Lock : null)" />
                    <span style="position: absolute; right: 10px; bottom: 5px; color: rgba(0, 0, 0, 0.6); font-size: 0.75rem;">
                        @($"{SelectedTool?.toolShortname?.Length ?? 0}/16")
                    </span>
                </div>
            </div>

            <!-- Second Row: Tool Class and Tool Type -->
            <div class="col-md-6 mb-3">
                <MudSelect T="int?" Label="Tool Class"
                           Variant="Variant.Outlined"
                           Margin="Margin.Normal"
                           Disabled="@ReadOnly"
                           Class="flex-grow-1 search-field-enhanced"
                           Style="background: white; border-radius: 12px;"
                           Value="SelectedTool.toolClassID"
                           ValueChanged="OnToolClassChanged"
                           OnBlur="LockTool">
                    @foreach (var toolClass in toolClasses.OrderBy(t => t.toolClassName))
                    {
                        <MudSelectItem T="int?" Value="@toolClass.toolClassID">@toolClass.toolClassName</MudSelectItem>
                    }
                </MudSelect>
            </div>

            <div class="col-md-6 mb-3">
                <MudSelect T="int?" Label="Tool Type"
                           Variant="Variant.Outlined"
                           Margin="Margin.Normal"
                           Disabled="@ReadOnly"
                           Class="flex-grow-1 search-field-enhanced"
                           Style="background: white; border-radius: 12px;"
                           Value="SelectedTool.toolTypeID"
                           ValueChanged="OnToolTypeChanged"
                           OnBlur="LockTool">
                    @foreach (var toolType in toolTypes.OrderBy(t => t.toolTypeName))
                    {
                        <MudSelectItem T="int?" Value="@toolType.toolTypeID">@toolType.toolTypeName</MudSelectItem>
                    }
                </MudSelect>
            </div>

            <!-- Third Row: Tool Description and Comment side by side -->
            <div class="col-md-6 mb-3">
                <div style="position: relative;">
                    <MudTextField T="string"
                                  Label="@Fassade.Language.ToolDescription"
                                  @bind-Value="SelectedTool.toolDescription"
                                  ReadOnly="@ReadOnly"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Normal"
                                  Lines="4"
                                  MaxLength="1000"
                                  Style="background: white; border-radius: 12px;"
                                  @onclick="LockTool"
                                  OnBlur="CheckIfDirty"
                                  Class="w-100"
                                  Adornment="@(ReadOnly ? Adornment.End : Adornment.None)"
                                  AdornmentIcon="@(ReadOnly ? Icons.Material.Filled.Lock : null)" />
                    <span style="position: absolute; right: 10px; bottom: 5px; color: rgba(0, 0, 0, 0.6); font-size: 0.75rem;">
                        @($"{SelectedTool?.toolDescription?.Length ?? 0}/1000")
                    </span>
                </div>
            </div>

            <div class="col-md-6 mb-3">
                <div style="position: relative;">
                    <MudTextField T="string"
                                  @bind-Value="SelectedTool.Comment"
                                  Label="@Fassade.Language.Comment"
                                  Variant="Variant.Outlined"
                                  Class="w-100"
                                  Style="background: white; border-radius: 12px;"
                                  Margin="Margin.Normal"
                                  Immediate="true"
                                  OnBlur="CheckIfDirty"
                                  @onclick="LockTool"
                                  MaxLength="1000"
                                  Lines="4"
                                  TextArea="true"
                                  ReadOnly="@ReadOnly"
                                  Adornment="@(ReadOnly ? Adornment.End : Adornment.None)"
                                  AdornmentIcon="@(ReadOnly ? Icons.Material.Filled.Lock : null)" />
                    <span style="position: absolute; right: 10px; bottom: 5px; color: rgba(0, 0, 0, 0.6); font-size: 0.75rem;">
                        @($"{SelectedTool?.Comment?.Length ?? 0}/1000")
                    </span>
                </div>
            </div>
        </div>

        <hr />

        <!-- Network Section -->
        <div>
            <MudText Typo="Typo.h5"
                     Style="color: var(--mud-palette-text-primary) !important; font-weight: 700 !important; font-size: 1.3rem !important; margin: 0 0 20px 0 !important;">
                @Fassade.Language.Network
            </MudText>

            <div class="row">
                <!-- First Row: IP Address, PLC Name, DB No Send -->
                <div class="col-md-4 mb-3">
                    <MudTextField T="string"
                                  Label="@Fassade.Language.IpAddressDevice"
                                  @bind-Value="SelectedTool.ipAddressDevice"
                                  ReadOnly="@ReadOnly"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Normal"
                                  Class="@($"w-100 {(errorMessages.ContainsKey("IP") ? "mud-input-error" : "")}")"
                                  @onclick="LockTool"
                                  OnBlur="CheckIfDirty"
                                  Adornment="@(ReadOnly ? Adornment.End : Adornment.None)"
                                  AdornmentIcon="@(ReadOnly ? Icons.Material.Filled.Lock : null)" />
                    @if (errorMessages.ContainsKey("IP"))
                    {
                        <div class="mud-input-error-text">@errorMessages["IP"]</div>
                    }
                </div>

                <div class="col-md-4 mb-3">
                    <MudTextField T="string"
                                  Label="@Fassade.Language.PlcName"
                                  ReadOnly="@ReadOnly"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Normal"
                                  Class="w-100"
                                  @onclick="LockTool"
                                  Adornment="@(ReadOnly ? Adornment.End : Adornment.None)"
                                  AdornmentIcon="@(ReadOnly ? Icons.Material.Filled.Lock : null)" />
                </div>

                <div class="col-md-4 mb-3">
                    <MudTextField T="string"
                                  Label="@Fassade.Language.DbNoSend"
                                  ReadOnly="@ReadOnly"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Normal"
                                  Class="w-100"
                                  @onclick="LockTool"
                                  Adornment="@(ReadOnly ? Adornment.End : Adornment.None)"
                                  AdornmentIcon="@(ReadOnly ? Icons.Material.Filled.Lock : null)" />
                </div>

                <!-- Second Row: DB No Receive, Address Send DB, Address Receive DB -->
                <div class="col-md-4 mb-3">
                    <MudTextField T="string"
                                  Label="@Fassade.Language.DbNoReceive"
                                  ReadOnly="@ReadOnly"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Normal"
                                  Class="w-100"
                                  @onclick="LockTool"
                                  Adornment="@(ReadOnly ? Adornment.End : Adornment.None)"
                                  AdornmentIcon="@(ReadOnly ? Icons.Material.Filled.Lock : null)" />
                </div>

                <div class="col-md-4 mb-3">
                    <MudTextField T="string"
                                  Label="@Fassade.Language.AddressSendDb"
                                  ReadOnly="@ReadOnly"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Normal"
                                  Class="w-100"
                                  @onclick="LockTool"
                                  Adornment="@(ReadOnly ? Adornment.End : Adornment.None)"
                                  AdornmentIcon="@(ReadOnly ? Icons.Material.Filled.Lock : null)" />
                </div>

                <div class="col-md-4 mb-3">
                    <MudTextField T="string"
                                  Label="@Fassade.Language.AddressReceiveDb"
                                  ReadOnly="@ReadOnly"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Normal"
                                  Class="w-100"
                                  @onclick="LockTool"
                                  Adornment="@(ReadOnly ? Adornment.End : Adornment.None)"
                                  AdornmentIcon="@(ReadOnly ? Icons.Material.Filled.Lock : null)" />
                </div>

                <!-- Third Row: Byte Pre Check -->
                <div class="col-md-4 mb-3">
                    <MudTextField T="string"
                                  Label="@Fassade.Language.BytePreCheck"
                                  ReadOnly="@ReadOnly"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Normal"
                                  Class="w-100"
                                  @onclick="LockTool"
                                  Adornment="@(ReadOnly ? Adornment.End : Adornment.None)"
                                  AdornmentIcon="@(ReadOnly ? Icons.Material.Filled.Lock : null)" />
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .compact-select .mud-input-outlined {
        height: 32px !important;
        min-height: 32px !important;
    }

    .compact-select .mud-input-outlined .mud-input {
        height: 32px !important;
        padding: 4px 8px !important;
        font-size: 0.75rem !important;
    }
</style>

@code {

    [Parameter]
    public Tool? SelectedTool { get; set; }

    [Parameter]
    public IEnumerable<ToolVersion> ToolVersions { get; set; } = Enumerable.Empty<ToolVersion>();

    private int selectedVersionId = -1;

    [Parameter]
    public string? CurrentUser { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    private string? ValidationMessage;

    private Tool? OriginalTool { get; set; }

    private Dictionary<string, string> errorMessages = new();
    private bool showErrors = false;

    private IEnumerable<ToolType> toolTypes = Enumerable.Empty<ToolType>();
    private IEnumerable<ToolClass> toolClasses = Enumerable.Empty<ToolClass>();

    protected override async Task OnInitializedAsync()
    {
        UsernameService.PropertyChanged += (_, __) => InvokeAsync(StateHasChanged);

    }

    protected override async Task OnParametersSetAsync()
    {
       
        if (SelectedTool != null)
        {
            ResetValidationState();
            OriginalTool = SelectedTool.Clone();
            OriginalTool.toolID = SelectedTool.toolID;
            OriginalTool.stationID = SelectedTool.stationID;

            toolClasses = await Fassade.GetAllToolClasses();

            if (SelectedTool.toolClassID.HasValue)
            {
                toolTypes = await Fassade.FindToolTypes(SelectedTool.toolClassID.Value);
            }

			ToolVersions = await Fassade.GetToolVersions(SelectedTool.toolID.Value);
            selectedVersionId = -1;

            StateHasChanged();
        }
    }



    #region CRUD
    public async Task UpdateToolAsync()
    {
        ResetValidationState();

       // if (!await DirtyManagerService.CheckIfDirty(SelectedTool, OriginalTool))
            //return;
		var dbTool = await Fassade.GetTool(SelectedTool.toolID.Value);
		if (dbTool.Equals(SelectedTool))
		{
			return;
		}

        if (await ValidateData() == false)
            return;

        SelectedTool.modifiedBy = UsernameService.Username;       
        if (!await Fassade.UpdateToolWithVersion(SelectedTool, OriginalTool))
            return;



        await SignalRService.SendMessageToServer($"ToolUpdated;{SelectedTool.toolID}");
        await DirtyManagerService.setClean();
    }






    public async Task CreateToolAsync()
    {
        ResetValidationState();

        if (await ValidateData() == false)
            return;

        SelectedTool.modifiedBy = UsernameService.Username;

        if (!await Fassade.AddTool(SelectedTool))
            return;
        var createdTool = await Fassade.GetToolByName(SelectedTool.toolShortname, SelectedTool.stationID.Value);
        if(createdTool != null)
        {
            await SignalRService.SendMessageToServer($"ToolCreated;{createdTool.toolID}");
        }
       
        await DirtyManagerService.setClean();
    }


    private async Task DeleteToolAsync()
    {
        if (SelectedTool == null) return;
        if (!await Fassade.DeleteTool(SelectedTool)) return;

        await SignalRService.SendMessageToServer($"ToolDeleted;{SelectedTool.toolID}");
        await DirtyManagerService.setClean();
    }

    #endregion

    #region Validate
    public async Task<bool> ValidateData()
    {
        // Objekt
        if (SelectedTool == null)
            return false;

        //ToolShortname
        if (string.IsNullOrWhiteSpace(SelectedTool.toolShortname))
        {
            errorMessages["ToolShortname"] = Fassade.Language.MissingToolShortname;

        }

        if (!SelectedTool.stationID.HasValue)
            return false;

        if (await Fassade.ToolExistsInStation(SelectedTool.toolShortname, SelectedTool.toolID.Value, SelectedTool.stationID.Value))
        {
            errorMessages["ToolShortname"] = Fassade.Language.ToolAlreadyExists;
        }



        //IP-Adresse
        if (string.IsNullOrWhiteSpace(SelectedTool.ipAddressDevice))
        {
            errorMessages["IP"] = Fassade.Language.MissingIpAddress;

        }

        var regex = new System.Text.RegularExpressions.Regex(@"^(([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])$");

        if (!string.IsNullOrWhiteSpace(SelectedTool.ipAddressDevice) && !regex.IsMatch(SelectedTool.ipAddressDevice))
        {
            errorMessages["IP"] = Fassade.Language.InvalidIp;
        }

        showErrors = errorMessages.Any();
        return !showErrors;
    }

    private void ResetValidationState()
    {
        errorMessages.Clear();
        showErrors = false;
    }
    #endregion


    #region Dirty
    private async Task<bool> CheckIfDirty()
    {
        if (SelectedTool?.toolID == 0)
            return false;
        return await DirtyManagerService.CheckIfDirty(SelectedTool, OriginalTool, "Tool");
    }

    private bool isResettingTool = false;

    public async Task ResetTool()
    {
        if (isResettingTool) return;

        isResettingTool = true;
        try
        {
            var signalTool = await Fassade.GetTool(SelectedTool.toolID.Value);
            await SignalRService.SendMessageToServer($"ToolUpdated;{signalTool.toolID}");
            await DirtyManagerService.setClean();
        }
        finally
        {
            isResettingTool = false;
        }
    }

    #endregion

    #region Lock
    private System.Threading.CancellationTokenSource? lockCancellationTokenSource;

    public async Task LockTool()
    {
        if (SelectedTool.toolID == 0) return;
        if (SelectedTool.isLocked == true && SelectedTool.lockedBy == UsernameService.Username)
        {
            lockCancellationTokenSource?.Cancel();
            StartUnlockTimer();


        }
        if (SelectedTool.isLocked == false)
        {
            SelectedTool.isLocked = true;
            SelectedTool.lockedBy = CurrentUser;
            SelectedTool.lockTimestamp = DateTime.Now;
            await Fassade.UpdateTool(SelectedTool);

            
            await SignalRService.SendMessageToServer($"ToolLocked;{SelectedTool.toolID}");
            ReadOnly = false;
            StateHasChanged();

            StartUnlockTimer();
        }
    }

    private void StartUnlockTimer()
    {
        // Wenn bereits ein Timer läuft, abbrechen
        lockCancellationTokenSource?.Cancel();
        lockCancellationTokenSource = new System.Threading.CancellationTokenSource();

        _ = Task.Run(async () =>
        {
            try
            {
                // Warte 10 Minuten (600000 ms)
                await Task.Delay(TimeSpan.FromSeconds(600000), lockCancellationTokenSource.Token);

                // Nach 10 Minuten entsperren
                await UnlockToolAsync();
            }
            catch (TaskCanceledException)
            {
                // Timer wurde abgebrochen (z.B. bei erneutem Lock)
            }
        });
    }

    private async Task UnlockToolAsync()
    {
        if (SelectedTool == null) return;

        SelectedTool.isLocked = false;
        SelectedTool.lockedBy = null;
        SelectedTool.lockTimestamp = null;
        await Fassade.UpdateTool(SelectedTool);

       
        await SignalRService.SendMessageToServer($"ToolUnlocked;{SelectedTool.toolID}");

        ReadOnly = true;
        StateHasChanged();
    }

    // Optional: Falls man das Lock manuell aufheben will
    public async Task ManualUnlockToolAsync()
    {
        // Timer stoppen
        lockCancellationTokenSource?.Cancel();
        await UnlockToolAsync();
    }
    #endregion

    #region ToolClass/-Type
    private async Task OnToolClassChanged(int? selectedId)
    {
        if (selectedId.HasValue)
        {
            SelectedTool.toolClassID = selectedId.Value;
            toolTypes = await Fassade.FindToolTypes(selectedId.Value);
            SelectedTool.toolTypeID = toolTypes.FirstOrDefault()?.toolTypeID ?? 0;
            await SignalRService.SendMessageToServer($"ToolClassChanged;{SelectedTool.toolID}");
            StateHasChanged(); // falls nötig
        }
    }

    private Task OnToolTypeChanged(int? id)
    {
        if (id.HasValue)
        {
            SelectedTool.toolTypeID = id.Value;
        }
        return Task.CompletedTask;
    }


    #endregion


    #region Version
    private async Task OnVersionChanged(int? versionId)
    {
        if (versionId == null)
            return;

        selectedVersionId = versionId.Value;

        if (versionId == -1)
        {
            if (SelectedTool?.toolID != null)
            {
                var currentTool = await Fassade.GetTool(SelectedTool.toolID);
                if (currentTool != null)
                {
                    SelectedTool = currentTool;
                }
            }
        }
        else
        {
            var selectedVersion = ToolVersions.FirstOrDefault(v => v.toolVersionID == versionId);
            if (selectedVersion != null)
            {
                SelectedTool.toolShortname = selectedVersion.toolShortname;
                SelectedTool.toolDescription = selectedVersion.toolDescription;
                SelectedTool.toolClassID = selectedVersion.toolClassID;
                SelectedTool.toolTypeID = selectedVersion.toolTypeID;
                SelectedTool.ipAddressDevice = selectedVersion.ipAddressDevice;
                SelectedTool.plcName = selectedVersion.plcName;
                SelectedTool.dbNoSend = selectedVersion.dbNoSend;
                SelectedTool.dbNoReceive = selectedVersion.dbNoReceive;
                SelectedTool.addressSendDB = selectedVersion.addressSendDB;
                SelectedTool.addressReceiveDB = selectedVersion.addressReceiveDB;
                SelectedTool.preCheckByte = selectedVersion.preCheckByte;
                SelectedTool.lastModified = selectedVersion.lastModified;
                SelectedTool.modifiedBy = selectedVersion.modifiedBy;
                SelectedTool.Comment = selectedVersion.Comment;
                SelectedTool.Status = selectedVersion.Status;
            }
        }

        StateHasChanged();
    }

    #endregion



    public void Dispose()
    {
        
        lockCancellationTokenSource?.Cancel();
        lockCancellationTokenSource?.Dispose();
    }

}
