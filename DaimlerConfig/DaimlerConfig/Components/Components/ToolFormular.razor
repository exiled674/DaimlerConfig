@using DaimlerConfig.Components.Models
@inject DaimlerConfig.Components.Fassade.Fassade Fassade

@using DaimlerConfig.Services
@inject SignalRService SignalRService
@inject DirtyManagerService DirtyManagerService
@implements IDisposable
@inject UsernameService UsernameService
@inject ISnackbar Snackbar

<div class="container-lg" style="padding-left: 0px; height: 100vh; display: flex; flex-direction: column;">
    <!-- Fixed Header -->
    <div style="background: white; position: sticky; top: 0; z-index: 100; flex-shrink: 0;">
        <div class="d-flex justify-content-between align-items-center" style="padding: 25px 24px 20px 24px; margin-bottom: 0 !important;">
            <div class="d-flex align-items-center gap-3">
                <MudText Typo="Typo.h5"
                         Class="mud-typography-h5"
                         Style="color: var(--mud-palette-text-primary) !important; font-weight: 700 !important; font-size: 1.3rem !important; margin: 0 !important; padding-bottom:12px;">
                    @Language.Tool
                </MudText>

                <!-- Status Badges -->
                <div class="d-flex align-items-center gap-2">
                    @if (ReadOnly && !string.IsNullOrWhiteSpace(SelectedTool?.lockedBy))
                    {
                            <div class="status-badge locked-badge">
                                <MudIcon Icon="@Icons.Material.Filled.Lock" Style="margin-right: 4px; font-size: 0.75rem;" />
                                <span>@Language.Locked</span>
                            </div>
                    }

                    @if (!string.IsNullOrWhiteSpace(SelectedTool?.lockedBy))
                    {
                            <div class="status-badge user-badge">
                                <MudIcon Icon="@Icons.Material.Filled.Person" Style="margin-right: 4px; font-size: 0.75rem;" />
                                <span>@SelectedTool.lockedBy.Split(';')[0]</span>
                            </div>
                    }
                </div>
            </div>

            <div class="d-flex align-items-center gap-2">
                <!-- Dropdown mit eigenständiger Positionierung -->
                <div style="align-self: flex-start; margin-top: -8px;">
                    <MudSelect T="int?" Label="Version"
                               Variant="Variant.Outlined"
                               Disabled="@ReadOnly"
                               Class="compact-select"
                               Style="background: white; border-radius: 6px; min-width: 180px;"
                               Value="selectedVersionId"
                               ValueChanged="OnVersionChanged"
                               OnBlur="LockTool">
                        <MudSelectItem T="int?" Value="-1">@Language.CurrentVersion</MudSelectItem>
                        @foreach (var version in ToolVersions.OrderByDescending(v => v.toolVersionID))
                        {
                                <MudSelectItem T="int?" Value="@version.toolVersionID">
                                @version.modifiedBy?.Split(';')[0] - @version.lastModified
                                </MudSelectItem>
                        }
                    </MudSelect>
                </div>

                @if (SelectedTool?.toolID == 0)
                {
                        <MudButton StartIcon="@Icons.Material.Filled.AddCircle"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   Size="Size.Small"
                                   Class="add-station-btn-consistent"
                                   Style="min-width: 90px; height: 32px; font-size: 0.75rem; margin-bottom:12px;"
                                   @onclick="CreateToolAsync">
                        @Language.Create
                        </MudButton>
                }

                @if (SelectedTool?.toolID != 0)
                {
                        <MudButton StartIcon="@Icons.Material.Filled.Save"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   Size="Size.Small"
                                   Class="add-station-btn-consistent"
                                   Style="min-width: 90px; height: 32px; font-size: 0.75rem; margin-bottom:12px;"
                                   @onclick="UpdateToolAsync"
                                   disabled="@ReadOnly">
                        @Language.Save
                        </MudButton>
                }

                @if (!string.IsNullOrEmpty(ValidationMessage))
                {
                        <div class="alert alert-danger mb-0 ms-2">@ValidationMessage</div>
                }
            </div>
        </div>

        <!-- Separate Linie mit Padding -->
        <div style="padding: 0px 24px 0px 0px;">
            <div style="border-bottom: 1px solid rgba(0,0,0,0.08);"></div>
        </div>
    </div>

    <!-- Scrollable Content Area -->
    <div style="flex: 1; overflow-y: auto; padding: 28px 24px 24px 24px;">
        <!-- Info Banner - nur wenn gesperrt -->
        @if (ReadOnly && !string.IsNullOrWhiteSpace(SelectedTool?.lockedBy))
        {
                <div class="info-banner mb-4">
                    <div class="d-flex align-items-center">
                        <MudIcon Icon="@Icons.Material.Filled.Info" Style="color: #1e40af; margin-right: 8px; font-size: 1rem;" />
                        <span style="color: #1e40af; font-size: 0.875rem; font-weight: 500;">
                            @Language.EditedByPart1<strong>@SelectedTool.lockedBy.Split(';')[0]</strong> @Language.EditedByPart2
                        </span>
                    </div>
                </div>
        }

        <!-- General Information Card -->
        <MudExpansionPanels Elevation="0" Class="mb-4">
            <MudExpansionPanel Expanded="true"
                               Style="border: 1px solid rgba(0,0,0,0.08); border-radius: 12px; background: white; box-shadow: 0 2px 8px rgba(0,0,0,0.04);">
                <TitleContent>
                    <div style="display: flex; align-items: center; padding: 4px 0;">
                        <MudIcon Icon="@Icons.Material.Filled.Info" Style="margin-right: 12px; color: var(--mud-palette-primary);" />
                        <h6 style="margin: 0; font-weight: 600; color: var(--mud-palette-text-primary);">General</h6>
                    </div>
                </TitleContent>
                <ChildContent>
                    <div style="padding: 0 24px 24px 24px;">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <div class="input-container">
                                    <MudTextField T="int?"
                                                  Label="@Language.ToolId"
                                                  Value="SelectedTool.toolID"
                                                  ReadOnly="true"
                                                  Variant="Variant.Outlined"
                                                  Margin="Margin.Normal"
                                                  Class="w-100 locked-field"
                                                  Style="background: white; border-radius: 12px;" />
                                    @if (true)
                                    {
                                            <MudIcon Icon="@Icons.Material.Filled.Lock" Class="lock-icon" />
                                    }
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="input-container">
                                    <MudTextField T="string"
                                                  Label="@Language.ToolShortname"
                                                  @bind-Value="SelectedTool.toolShortname"
                                                  MaxLength="16"
                                                  ReadOnly="@ReadOnly"
                                                  Variant="Variant.Outlined"
                                                  Margin="Margin.Normal"
                                                  Class="@($"w-100 {(ReadOnly ? "locked-field" : "")}")"
                                                  @onclick="LockTool"
                                                  OnBlur="CheckIfDirty"
                                                  Error="@errorMessages.ContainsKey("ToolShortname")"
                                                  ErrorText="@((errorMessages.ContainsKey("ToolShortname")) ? errorMessages["ToolShortname"] : null)" />
                                    @if (ReadOnly)
                                    {
                                            <MudIcon Icon="@Icons.Material.Filled.Lock" Class="lock-icon" />
                                    }
                                    <span class="character-count">
                                        @($"{SelectedTool?.toolShortname?.Length ?? 0}/16")
                                    </span>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="input-container">
                                    <MudSelect T="int?" Label="Tool Class"
                                               Variant="Variant.Outlined"
                                               Margin="Margin.Normal"
                                               Disabled="@ReadOnly"
                                               Class="@($"w-100 {(ReadOnly ? "locked-field" : "")}")"
                                               Style="background: white; border-radius: 12px;"
                                               Value="SelectedTool.toolClassID"
                                               ValueChanged="OnToolClassChanged"
                                               OnBlur="LockTool">
                                        @foreach (var toolClass in toolClasses.OrderBy(t => t.toolClassName))
                                        {
                                                <MudSelectItem T="int?" Value="@toolClass.toolClassID">@toolClass.toolClassName</MudSelectItem>
                                        }
                                    </MudSelect>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="input-container">
                                    <MudSelect T="int?" Label="Tool Type"
                                               Variant="Variant.Outlined"
                                               Margin="Margin.Normal"
                                               Disabled="@ReadOnly"
                                               Class="@($"w-100 {(ReadOnly ? "locked-field" : "")}")"
                                               Style="background: white; border-radius: 12px;"
                                               Value="SelectedTool.toolTypeID"
                                               ValueChanged="OnToolTypeChanged"
                                               OnBlur="LockTool">
                                        @foreach (var toolType in toolTypes.OrderBy(t => t.toolTypeName))
                                        {
                                                <MudSelectItem T="int?" Value="@toolType.toolTypeID">@toolType.toolTypeName</MudSelectItem>
                                        }
                                    </MudSelect>
                                </div>
                            </div>
                        </div>
                    </div>
                </ChildContent>
            </MudExpansionPanel>
        </MudExpansionPanels>

        <!-- Description Card -->
        <MudExpansionPanels Elevation="0" Class="mb-4">
            <MudExpansionPanel Expanded="true"
                               Style="border: 1px solid rgba(0,0,0,0.08); border-radius: 12px; background: white; box-shadow: 0 2px 8px rgba(0,0,0,0.04);">
                <TitleContent>
                    <div style="display: flex; align-items: center; padding: 4px 0;">
                        <MudIcon Icon="@Icons.Material.Filled.Description" Style="margin-right: 12px; color: var(--mud-palette-primary);" />
                        <h6 style="margin: 0; font-weight: 600; color: var(--mud-palette-text-primary);">Description & Comments</h6>
                    </div>
                </TitleContent>
                <ChildContent>
                    <div style="padding: 0 24px 24px 24px;">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <div class="input-container textarea-container">
                                    <MudTextField T="string"
                                                  Label="@Language.ToolDescription"
                                                  @bind-Value="SelectedTool.toolDescription"
                                                  ReadOnly="@ReadOnly"
                                                  Variant="Variant.Outlined"
                                                  Margin="Margin.Normal"
                                                  Lines="4"
                                                  MaxLength="1000"
                                                  Class="@($"w-100 {(ReadOnly ? "locked-field" : "")}")"
                                                  Style="background: white; border-radius: 12px;"
                                                  @onclick="LockTool"
                                                  OnBlur="CheckIfDirty"
                                                  TextArea="true" />
                                    @if (ReadOnly)
                                    {
                                            <MudIcon Icon="@Icons.Material.Filled.Lock" Class="lock-icon textarea-lock" />
                                    }
                                    <span class="character-count textarea-count">
                                        @($"{SelectedTool?.toolDescription?.Length ?? 0}/1000")
                                    </span>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="input-container textarea-container">
                                    <MudTextField T="string"
                                                  @bind-Value="SelectedTool.Comment"
                                                  Label="@Language.Comment"
                                                  Variant="Variant.Outlined"
                                                  Class="@($"w-100 {(ReadOnly ? "locked-field" : "")}")"
                                                  Style="background: white; border-radius: 12px;"
                                                  Margin="Margin.Normal"
                                                  Immediate="true"
                                                  OnBlur="CheckIfDirty"
                                                  @onclick="LockTool"
                                                  MaxLength="1000"
                                                  Lines="4"
                                                  TextArea="true"
                                                  ReadOnly="@ReadOnly" />
                                    @if (ReadOnly)
                                    {
                                            <MudIcon Icon="@Icons.Material.Filled.Lock" Class="lock-icon textarea-lock" />
                                    }
                                    <span class="character-count textarea-count">
                                        @($"{SelectedTool?.Comment?.Length ?? 0}/1000")
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </ChildContent>
            </MudExpansionPanel>
        </MudExpansionPanels>

        <!-- Network Card -->
        <MudExpansionPanels Elevation="0">
            <MudExpansionPanel Expanded="false"
                               Style="border: 1px solid rgba(0,0,0,0.08); border-radius: 12px; background: white; box-shadow: 0 2px 8px rgba(0,0,0,0.04);">
                <TitleContent>
                    <div style="display: flex; align-items: center; padding: 4px 0;">
                        <MudIcon Icon="@Icons.Material.Filled.NetworkCheck" Style="margin-right: 12px; color: var(--mud-palette-primary);" />
                        <h6 style="margin: 0; font-weight: 600; color: var(--mud-palette-text-primary);">Network Configuration</h6>
                    </div>
                </TitleContent>
                <ChildContent>
                    <div style="padding: 0 24px 24px 24px;">
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <div class="input-container">
                                    <MudTextField T="string"
                                                  Label="@Language.IpAddressDevice"
                                                  @bind-Value="SelectedTool.ipAddressDevice"
                                                  ReadOnly="@ReadOnly"
                                                  Variant="Variant.Outlined"
                                                  Margin="Margin.Normal"
                                                  Class="@($"w-100 {(ReadOnly ? "locked-field" : "")} {(errorMessages.ContainsKey("IP") ? "mud-input-error" : "")}")"
                                                  @onclick="LockTool"
                                                  OnBlur="CheckIfDirty" />
                                    @if (ReadOnly)
                                    {
                                            <MudIcon Icon="@Icons.Material.Filled.Lock" Class="lock-icon" />
                                    }
                                </div>
                                @if (errorMessages.ContainsKey("IP"))
                                {
                                        <div class="mud-input-error-text">@errorMessages["IP"]</div>
                                }
                            </div>
                            <div class="col-md-4 mb-3">
                                <div class="input-container">
                                    <MudTextField T="string"
                                                  Label="@Language.PlcName"
                                                  ReadOnly="@ReadOnly"
                                                  Variant="Variant.Outlined"
                                                  Margin="Margin.Normal"
                                                  Class="@($"w-100 {(ReadOnly ? "locked-field" : "")}")"
                                                  @onclick="LockTool" />
                                    @if (ReadOnly)
                                    {
                                            <MudIcon Icon="@Icons.Material.Filled.Lock" Class="lock-icon" />
                                    }
                                </div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <div class="input-container">
                                    <MudTextField T="string"
                                                  Label="@Language.DbNoSend"
                                                  ReadOnly="@ReadOnly"
                                                  Variant="Variant.Outlined"
                                                  Margin="Margin.Normal"
                                                  Class="@($"w-100 {(ReadOnly ? "locked-field" : "")}")"
                                                  @onclick="LockTool" />
                                    @if (ReadOnly)
                                    {
                                            <MudIcon Icon="@Icons.Material.Filled.Lock" Class="lock-icon" />
                                    }
                                </div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <div class="input-container">
                                    <MudTextField T="string"
                                                  Label="@Language.DbNoReceive"
                                                  ReadOnly="@ReadOnly"
                                                  Variant="Variant.Outlined"
                                                  Margin="Margin.Normal"
                                                  Class="@($"w-100 {(ReadOnly ? "locked-field" : "")}")"
                                                  @onclick="LockTool" />
                                    @if (ReadOnly)
                                    {
                                            <MudIcon Icon="@Icons.Material.Filled.Lock" Class="lock-icon" />
                                    }
                                </div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <div class="input-container">
                                    <MudTextField T="string"
                                                  Label="@Language.AddressSendDb"
                                                  ReadOnly="@ReadOnly"
                                                  Variant="Variant.Outlined"
                                                  Margin="Margin.Normal"
                                                  Class="@($"w-100 {(ReadOnly ? "locked-field" : "")}")"
                                                  @onclick="LockTool" />
                                    @if (ReadOnly)
                                    {
                                            <MudIcon Icon="@Icons.Material.Filled.Lock" Class="lock-icon" />
                                    }
                                </div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <div class="input-container">
                                    <MudTextField T="string"
                                                  Label="@Language.AddressReceiveDb"
                                                  ReadOnly="@ReadOnly"
                                                  Variant="Variant.Outlined"
                                                  Margin="Margin.Normal"
                                                  Class="@($"w-100 {(ReadOnly ? "locked-field" : "")}")"
                                                  @onclick="LockTool" />
                                    @if (ReadOnly)
                                    {
                                            <MudIcon Icon="@Icons.Material.Filled.Lock" Class="lock-icon" />
                                    }
                                </div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <div class="input-container">
                                    <MudTextField T="string"
                                                  Label="@Language.BytePreCheck"
                                                  ReadOnly="@ReadOnly"
                                                  Variant="Variant.Outlined"
                                                  Margin="Margin.Normal"
                                                  Class="@($"w-100 {(ReadOnly ? "locked-field" : "")}")"
                                                  @onclick="LockTool" />
                                    @if (ReadOnly)
                                    {
                                            <MudIcon Icon="@Icons.Material.Filled.Lock" Class="lock-icon" />
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </ChildContent>
            </MudExpansionPanel>
        </MudExpansionPanels>
    </div>
</div>

<style>
    .compact-select .mud-input-outlined {
        height: 32px !important;
        min-height: 32px !important;
    }

        .compact-select .mud-input-outlined .mud-input {
            height: 32px !important;
            padding: 4px 8px !important;
            font-size: 0.75rem !important;
        }

    /* Scrollbar verstecken */
    .container-lg > div:last-child {
        /* Für Webkit Browser (Chrome, Safari, Edge) */
        scrollbar-width: none; /* Firefox */
        -ms-overflow-style: none; /* Internet Explorer 10+ */
    }

    .container-lg > div:last-child::-webkit-scrollbar {
        display: none; /* Webkit Browser */
    }

    /* Status Badge Styling */
    .status-badge {
        display: inline-flex;
        align-items: center;
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 500;
        margin-bottom: 12px;
    }

    .locked-badge {
        background-color: #dbeafe;
        color: #1e40af;
        border: 1px solid #3b82f6;
    }

    .user-badge {
        background-color: #f3f4f6;
        color: #374151;
        border: 1px solid #d1d5db;
    }

    /* Info Banner Styling */
    .info-banner {
        background-color: #dbeafe;
        border: 1px solid #3b82f6;
        border-radius: 12px;
        padding: 12px 16px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.04);
    }

    /* Input Container für relative Positionierung */
    .input-container {
        position: relative;
    }

    /* Locked Field Styling */
    .locked-field .mud-input-outlined {
        background-color: #f8fafc !important;
        border-color: #e2e8f0 !important;
    }

    .locked-field .mud-input-outlined:hover {
        border-color: #cbd5e1 !important;
    }

    /* Lock Icon Styling - oben rechts */
    .lock-icon {
        position: absolute;
        top: 8px;
        right: 8px;
        color: #3b82f6 !important;
        font-size: 1rem !important;
        z-index: 10;
        pointer-events: none;
    }

    /* Lock Icon für Textareas - oben rechts */
    .textarea-lock {
        top: 12px;
        right: 12px;
    }

    /* Character Count Styling - unten rechts */
    .character-count {
        position: absolute;
        bottom: 8px;
        right: 8px;
        color: rgba(0, 0, 0, 0.6);
        font-size: 0.75rem;
        font-weight: 500;
        background: rgba(255, 255, 255, 0.9);
        padding: 2px 4px;
        border-radius: 4px;
        z-index: 10;
        pointer-events: none;
    }

    /* Character Count für Textareas */
    .textarea-count {
        bottom: 12px;
        right: 12px;
    }

    /* Expansion Panel Styling */
    .mud-expand-panel {
        margin-bottom: 0 !important;
    }

    .mud-expand-panel-header {
        padding: 16px 24px !important;
        min-height: auto !important;
    }

    .mud-expand-panel-content {
        padding: 0 !important;
    }



     /* Toast Position - Bottom Right */
    .mud-snackbar-provider {
        position: fixed !important;
        bottom: 20px !important;
        right: 20px !important;
        top: unset !important;
        left: unset !important;
        transform: none !important;
        z-index: 9999 !important;
    }

    /* Override all possible MudBlazor snackbar positioning classes */
    .mud-snackbar-provider[class*="mud-snackbar-location"] {
        top: unset !important;
        bottom: 20px !important;
        right: 20px !important;
        left: unset !important;
        transform: none !important;
    }

    /* Specific overrides for common MudBlazor position classes */
    .mud-snackbar-location-topright,
    .mud-snackbar-location-top-right,
    .mud-snackbar-location-topcenter,
    .mud-snackbar-location-top-center,
    .mud-snackbar-location-topleft,
    .mud-snackbar-location-top-left {
        top: unset !important;
        bottom: 20px !important;
        right: 20px !important;
        left: unset !important;
    }

    /* Ensure individual snackbar items are properly positioned */
    .mud-snackbar {
        margin-bottom: 8px !important;
    }

    /* Success Toast in your design blue */
    .mud-alert-filled-success {
        background-color: #1e40af !important;
        color: white !important;
    }

    /* Error Toast styling */
    .mud-alert-filled-error {
        background-color: #dc2626 !important;
        color: white !important;
    }

    /* Warning Toast styling */
    .mud-alert-filled-warning {
        background-color: #f59e0b !important;
        color: white !important;
    }



</style>
@code {

    [Parameter]
    public Tool? SelectedTool { get; set; }

    [Parameter]
    public IEnumerable<ToolVersion> ToolVersions { get; set; } = Enumerable.Empty<ToolVersion>();

    private int selectedVersionId = -1;

    [Parameter]
    public string? CurrentUser { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    private string? ValidationMessage;

    private Tool? OriginalTool { get; set; }

    private Dictionary<string, string> errorMessages = new();
    private bool showErrors = false;

    private IEnumerable<ToolType> toolTypes = Enumerable.Empty<ToolType>();
    private IEnumerable<ToolClass> toolClasses = Enumerable.Empty<ToolClass>();

    protected override async Task OnInitializedAsync()
    {
        UsernameService.PropertyChanged += (_, __) => InvokeAsync(StateHasChanged);

    }

    protected override async Task OnParametersSetAsync()
    {
       
        if (SelectedTool != null)
        {
            ResetValidationState();
            OriginalTool = SelectedTool.Clone();
            OriginalTool.toolID = SelectedTool.toolID;
            OriginalTool.stationID = SelectedTool.stationID;

            toolClasses = await Fassade.GetAllToolClasses();

            if (SelectedTool.toolClassID.HasValue)
            {
                toolTypes = await Fassade.FindToolTypes(SelectedTool.toolClassID.Value);
            }

			ToolVersions = await Fassade.GetToolVersions(SelectedTool.toolID.Value);
            selectedVersionId = -1;

            StateHasChanged();
        }
    }



    #region CRUD
    public async Task UpdateToolAsync()
    {
        ResetValidationState();

       // if (!await DirtyManagerService.CheckIfDirty(SelectedTool, OriginalTool))
            //return;
		var dbTool = await Fassade.GetTool(SelectedTool.toolID.Value);
		if (dbTool.Equals(SelectedTool))
		{
			return;
		}

        if (await ValidateData() == false)
            return;

        SelectedTool.modifiedBy = UsernameService.Username;       
        if (!await Fassade.UpdateToolWithVersion(SelectedTool, OriginalTool))
            return;



        await SignalRService.SendMessageToServer($"ToolUpdated;{SelectedTool.toolID}");
        await DirtyManagerService.setClean();
        // Erfolgs-Toast
        Snackbar.Add($"Tool '{SelectedTool.toolShortname}' erfolgreich aktualisiert!", Severity.Success);
    }






    public async Task CreateToolAsync()
    {
        ResetValidationState();

        if (await ValidateData() == false)
            return;

        SelectedTool.modifiedBy = UsernameService.Username;

        if (!await Fassade.AddTool(SelectedTool))
            return;
        var createdTool = await Fassade.GetToolByName(SelectedTool.toolShortname, SelectedTool.stationID.Value);
        if(createdTool != null)
        {
            await SignalRService.SendMessageToServer($"ToolCreated;{createdTool.toolID}");
        }
       
        await DirtyManagerService.setClean();

        // Erfolgs-Toast
        Snackbar.Add($"Tool '{SelectedTool.toolShortname}' erfolgreich erstellt!", Severity.Success);
    }


    private async Task DeleteToolAsync()
    {
        if (SelectedTool == null) return;
        if (!await Fassade.DeleteTool(SelectedTool)) return;

        await SignalRService.SendMessageToServer($"ToolDeleted;{SelectedTool.toolID}");
        await DirtyManagerService.setClean();
    }

    #endregion

    #region Validate
    public async Task<bool> ValidateData()
    {
        // Objekt
        if (SelectedTool == null)
            return false;

        //ToolShortname
        if (string.IsNullOrWhiteSpace(SelectedTool.toolShortname))
        {
            errorMessages["ToolShortname"] = Language.MissingToolShortname;

        }

        if (!SelectedTool.stationID.HasValue)
            return false;

        if (await Fassade.ToolExistsInStation(SelectedTool.toolShortname, SelectedTool.toolID.Value, SelectedTool.stationID.Value))
        {
            errorMessages["ToolShortname"] = Language.ToolAlreadyExists;
        }



        //IP-Adresse
        if (string.IsNullOrWhiteSpace(SelectedTool.ipAddressDevice))
        {
            errorMessages["IP"] = Language.MissingIpAddress;

        }

        var regex = new System.Text.RegularExpressions.Regex(@"^(([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])$");

        if (!string.IsNullOrWhiteSpace(SelectedTool.ipAddressDevice) && !regex.IsMatch(SelectedTool.ipAddressDevice))
        {
            errorMessages["IP"] = Language.InvalidIp;
        }

        showErrors = errorMessages.Any();
        return !showErrors;
    }

    private void ResetValidationState()
    {
        errorMessages.Clear();
        showErrors = false;
    }
    #endregion


    #region Dirty
    private async Task<bool> CheckIfDirty()
    {
        if (SelectedTool?.toolID == 0)
            return false;
        return await DirtyManagerService.CheckIfDirty(SelectedTool, OriginalTool, "Tool");
    }

    private bool isResettingTool = false;

    public async Task ResetTool()
    {
        if (isResettingTool) return;

        isResettingTool = true;
        try
        {
            var signalTool = await Fassade.GetTool(SelectedTool.toolID.Value);
            await SignalRService.SendMessageToServer($"ToolUpdated;{signalTool.toolID}");
            await DirtyManagerService.setClean();
        }
        finally
        {
            isResettingTool = false;
        }
    }

    #endregion

    #region Lock
    private System.Threading.CancellationTokenSource? lockCancellationTokenSource;

    public async Task LockTool()
    {
        if (SelectedTool.toolID == 0) return;
        if (SelectedTool.isLocked == true && SelectedTool.lockedBy == UsernameService.Username)
        {
            lockCancellationTokenSource?.Cancel();
            StartUnlockTimer();


        }
        if (SelectedTool.isLocked == false)
        {
            SelectedTool.isLocked = true;
            SelectedTool.lockedBy = CurrentUser;
            SelectedTool.lockTimestamp = DateTime.Now;
            await Fassade.UpdateTool(SelectedTool);

            
            await SignalRService.SendMessageToServer($"ToolLocked;{SelectedTool.toolID}");
            ReadOnly = false;
            StateHasChanged();

            StartUnlockTimer();
        }
    }

    private void StartUnlockTimer()
    {
        // Wenn bereits ein Timer läuft, abbrechen
        lockCancellationTokenSource?.Cancel();
        lockCancellationTokenSource = new System.Threading.CancellationTokenSource();

        _ = Task.Run(async () =>
        {
            try
            {
                // Warte 10 Minuten (600000 ms)
                await Task.Delay(TimeSpan.FromSeconds(600000), lockCancellationTokenSource.Token);

                // Nach 10 Minuten entsperren
                await UnlockToolAsync();
            }
            catch (TaskCanceledException)
            {
                // Timer wurde abgebrochen (z.B. bei erneutem Lock)
            }
        });
    }

    private async Task UnlockToolAsync()
    {
        if (SelectedTool == null) return;

        SelectedTool.isLocked = false;
        SelectedTool.lockedBy = null;
        SelectedTool.lockTimestamp = null;
        await Fassade.UpdateTool(SelectedTool);

       
        await SignalRService.SendMessageToServer($"ToolUnlocked;{SelectedTool.toolID}");

        ReadOnly = true;
        StateHasChanged();
    }

    // Optional: Falls man das Lock manuell aufheben will
    public async Task ManualUnlockToolAsync()
    {
        // Timer stoppen
        lockCancellationTokenSource?.Cancel();
        await UnlockToolAsync();
    }
    #endregion

    #region ToolClass/-Type
    private async Task OnToolClassChanged(int? selectedId)
    {
        if (selectedId.HasValue)
        {
            SelectedTool.toolClassID = selectedId.Value;
            toolTypes = await Fassade.FindToolTypes(selectedId.Value);
            SelectedTool.toolTypeID = toolTypes.FirstOrDefault()?.toolTypeID ?? 0;
            await SignalRService.SendMessageToServer($"ToolClassChanged;{SelectedTool.toolID}");
            StateHasChanged(); // falls nötig
        }
    }

    private Task OnToolTypeChanged(int? id)
    {
        if (id.HasValue)
        {
            SelectedTool.toolTypeID = id.Value;
        }
        return Task.CompletedTask;
    }


    #endregion


    #region Version
    private async Task OnVersionChanged(int? versionId)
    {
        if (versionId == null)
            return;

        selectedVersionId = versionId.Value;

        if (versionId == -1)
        {
            if (SelectedTool?.toolID != null)
            {
                var currentTool = await Fassade.GetTool(SelectedTool.toolID);
                if (currentTool != null)
                {
                    SelectedTool = currentTool;
                }
            }
        }
        else
        {
            var selectedVersion = ToolVersions.FirstOrDefault(v => v.toolVersionID == versionId);
            if (selectedVersion != null)
            {
                SelectedTool.toolShortname = selectedVersion.toolShortname;
                SelectedTool.toolDescription = selectedVersion.toolDescription;
                SelectedTool.toolClassID = selectedVersion.toolClassID;
                SelectedTool.toolTypeID = selectedVersion.toolTypeID;
                SelectedTool.ipAddressDevice = selectedVersion.ipAddressDevice;
                SelectedTool.plcName = selectedVersion.plcName;
                SelectedTool.dbNoSend = selectedVersion.dbNoSend;
                SelectedTool.dbNoReceive = selectedVersion.dbNoReceive;
                SelectedTool.addressSendDB = selectedVersion.addressSendDB;
                SelectedTool.addressReceiveDB = selectedVersion.addressReceiveDB;
                SelectedTool.preCheckByte = selectedVersion.preCheckByte;
                SelectedTool.lastModified = selectedVersion.lastModified;
                SelectedTool.modifiedBy = selectedVersion.modifiedBy;
                SelectedTool.Comment = selectedVersion.Comment;
                SelectedTool.Status = selectedVersion.Status;
            }
        }

        StateHasChanged();
    }

    #endregion



    public void Dispose()
    {
        
        lockCancellationTokenSource?.Cancel();
        lockCancellationTokenSource?.Dispose();
    }

}
