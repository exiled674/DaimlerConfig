@using System.Diagnostics
@using DaimlerConfig.Components.Models
@inject DaimlerConfig.Components.Fassade.Fassade Fassade

@using DaimlerConfig.Services
@inject SignalRService SignalRService

<div>
    <h2>Tool</h2>
    <div class="layout">
        <div class="toolColoumn">
            <label>Tool ID:</label>
            <input class="input-field" type="text" @bind="SelectedTool.toolID" readonly  />

            <label>Tool Shortname:</label>
            <input class="input-field" type="text" @bind="SelectedTool.toolShortname" />

            <label>Tool Description:</label>
            <input class="input-field" type="text" @bind="SelectedTool.toolDescription"  />
        </div>

        <div class="toolColoumn">
            <label>Tool Class</label>
            <select class="input-field" @onchange="UpdateToolTypes">
                <option value="">Default</option>
                @foreach (var option in toolClasses)
                {
                    <option value="@option.toolClassID">@option.toolClassName</option>
                }
            </select>

            <label>Tool Type</label>
            <select class="input-field" @bind="SelectedTool.toolTypeID">
                <option value="">Default</option>
                @foreach (var option in toolTypes)
                {
                    <option value="@option.toolTypeID">@option.toolTypeName</option>
                }
            </select>
        </div>
    </div>
    <hr />
    <div>
        <h3>Network</h3>
        <div class="layout">
            <div class="toolColoumn">
                <label>IP-Address Device:</label>
                <input class="input-field" type="text" @bind="SelectedTool.ipAddressDevice"  placeholder="0.0.0.0" />



                <label>PLC Name:</label>
                <input class="input-field" type="text" />

                <label>DBNo Send:</label>
                <input class="input-field" type="text" />

                <label>DBNo Receive:</label>
                <input class="input-field" type="text" />
            </div>

            <div class="toolColoumn">
                <label>Address in Send-DB:</label>
                <input class="input-field" type="text" />

                <label>Address in Receive-DB:</label>
                <input class="input-field" type="text" />

                <label>Byte Pre Check:</label>
                <input class="input-field" type="text" />

                @if (SelectedTool?.toolID == 0)
                {
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <button class="btn btn-primary btn-sm" @onclick="CreateToolAsync">Create</button>
                    </div>
                    @if (!string.IsNullOrEmpty(ValidationMessage))
                    {
                        <div class="text-danger">@ValidationMessage</div>
                    }
                }

                @if (SelectedTool?.toolID != 0)
                {
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <button class="btn btn-primary btn-sm" @onclick="UpdateToolAsync">Update</button>
                    </div>
                    @if (!string.IsNullOrEmpty(ValidationMessage))
                    {
                        <div class="text-danger">@ValidationMessage</div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public Tool? SelectedTool { get; set; }

    [Parameter]
    public EventCallback OnUpdated { get; set; }

    private string? ValidationMessage;

    private List<ToolClass> toolClasses = new List<ToolClass>();

    private List<ToolType> toolTypes = new List<ToolType>();

    protected override async Task OnInitializedAsync()
    {
        toolClasses = (await Fassade.ToolClassRepository.GetAll()).ToList();
    }

    #region CRUD
    private async Task UpdateToolAsync()
    {
        if (await ValidateData() == false)
            return;

        await Fassade.UpdateTool(SelectedTool);
        await OnUpdated.InvokeAsync();
        await SignalRService.SendMessageToServer("ToolChanged");
    }

    private async Task CreateToolAsync()
    {
        if (await ValidateData() == false)
            return;


        await Fassade.AddTool(SelectedTool);
        await OnUpdated.InvokeAsync();
        await SignalRService.SendMessageToServer("ToolChanged");
    }
    #endregion

    #region Validate
    private async Task<bool> ValidateData()
    {
        // Objekt
        if (SelectedTool == null)
            return false;

        //ToolShortname
        if (string.IsNullOrWhiteSpace(SelectedTool.toolShortname))
            return false;

        if (SelectedTool.toolShortname.Length > 16)
            return false;

        if (!SelectedTool.stationID.HasValue)
            return false;

        if (await Fassade.ToolExistsInStation(SelectedTool.toolShortname, SelectedTool.stationID.Value))
            return false;

        //ToolDescription
        if (SelectedTool.toolDescription != null)
        {
            if (SelectedTool.toolDescription.Length > 100)
                return false;
        }




        //IP-Adresse
        if (string.IsNullOrWhiteSpace(SelectedTool.ipAddressDevice))
            return false;

        var regex = new System.Text.RegularExpressions.Regex(@"^(([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])$");

        if (!regex.IsMatch(SelectedTool.ipAddressDevice))
            return false;

        return true;
    }
    #endregion

    #region Classes
    private async Task UpdateToolTypes(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int id))
        {
            SelectedTool.toolClassID = id;
        }
        toolTypes = (await Fassade.ToolTypeRepository.Find(t => t.toolClassID == SelectedTool.toolClassID)).ToList();
    }
    #endregion

}