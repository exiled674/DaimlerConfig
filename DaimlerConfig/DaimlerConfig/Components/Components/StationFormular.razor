@using DaimlerConfig.Components.Models
@inject DaimlerConfig.Components.Fassade.Fassade Fassade

@using DaimlerConfig.Services
@inject SignalRService SignalRService
@inject DirtyManagerService DirtyManagerService
@inject UsernameService UsernameService
@using System.Linq

<div class="container-lg" style="padding-left: 0px;">
    <!-- Header mit konsistenter Styling wie die anderen Spalten -->
    <div style="background: white;">
        <div class="d-flex justify-content-between align-items-center" style="padding: 25px 20px 32px 20px; margin-bottom: 0 !important;">

            <MudText Typo="Typo.h5" 
                     Class="mud-typography-h5" 
                     Style="color: var(--mud-palette-text-primary) !important; font-weight: 700 !important; font-size: 1.3rem !important; margin: 0 !important;">
                @Fassade.Language.Station
            </MudText>

            <div class="d-flex align-items-center gap-2">
                @if (errorMessages.ContainsKey("General"))
                {
                        <div class="alert alert-danger mb-0 me-2">@errorMessages["General"]</div>
                }

                @if (SelectedStation?.stationID == 0)
                {
                        <MudButton StartIcon="@Icons.Material.Filled.AddCircle"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   Size="Size.Small"
                                   Class="add-station-btn-consistent"
                                   Style="min-width: 90px; height: 32px; font-size: 0.75rem;"
                                   @onclick="CreateStationAsync">
                        @Fassade.Language.Create
                        </MudButton>
                }

                @if (SelectedStation?.stationID != 0)
                {
                        <MudButton StartIcon="@Icons.Material.Filled.Save"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   Size="Size.Small"
                                   Class="add-station-btn-consistent"
                                   Style="min-width: 90px; height: 32px; font-size: 0.75rem;"
                                   @onclick="UpdateStationAsync">
                        @Fassade.Language.Save
                        </MudButton>
                }
            </div>
        </div>
    </div>
    <!-- NEU: Separate Linie mit Padding -->
    <div style="padding: 0px 24px 0px 0px;">
        <div style="border-bottom: 1px solid rgba(0,0,0,0.08);"></div>
    </div>

    <!-- Optimierter Formular-Bereich mit besserem Spacing -->
    <div class="layout position-relative" style="padding: 28px 24px 24px 24px;">
        <div class="stationColoumn" style="display: flex; flex-direction: column; gap: 20px;">

            <!-- Assembly Station Field -->
            <div style="position: relative;">
                <MudTextField @bind-Value="SelectedStation.assemblystation"
                              Label="@Fassade.Language.AssemblyStation"
                              Variant="Variant.Outlined"
                              MaxLength="10"
                              Class="search-field-enhanced"
                              Style="background: white; border-radius: 12px;"
                              Immediate="true"
                              OnBlur="CheckIfDirty"
                              Error="@errorMessages.ContainsKey("Assemblystation")"
                              ErrorText="@errorMessages.GetValueOrDefault("Assemblystation")" />
                <span class="position-absolute end-0 bottom-0 me-3 mb-2 text-muted small">
                    @($"{SelectedStation?.assemblystation?.Length ?? 0}/10")
                </span>
            </div>

            <!-- Assembly Station Description Field -->
            <div style="position: relative;">
                <MudTextField @bind-Value="SelectedStation.stationName"
                              Label="@Fassade.Language.AssemblyStationDesc"
                              Variant="Variant.Outlined"
                              MaxLength="50"
                              Class="search-field-enhanced"
                              Style="background: white; border-radius: 12px;"
                              Immediate="true"
                              OnBlur="CheckIfDirty" />
                <span class="position-absolute end-0 bottom-0 me-3 mb-2 text-muted small">
                    @($"{SelectedStation?.stationName?.Length ?? 0}/50")
                </span>
            </div>

            <!-- Station Type Field -->
            <MudSelect T="int" Label="@Fassade.Language.StationType" 
                       @bind-Value="SelectedStation.stationTypeID" 
                       Variant="Variant.Outlined"
                       Class="search-field-enhanced" 
                       Style="background: white; border-radius: 12px;"
                       OnBlur="CheckIfDirty">
                @if (stationTypes != null)
                {
                    @foreach (var stationType in stationTypes)
                    {
                                <MudSelectItem T="int" Value="@stationType.stationTypeID">@stationType.stationTypeName</MudSelectItem>
                    }
                }
            </MudSelect>

            <!-- Comment Field -->
            <div style="position: relative;">
                <MudTextField @bind-Value="SelectedStation.Comment"
                              Label="@Fassade.Language.Comment"
                              Variant="Variant.Outlined"
                              Class="search-field-enhanced"
                              Style="background: white; border-radius: 12px;"
                              Immediate="true"
                              OnBlur="CheckIfDirty"
                              MaxLength="1000"
                              Lines="5"
                              TextArea="true" />
                <span class="position-absolute end-0 bottom-0 me-3 mb-2 text-muted small">
                    @($"{SelectedStation?.Comment.Length ?? 0}/1000")
                </span>
            </div>
        </div>
    </div>
</div>

@code {

	[Parameter]
	public Station? SelectedStation { get; set; }

	IEnumerable<StationType> stationTypes;

	private Station? OriginalStation { get; set; }

	private Dictionary<string, string> errorMessages = new();

	private bool showErrors = false;

	protected override async Task OnInitializedAsync()
	{
		UsernameService.PropertyChanged += (_, __) => InvokeAsync(StateHasChanged);

	}



	protected override async Task OnParametersSetAsync()
	{
		stationTypes = await Fassade.GetAllStationTypes();	
		if (SelectedStation != null)
		{
			ResetValidationState();
			OriginalStation = SelectedStation.Clone();
			OriginalStation.stationID = SelectedStation.stationID;
			OriginalStation.lineID = SelectedStation.lineID;
		}
	}


	#region CRUD
	public async Task UpdateStationAsync()
	{
		ResetValidationState();
		if (await ValidateData() == false) return;
		SelectedStation.modifiedBy = UsernameService.Username.Trim();
		if (!await Fassade.UpdateStation(SelectedStation)) return;
		var signalStation = await Fassade.GetStationByName(SelectedStation.lineID.Value, SelectedStation.assemblystation);
		await SignalRService.SendMessageToServer($"StationUpdated;{signalStation.stationID}");
		await DirtyManagerService.setClean();
	}



	

	private async Task CreateStationAsync()
	{
		if (await ValidateData() == false) return;
		SelectedStation.modifiedBy = UsernameService.Username.Trim();
		if (!await Fassade.AddStation(SelectedStation)) return;

		var createdStation = await Fassade.GetStationByName(SelectedStation.lineID.Value, SelectedStation.assemblystation);
		if (createdStation != null)
		{
			await SignalRService.SendMessageToServer($"StationCreated;{createdStation.stationID}");
		}
		await DirtyManagerService.setClean();
	}


	private async Task DeleteStationAsync()
	{
		if (SelectedStation == null || !await Fassade.DeleteStation(SelectedStation)) return;

		await SignalRService.SendMessageToServer($"StationDeleted;{SelectedStation.stationID}");
		await DirtyManagerService.setClean();
	}

	#endregion


	#region Validate
	public async Task<bool> ValidateData()
	{
		errorMessages.Clear();

		//Objekt
		if (SelectedStation is null)
		{
			errorMessages["General"] = Fassade.Language.MissingStationData;
			return false;
		}

		//Assemblystation
		if (string.IsNullOrWhiteSpace(SelectedStation.assemblystation))
		{
			errorMessages["Assemblystation"] = Fassade.Language.MissingAssemblyStation;
		}

		if (await Fassade.StationExistsInLine(SelectedStation.assemblystation, SelectedStation.stationID.Value, SelectedStation.lineID.Value)) 
		{
			errorMessages["Assemblystation"] = Fassade.Language.StationAlreadyExists;
		}

		showErrors = errorMessages.Any();
		return !showErrors;
	}


	private void ResetValidationState()
	{
		errorMessages.Clear();
		showErrors = false;
		StateHasChanged();
	}
	#endregion

	#region Dirty
	private async Task<bool> CheckIfDirty()
	{
		if (SelectedStation?.stationID == 0)
			return false;
		return await DirtyManagerService.CheckIfDirty(SelectedStation, OriginalStation, "Station");
	}

	public async Task ResetStation()
	{
		
		var signalStation = await Fassade.GetStation(SelectedStation.stationID.Value);
		await SignalRService.SendMessageToServer($"StationUpdated;{signalStation.stationID}");
		await DirtyManagerService.setClean();
	}
	#endregion


}
