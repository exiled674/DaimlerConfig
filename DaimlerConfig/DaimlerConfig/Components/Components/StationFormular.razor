@using DaimlerConfig.Components.Models
@inject DaimlerConfig.Components.Fassade.Fassade Fassade

@using DaimlerConfig.Services
@inject SignalRService SignalRService
@inject DirtyManagerService DirtyManagerService
@using System.Linq

<div>

	<div class="class-header justify-content-between align-items-center">
		<h2>Station</h2>
		<div class="d-flex justify-content-end align-items-center gap-2"> 
			@if (SelectedStation?.stationID == 0)
			{
				<div class="d-flex justify-content-between align-items-center mb-3">
					<button class="btn btn-primary btn-sm"  @onclick="CreateStationAsync">Create</button>
				</div>
			}



			@if (SelectedStation?.stationID != 0)
			{
				<div class="d-flex justify-content-between align-items-center mb-3">
					<button class="btn btn-primary btn-sm"  @onclick="UpdateStationAsync">Update</button>
				</div>
			}

			@if (SelectedStation?.stationID != 0)
			{
				<div class="d-flex justify-content-between align-items-center mb-3">
					<button class="btn btn-primary btn-sm" @onclick="DeleteStationAsync">Delete</button>
				</div>
			}
		</div>
	</div>



	<div class="layout position-relative">
		<div class="stationColoumn">

			<div class="form-floating mb-3">
				<input type="text" class="form-control form-control" placeholder="" @onblur="CheckIfDirty" @bind="SelectedStation.assemblystation">
				<label>Assemblystation</label>
			</div>

			<div class="form-floating mb-3">
				<input type="text" class="form-control form-control" placeholder="" @onblur="CheckIfDirty" @bind="SelectedStation.stationName">
				<label>Assemblystation Description</label>
			</div>

			<div class="form-floating mb-3">
				<select class="form-select form-select" id="StationType" @onblur="CheckIfDirty"  @bind="SelectedStation.stationTypeID">
					@if (stationTypes != null)
					{
						@foreach (var stationType in stationTypes)
						{
							<option value="@stationType.stationTypeID">@stationType.stationTypeName</option>
						}
					}
				</select>
				<label for="StationType">Station Type</label>
			</div>

		</div>

	</div>
</div>

@code {

	[Parameter]
	public Station? SelectedStation { get; set; }

	[Parameter]
	public EventCallback OnUpdated { get; set; }

	IEnumerable<StationType> stationTypes;

	private Station? OriginalStation { get; set; }




	protected override async Task OnInitializedAsync()
	{
		stationTypes = await Fassade.GetAllStationTypes();	
		if (SelectedStation != null)
		{
			OriginalStation = SelectedStation.Clone();
			OriginalStation.stationID = SelectedStation.stationID;
			OriginalStation.lineID = SelectedStation.lineID;
		}
	}


	#region CRUD
	public async Task UpdateStationAsync()
	{
		if (await ValidateData() == false) return;

		await Fassade.UpdateStation(SelectedStation);
		await OnUpdated.InvokeAsync();
		await SignalRService.SendMessageToServer("StationChanged");

	}

	private async Task CreateStationAsync()
	{
		if (await ValidateData() == false) return;

		await Fassade.AddStation(SelectedStation);
		await OnUpdated.InvokeAsync();
		await SignalRService.SendMessageToServer("StationChanged");

	}

	private async Task DeleteStationAsync()
	{
		if (SelectedStation != null)
		{
			await Fassade.DeleteStation(SelectedStation);
			await OnUpdated.InvokeAsync();
			await SignalRService.SendMessageToServer("StationChanged");
		}
	}
	#endregion


	#region Validate
	private async Task<bool> ValidateData()
	{
		//Objekt
		if (SelectedStation is null)
			return false;



		//Assemblystation
		if (string.IsNullOrWhiteSpace(SelectedStation.assemblystation))
			return false;

		if (await Fassade.StationExistsInLine(SelectedStation.assemblystation, SelectedStation.lineID.Value))
			return false;

		if (SelectedStation.assemblystation.Length > 10)
			return false;



		//StationName
		if (SelectedStation.stationName != null)
		{
			if (SelectedStation.stationName.Length > 50)
				return false;
		}


		return true;

	}
	#endregion

	#region Dirty
	private async Task<bool> CheckIfDirty()
	{
		return await DirtyManagerService.CheckIfDirty(SelectedStation, OriginalStation);
	}
	#endregion

	public void ResetStation()
	{
		if (OriginalStation != null)
			SelectedStation = OriginalStation.Clone();
			SelectedStation.stationID = OriginalStation.stationID;
			SelectedStation.lineID = OriginalStation.lineID;
		}
	}

}
