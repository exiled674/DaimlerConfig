@using DaimlerConfig.Components.Models
@inject DaimlerConfig.Components.Fassade.Fassade Fassade

@using DaimlerConfig.Services
@inject SignalRService SignalRService

<div>
	<h2>Station</h2>
	<div class="layout">
		<div class="toolColoumn">
			<label>Assemblystation:</label>
			<input class="input-field" type="text" @bind="SelectedStation.assemblystation"  />

			<label>Assemblystation Description:</label>
			<input class="input-field" type="text" @bind="SelectedStation.stationName"  />

			<label>Station Type:</label>
			<input class="input-field" type="text" @bind="SelectedStation.stationTypeID" />

			@if (SelectedStation?.stationID == 0)
			{
				<div class="d-flex justify-content-between align-items-center mb-3">
					<button class="btn btn-primary btn-sm" @onclick="CreateStationAsync">Create</button>
				</div>
			}

			@if (SelectedStation?.stationID != 0)
			{
				<div class="d-flex justify-content-between align-items-center mb-3">
					<button class="btn btn-primary btn-sm" @onclick="UpdateStationAsync">Update</button>
				</div>
			}


		</div>
	</div>
</div>

@code {

	[Parameter]
	public Station? SelectedStation { get; set; }

	[Parameter]
	public EventCallback OnUpdated { get; set; }

	private async Task UpdateStationAsync()
	{
		if (SelectedStation != null)
		{
			await Fassade.UpdateStation(SelectedStation);
			await OnUpdated.InvokeAsync();
			await SignalRService.SendMessageToServer("StationChanged");
		}
	}

	private async Task CreateStationAsync()
	{
		if (SelectedStation is null)
			return;


		if (string.IsNullOrWhiteSpace(SelectedStation.assemblystation))
		{


			return;
		}

		if (SelectedStation.stationTypeID != 1)
		{

			return;
		}

		bool exists = await Fassade.StationExistsByName(SelectedStation.assemblystation);
		if (exists)
		{

			return;
		}

		// Alles erfüllt → Station anlegen
		await Fassade.AddStation(SelectedStation);
		await OnUpdated.InvokeAsync();



		await SignalRService.SendMessageToServer("StationChanged");
	}
}
