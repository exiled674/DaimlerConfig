@using DaimlerConfig.Components.Models
@inject DaimlerConfig.Components.Fassade.Fassade Fassade

@using DaimlerConfig.Services
@inject SignalRService SignalRService
@inject DirtyManagerService DirtyManagerService
@inject UsernameService UsernameService
@using System.Linq

<div class="container-lg px-3">

	<div class="class-header justify-content-between align-items-center">

		<MudText Typo="Typo.h5" Style="color: var(--mud-palette-text-primary); font-weight: 600;">
							@Fassade.Language.Station
		</MudText>
		<div class="d-flex justify-content-end align-items-center gap-2"> 
			@if (errorMessages.ContainsKey("General"))
			{
					<div class="alert alert-danger mb-3">@errorMessages["General"]</div>
			}
			@if (SelectedStation?.stationID == 0)
			{
					<div class="d-flex justify-content-between align-items-center mb-3">
						<button class="btn btn-primary btn-sm"   @onclick="CreateStationAsync">@Fassade.Language.Create</button>
					</div>
			}


			@if (SelectedStation?.stationID != 0)
			{
					<div class="d-flex justify-content-between align-items-center mb-3">
							<MudButton StartIcon="@Icons.Material.Filled.Add"
								   Variant="Variant.Filled"
								   Color="Color.Primary"
									   Class="btn btn-primary btn-sm add-station-btn"
								   @onclick="UpdateStationAsync">
								@Fassade.Language.Save
						</MudButton>
					</div>



			}

		</div>
	</div>



	<div class="layout position-relative">
		<div class="stationColoumn">

			<MudTextField @bind-Value="SelectedStation.assemblystation"
			  Label="@Fassade.Language.AssemblyStation"
			  Variant="Variant.Filled"
			  MaxLength="10"
			  Class="flex-grow-1 search-field-enhanced"
			  Style="background: white; border-radius: 12px;" 
			  Margin="Margin.Dense"
			  Immediate="true"
			  OnBlur="CheckIfDirty"
			  Error="@errorMessages.ContainsKey("Assemblystation")"
			  ErrorText="@errorMessages.GetValueOrDefault("Assemblystation")" />
			<span class="position-absolute end-0 bottom-0 me-2 mb-1 text-muted small">
				@($"{SelectedStation?.assemblystation?.Length ?? 0}/10")
			</span>




			<MudTextField @bind-Value="SelectedStation.stationName"
			  Label="@Fassade.Language.AssemblyStationDesc"
			  Variant="Variant.Filled"
			  MaxLength="50"
			  Class="flex-grow-1 search-field-enhanced"
			Style="background: white; border-radius: 12px;"
			  Margin="Margin.Dense"
			  Immediate="true"
			  OnBlur="CheckIfDirty" />
			<span class="position-absolute end-0 bottom-0 me-2 mb-1 text-muted small">
				@($"{SelectedStation?.stationName?.Length ?? 0}/50")
			</span>

			<MudSelect T="int" Label="@Fassade.Language.StationType" @bind-Value="SelectedStation.stationTypeID" 
		   Variant="Variant.Filled" Class="flex-grow-1 search-field-enhanced"
				Style="background: white; border-radius: 12px;" Margin="Margin.Dense" OnBlur="CheckIfDirty">
				@if (stationTypes != null)
				{
					@foreach (var stationType in stationTypes)
					{
							<MudSelectItem T="int" Value="@stationType.stationTypeID">@stationType.stationTypeName</MudSelectItem>
					}
				}
		   </MudSelect>

			<MudTextField @bind-Value="SelectedStation.Comment"
			  Label="@Fassade.Language.Comment"
			  Variant="Variant.Filled"
			  Class="flex-grow-1 search-field-enhanced"
				Style="background: white; border-radius: 12px;"
			  Margin="Margin.Dense"
			  Immediate="true"
			  OnBlur="CheckIfDirty"
			  MaxLength="1000"
			  Lines="5"
			  TextArea="true" />
				<span class="position-absolute end-0 bottom-0 me-2 mb-1 text-muted small">
				@($"{SelectedStation?.Comment.Length ?? 0}/1000")
				</span>


		</div>

	</div>
</div>



<style>
	 .search-field-enhanced {
	box-shadow: 0 4px 12px rgba(0,0,0,0.1), 0 2px 4px rgba(0,0,0,0.06) !important;
	transition: box-shadow 0.2s ease-in-out !important;
	}

	.search-field-enhanced:hover {
	box-shadow: 0 6px 16px rgba(0,0,0,0.15), 0 4px 8px rgba(0,0,0,0.1) !important;
	}

	.search-field-enhanced .mud-input-outlined {
	background: white !important;
	border-radius: 12px !important;
	}
</style>

@code {

	[Parameter]
	public Station? SelectedStation { get; set; }

	IEnumerable<StationType> stationTypes;

	private Station? OriginalStation { get; set; }

	private Dictionary<string, string> errorMessages = new();

	private bool showErrors = false;


	protected override async Task OnParametersSetAsync()
	{
		stationTypes = await Fassade.GetAllStationTypes();	
		if (SelectedStation != null)
		{
			ResetValidationState();
			OriginalStation = SelectedStation.Clone();
			OriginalStation.stationID = SelectedStation.stationID;
			OriginalStation.lineID = SelectedStation.lineID;
		}
	}


	#region CRUD
	public async Task UpdateStationAsync()
	{
		ResetValidationState();
		if (await ValidateData() == false) return;
		SelectedStation.modifiedBy = UsernameService.Username.Trim();
		if (!await Fassade.UpdateStation(SelectedStation)) return;
		var signalStation = await Fassade.GetStationByName(SelectedStation.lineID.Value, SelectedStation.assemblystation);
		await SignalRService.SendMessageToServer($"StationUpdated;{signalStation.stationID}");
		await DirtyManagerService.setClean();
	}



	

	private async Task CreateStationAsync()
	{
		if (await ValidateData() == false) return;
		SelectedStation.modifiedBy = UsernameService.Username.Trim();
		if (!await Fassade.AddStation(SelectedStation)) return;

		var createdStation = await Fassade.GetStationByName(SelectedStation.lineID.Value, SelectedStation.assemblystation);
		if (createdStation != null)
		{
			await SignalRService.SendMessageToServer($"StationCreated;{createdStation.stationID}");
		}
		await DirtyManagerService.setClean();
	}


	private async Task DeleteStationAsync()
	{
		if (SelectedStation == null || !await Fassade.DeleteStation(SelectedStation)) return;

		await SignalRService.SendMessageToServer($"StationDeleted;{SelectedStation.stationID}");
		await DirtyManagerService.setClean();
	}

	#endregion


	#region Validate
	public async Task<bool> ValidateData()
	{
		errorMessages.Clear();

		//Objekt
		if (SelectedStation is null)
		{
			errorMessages["General"] = Fassade.Language.MissingStationData;
			return false;
		}

		//Assemblystation
		if (string.IsNullOrWhiteSpace(SelectedStation.assemblystation))
		{
			errorMessages["Assemblystation"] = Fassade.Language.MissingAssemblyStation;
		}

		if (await Fassade.StationExistsInLine(SelectedStation.assemblystation, SelectedStation.stationID.Value, SelectedStation.lineID.Value)) 
		{
			errorMessages["Assemblystation"] = Fassade.Language.StationAlreadyExists;
		}

		showErrors = errorMessages.Any();
		return !showErrors;
	}


	private void ResetValidationState()
	{
		errorMessages.Clear();
		showErrors = false;
		StateHasChanged();
	}
	#endregion

	#region Dirty
	private async Task<bool> CheckIfDirty()
	{
		if (SelectedStation?.stationID == 0)
			return false;
		return await DirtyManagerService.CheckIfDirty(SelectedStation, OriginalStation, "Station");
	}

	public async Task ResetStation()
	{
		
		var signalStation = await Fassade.GetStation(SelectedStation.stationID.Value);
		await SignalRService.SendMessageToServer($"StationUpdated;{signalStation.stationID}");
		await DirtyManagerService.setClean();
	}
	#endregion


}
