@using DaimlerConfig.Components.Models
@using DaimlerConfig.Services
@inject DirtyManagerService DirtyManagerService

@if (isVisible)
{
    <div class="popup-backdrop">
        <div class="popup-dialog">
            <p>@Language.UnchangedChanges </p>
            <button class="btn btn-primary" @onclick="SaveChanges">@Language.Save</button>
            <button class="btn btn-secondary" @onclick="DismissChanges">@Language.Cancel</button>
        </div>
    </div>
}

@code {

    private bool isVisible;

    [Parameter]
    public EventCallback OnDismissChange { get; set; }


    [Parameter]
    public EventCallback OnSaveChange { get; set; }

    protected override async Task OnInitializedAsync()
    {
        isVisible = await DirtyManagerService.IsDirty();
    }

    private async Task SaveChanges()
    {
        isVisible = false;
        await OnSaveChange.InvokeAsync(); // Callback auslösen
        StateHasChanged();

    }

    private async Task DismissChanges()
    {
        isVisible = false;
        await OnDismissChange.InvokeAsync(); // Callback auslösen
        StateHasChanged();
    }
}

