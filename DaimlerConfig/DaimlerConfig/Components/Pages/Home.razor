@page "/"

@inject DaimlerConfig.Components.Fassade.Fassade Fassade

@using DaimlerConfig.Services
@inject SignalRService SignalRService
@inject NavigationManager Navigation
@inject NavigationStateService NavState



@using CommunityToolkit.Maui.Storage;
@using System.Text.Json
@using System.IO
@using System.Text
@using ClosedXML.Excel
@using DaimlerConfig.Components.Export
@using Microsoft.Maui.Storage
@inject DirtyManagerService DirtyManagerService
@using DaimlerConfig.Components.Models

@using MudBlazor
@inject IDialogService DialogService

<!-- Navbar -->


<MudAppBar Elevation="1" Color="Color.Primary">
    <MudText Typo="Typo.h6" Class="ml-2">DaimlerConfig</MudText>
    <MudSpacer />
    <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit" OnClick="OpenSettings" />
</MudAppBar>

@if (ShowSettings)
{
        <Settings OnClosing="CLoseSetting" />
}



<!-- Main Content -->
<div class="ProjectManager container">
    <h1 class="mt-5">Project Manager</h1>
    <!-- div with search and sort-->
    <div class="projects">
        <hr/>
        <div class="d-flex align-items-center gap-3 mb-3">

            <!-- Search Input -->

              <MudTextField @bind-Value="searchText"
                  Placeholder="Search"
                  Label="Search"
                  Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Material.Filled.Search"
                  Immediate="true"
                  OnInput="OnSearchTextChanged"
                  Variant="Variant.Outlined"
                  Margin="Margin.Dense"
                  Dense="true"
                  Class="flex-grow-1" />


            <!-- Sort Dropdown -->
            <div style="width: auto">
                <MudSelect T="string" 
                           Value="@selectedSort" 
                           Label="Sort by"
                           Variant="Variant.Outlined"
                           Dense="true"
                           Margin="Margin.Dense"
                           FullWidth="true"
                           AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@("date")">
                        <div class="d-flex align-items-center">
                            <MudIcon Icon="@Icons.Material.Filled.DateRange" Size="Size.Small" Class="me-2" />
                            Sorted by date descending
                        </div>
                    </MudSelectItem>
                    <MudSelectItem Value="@("name")">
                        <div class="d-flex align-items-center">
                            <MudIcon Icon="@Icons.Material.Filled.SortByAlpha" Size="Size.Small" Class="me-2" />
                            Sorted by name ascending
                        </div>
                    </MudSelectItem>
                </MudSelect>
           </div>
        </div>
    </div>

<!-- Lines List -->
    @if (FilteredLines is not null && FilteredLines.Any())
    {
        foreach (var line in FilteredLines)
        {
                <MudCard Class="my-8 hover-lift hover-highlight" Elevation="3" Style="border-radius: 12px; margin: 32px 8px; max-width: 95%;">
                    <!-- Editing Line -->
                @if (EditingLines.Contains(line))
                {
                            <MudGrid AlignItems="Center" Class="pa-5">
                                <MudItem xs="10">
                                    <MudTextField T="string"
                                                @bind-Value="line.lineName"
                                                Placeholder="Line name"
                                                Variant="Variant.Outlined"
                                                Margin="Margin.Dense"
                                                Dense="true"
                                                Immediate="true"
                                                FullWidth="true"
                                                Error="@isDuplicateName"
                                                ErrorText="The name already exists."
                                                OnBlur="@(e => ConfirmEdit(line, new ChangeEventArgs { Value = line.lineName }))"
                                                AutoFocus="true"
                                                />
                                </MudItem>
                                <MudItem xs="2" Class="d-flex justify-end">
                                    <MudIconButton Icon="@Icons.Material.Filled.Close" 
                                                 Color="Color.Secondary" 
                                                 Size="Size.Small"
                                                 OnClick="() => CancelEdit(line)"
                                                 Title="Cancel" />
                                </MudItem>
                            </MudGrid>
                }
                // Normal Line Display
                else
                {
                            <MudGrid AlignItems="Center" Class="pa-4 cursor-pointer"
                                    @onclick="@(() => NavigateToLine(line.lineName))">
                             <MudItem xs="6" Class="cursor-pointer" >
                                    <MudText Typo="Typo.body1" Class="font-weight-medium">
                                @line.lineName
                                    </MudText>
                                </MudItem>
                                <MudItem xs="4" Class="d-flex justify-center">
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                                        last modified: @line.lastModified
                                    </MudText>
                                </MudItem>
                                <MudItem xs="2" Class="d-flex justify-end">
                                    <div @onclick:stopPropagation>
                                        <MudMenu Icon="@Icons.Material.Filled.MoreVert" 
                                               Size="Size.Small" 
                                               Dense="true"
                                               AnchorOrigin="Origin.BottomRight"
                                               TransformOrigin="Origin.TopRight">
                                            <MudMenuItem OnClick="@(() => StartEditing(line))" 
                                                       Icon="@Icons.Material.Filled.Edit">
                                                Edit
                                            </MudMenuItem>
                                            <MudMenuItem OnClick="@(() => DeleteLine(line))" 
                                                       Icon="@Icons.Material.Filled.Delete"
                                                       IconColor="Color.Error">
                                                Delete
                                            </MudMenuItem>
                                            <MudDivider />
                                            <MudMenuItem OnClick="FilePick" 
                                                       Icon="@Icons.Material.Filled.FileDownload">
                                                Export to Excel
                                            </MudMenuItem>
                                            <MudMenuItem OnClick="FilePickJson" 
                                                       Icon="@Icons.Material.Filled.FileDownload">
                                                Export to Json
                                            </MudMenuItem>
                                        </MudMenu>
                                    </div>
                                </MudItem>
                            </MudGrid>
                }
                </MudCard>
        }
    }




    else
    {
        <p class="text-muted">Keine Lines gefunden.</p>
    }

    <div>
        <MudFab Icon="@Icons.Material.Filled.Add"
        Color="Color.Primary"
        Size="Size.Large"
        Style="position:fixed;bottom:32px;right:32px;z-index:2000;box-shadow:0 8px 24px rgba(0,0,0,0.18);border-radius:32px;"
        OnClick="CreateNewLine"
        Label="Create Empty Project"
        Class="mud-elevation-8 px-4 py-2"
        />


    </div>
</div>


<style>
    .hover-lift {
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }
    .hover-lift:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15) !important;
    }

    .cursor-pointer {
        cursor: pointer;
    }

    .mud-fab-extended {
        border-radius: 28px !important;
    }

    .hover-highlight {
    transition: background-color 0.2s ease;
    }

    .hover-highlight:hover {
        background-color: #e3f2fd; /* leichtes Blau */
        cursor: pointer;
    }
</style>

@code {

    public void Test()
    {
        Navigation.NavigateTo("/test");
    }
    private List<Line> AllLines = new();
    private List<Line> FilteredLines = new();
    private HashSet<Line> EditingLines = new();
    private string searchText = "";
    private string selectedSort = "date";
    private bool isDuplicateName = false;
    private Line? ActiveContextMenuLine = null;
    private bool ShowDropdown = false;
    private bool ShowSettings = false;

    private void ToggleContextMenu(Line line)
    {
        if (ActiveContextMenuLine == line)
            ActiveContextMenuLine = null;
        else
            ActiveContextMenuLine = line;
    }

    private void StartEditing(Line line)
    {
        EditingLines.Add(line);
        ActiveContextMenuLine = null;
    }

    private async Task DeleteLine(Line line)
    {
        await Fassade.DeleteLine(line);
        AllLines.Remove(line);
        EditingLines.Remove(line);
        await SignalRService.SendMessageToServer($"LineDeleted;{line.lineID}");
        ActiveContextMenuLine = null;
        ApplyFilters();
    }

    protected override async Task OnInitializedAsync()
    {

        NavState.SetCurrentRoute("/"); // für Home


        SignalRService.RegisterResponseHandler(async (string msg) =>
        {
            await InvokeAsync(async () =>
            {
                switch(msg)
                {
                    case var msg when msg.StartsWith("LineAdded;"):
                        {
                            var parts = msg.Split(';');
                            var lineID = int.Parse(parts[1]);
                            if (!AllLines.Any(l => l.lineID == lineID))
                            {
                                var line = await Fassade.GetLine(lineID);
                                if (line != null)
                                {
                                    AllLines.Add(line);
                                    ApplyFilters();
                                    StateHasChanged();
                                }

                            }


                            break;
                        }

                    case var msg when msg.StartsWith("LineUpdated;"):
                        {
                            var parts = msg.Split(';');
                            var lineID = int.Parse(parts[1]);

                            var idx = AllLines.FindIndex(l => l.lineID == lineID);
                            if (idx >= 0)
                            {
                                var line = await Fassade.GetLine(lineID);
                                if (line != null)
                                {
                                    AllLines[idx] = line;
                                    ApplyFilters();
                                    StateHasChanged();
                                }
                            }
                            break;
                        }

                    case var msg when msg.StartsWith("LineDeleted;"):
						{
							var parts = msg.Split(';');
							var lineID = int.Parse(parts[1]);
							var lineToRemove = AllLines.FirstOrDefault(l => l.lineID == lineID);
							if (lineToRemove != null)
							{
								AllLines.Remove(lineToRemove);
								EditingLines.Remove(lineToRemove);
								ApplyFilters();
							}
							break;
						}
                }



            });
        });
        await SignalRService.StartConnectionAsync();

        // Initiales Laden
        var result = await Fassade.GetAllLinesAsync();
        AllLines = result.ToList();
        ApplyFilters();
    }

    private void OnSearchTextChanged(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private void OnSortChanged(ChangeEventArgs e)
    {
        selectedSort = e.Value?.ToString() ?? "date";
        ShowDropdown = false; // Diese Zeile hinzufügen
        ApplyFilters();
    }

    private string GetSortDisplayText()
    {
        return selectedSort switch
        {
            "name" => "Sorted by name ascending",
            "date" => "Sorted by date descending",
            _ => "Sorted by date descending"
        };
    }

    private void ApplyFilters()
    {
        var filtered = AllLines
            .Where(line => line.lineName.StartsWith(searchText, StringComparison.OrdinalIgnoreCase));

        FilteredLines = selectedSort switch
        {
            "name" => filtered.OrderBy(l => l.lineName).ToList(),
            "date" => filtered.OrderByDescending(l => l.lastModified).ToList(),
            _ => filtered.ToList()
        };
    }

    private void CreateNewLine()
    {
        var newLine = new Line
            {
                lineName = "Enter a name",
                lastModified = DateTime.Now
            };
        AllLines.Insert(0, newLine);
        EditingLines.Add(newLine);
        ApplyFilters();

    }



    private async Task ConfirmEdit(Line line, ChangeEventArgs e)
    {
        var newName = e.Value?.ToString()?.Trim();
        isDuplicateName = await Fassade.LineExistsByName(newName);

        if (!string.IsNullOrEmpty(newName) && newName != "Enter a name" && !isDuplicateName)
        {
            line.lineName = newName;
            line.lastModified = DateTime.Now;

            if (line.lineID == 0) // ❗ prüft, ob es eine neue Line ist
            {
                await Fassade.LineRepository.Add(line);
                var signalLine = await Fassade.GetLineByName(line.lineName);
                await SignalRService.SendMessageToServer($"LineAdded;{signalLine.lineID}");

            }
            else
            {
              await Fassade.LineRepository.Update(line);
                await SignalRService.SendMessageToServer($"LineUpdated;{line.lineID}");
            }
           
            EditingLines.Remove(line);
            ApplyFilters();
        }
    }


    private void CancelEdit(Line line)
    {
        if (line.lineName == "Enter a name")
        {
            // Bei neu erstellten Lines: löschen
            AllLines.Remove(line);
        }

        EditingLines.Remove(line);
        isDuplicateName = false;
        ApplyFilters();
    }

    private void NavigateToLine(string lineName)
    {
        Navigation.NavigateTo($"/line/{Uri.EscapeDataString(lineName)}");
    }

    private async Task FilePick()
    {
        var line = ActiveContextMenuLine;
        ActiveContextMenuLine = null;

        try
        {
            // Vorbereiten der Daten
            var tools = new List<Tool>();
            var operations = new List<Operation>();
            var stations = await Fassade.GetStationsFromLine(line.lineID);
            foreach (var station in stations)
            {
                tools.AddRange(await Fassade.GetToolsFromStation(station.stationID));
            }
            foreach (var tool in tools)
            {
                operations.AddRange(await Fassade.GetOperationsFromTool(tool.toolID));
            }

            var stationTypes = await Fassade.StationTypeRepository.GetAll();
            var toolTypes = await Fassade.ToolTypeRepository.GetAll();
            var toolClasses = await Fassade.ToolClassRepository.GetAll();

            // Excel-Datei erstellen und in MemoryStream speichern
            using var stream = new MemoryStream();
            using (var workbook = new XLWorkbook())
            {
                Fassade.ExcelExport.Export(stream, line, stations.ToArray(), tools.ToArray(), stationTypes.ToArray(), toolTypes.ToArray(), toolClasses.ToArray());
            }

            // Standard-Dateispeicherdialog verwenden
            var fileName = $"ExcelExport-{line.lineName ?? "line"}_{DateTime.Now:yyyyMMdd}.xlsx";
            var result = await FileSaver.Default.SaveAsync(
                fileName,
                stream,
                new CancellationToken()
            );

            if (result.IsSuccessful)
            {
                await Application.Current.MainPage.DisplayAlert("Success", "The file was saved successfully.", "OK");
            }
        }
        catch (Exception ex)
        {
            await Application.Current.MainPage.DisplayAlert("Error",
                "An error occurred while saving the file: " + ex.Message, "OK");
        }

    }

    private async Task FilePickJson()
    {
        var line = ActiveContextMenuLine;
        ActiveContextMenuLine = null;

        try
        {
            var json = await Fassade.Export(line);
            var bytes = Encoding.UTF8.GetBytes(json);
            var fileName = $"JsonExport-{line.lineName ?? "line"}_{DateTime.Now:yyyyMMdd}.json";
            var result = await FileSaver.Default.SaveAsync(
                fileName,
                new MemoryStream(bytes),
                new CancellationToken()
            );
            if (result.IsSuccessful)
            {
                await Application.Current.MainPage.DisplayAlert("Success", "The file was saved successfully.", "OK");
            }
        }
        catch (Exception ex)
        {
            await Application.Current.MainPage.DisplayAlert("Error",
                "An error occurred while saving the file: " + ex.Message, "OK");
        }
    }

    #region Settings

    private void OpenSettings()
    {
        if (ShowSettings) return;

        ShowSettings = true;
    }

	private void CLoseSetting()
	{
		
        ShowSettings = false;
	}

    #endregion
}