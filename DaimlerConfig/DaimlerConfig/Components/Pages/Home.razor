@page "/"

@inject DaimlerConfig.Components.Fassade.Fassade Fassade
@inject NavigationManager Navigation

@using DaimlerConfig.Services
@inject SignalRService SignalRService


@using CommunityToolkit.Maui.Storage;
@using System.Text.Json
@using System.IO
@using System.Text
@using Microsoft.Maui.Storage
@inject DirtyManagerService DirtyManagerService
@using DaimlerConfig.Components.Models


<!-- Navbar -->
<nav class="navbar fixed-top bg-white border-bottom">
    <div class="container">
        <span class="navbar-brand mb-0 h2">DaimlerConfig</span>
    </div>
</nav>

<!-- Main Content -->
<div class="ProjectManager container">

   <!-- div with search and sort-->
   <div class="projects">
    <p class="lineLabel">Lines:</p>
    <hr/>
        <div class="row g-3 mb-3">
            <!-- Search Input -->
            <div class="col">
                <div class="input-group">
                    <span class="input-group-text bg-body-tertiary border-end-0">
                        <svg width="20" height="20" viewBox="0 0 20 20" fill="#6c757d">
                            <path d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z" />
                        </svg>
                    </span>
                    <input type="text"
                           class="form-control bg-body-tertiary border-start-0"
                           placeholder="Search"
                           @oninput="OnSearchTextChanged"
                           value="@searchText">
                </div>
            </div>

            <!-- Sort Dropdown -->
            <div class=" col-md-auto position-relative">
                <div class="dropdown">
                    <button class="btn btn-outline-secondary dropdown-toggle w-100 text-start overflow-hidden" type="button" id="sortDropdown" data-bs-toggle="dropdown" aria-expanded="false" @onclick="() => ShowDropdown = !ShowDropdown">
                        @GetSortDisplayText()
                    </button>
                    @if (ShowDropdown)
                    {
                            <ul class="dropdown-menu show w-100" aria-labelledby="sortDropdown">
                            <li><button class="dropdown-item @(selectedSort == "date" ? "active" : "")" @onclick="@(() => OnSortChanged(new ChangeEventArgs { Value = "date" }))">Sorted by date descending</button></li>
                            <li><button class="dropdown-item @(selectedSort == "name" ? "active" : "")" @onclick="@(() => OnSortChanged(new ChangeEventArgs { Value = "name" }))">Sorted by name ascending</button></li>
                            </ul>

                    }
                    @if (ShowDropdown)
                    {
                            <div style="position:fixed;top:0;left:0;right:0;bottom:0;z-index:900;"
                                 @onclick="() => ShowDropdown = false"></div>
                    }

                </div>
            </div>
        </div>

    <!-- Lines List -->
        @if (FilteredLines is not null && FilteredLines.Any())
        {
            foreach (var line in FilteredLines)
            {
                    <div class="line-div border rounded d-flex align-items-center justify-content-between mb-2 p-0 overflow-visible position-relative">

                        <!-- Editing Line -->
                    @if (EditingLines.Contains(line))
                    {
                                <div class="d-flex align-items-center flex-grow-1 p-2">
                                    <input class="form-control @(isDuplicateName ? "is-invalid" : "")"
                                           value="@line.lineName"
                                           @onchange="e => ConfirmEdit(line, e)"
                                           autofocus />
                            @if (isDuplicateName)
                            {
                                                            <div class="invalid-feedback px-2 ms-2">The name already exists.</div>
                            }
                                    <button class="btn btn-secondary ms-2" title="Cancel" @onclick="() => CancelEdit(line)">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                                             viewBox="0 0 16 16">
                                            <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1
                                   .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646
                                   2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
                                        </svg>
                                    </button>

                                </div>
                    }
                    // Normal Line Display
                    else
                    {
                                    <div class="d-flex align-items-center justify-content-between flex-grow-1 p-2"
                                         style="cursor: pointer;"
                                         @onclick="@(() => NavigateToLine(line.lineName))">

                                         <span>@line.lineName</span>

                                         <div class="d-flex align-items-center gap-2">
                                         <span class="text-muted">last modified: @line.lastModified</span>


                                        <div class="dropdown" @onclick:stopPropagation>
                                            <button class="btn btn-sm btn-outline-secondary border-0 dropdown-toggle"
                                                    @onclick="@(() => ToggleContextMenu(line))">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                                                     class="bi bi-three-dots-vertical" viewBox="0 0 16 16">
                                                    <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
                                                </svg>
                                            </button>

                                    @if (ActiveContextMenuLine == line)
                                    {
                                                    <div class="dropdown-menu show position-absolute end-0" >
                                                        <button class="dropdown-item" @onclick="@(() => StartEditing(line))">Edit</button>
                                                        <button class="dropdown-item" @onclick="@(() => DeleteLine(line))">Delete</button>
                                                        <button class="dropdown-item" @onclick="FilePick">Export</button>
                                                    </div>

                                    }
                                    @if (ActiveContextMenuLine == line)
                                    {
                                                    <div style="position:fixed;top:0;left:0;right:0;bottom:0;z-index:900;"
                                                         @onclick="() => ActiveContextMenuLine = null"></div>
                                    }
                                        </div>
                                        </div>
                                    </div>
                    }
                    </div>
            }
        }




        else
        {
            <p class="text-muted">Keine Lines gefunden.</p>
        }

    <div>
    <button class="btn btn-block btn-primary pt-2" @onclick="CreateNewLine">
                <span class="plus-icon">+</span>
                Create Empty Project
    </button>
    </div>
</div>

</div>


@code {
    private List<Line> AllLines = new();
    private List<Line> FilteredLines = new();
    private HashSet<Line> EditingLines = new();
    private string searchText = "";
    private string selectedSort = "date";
    private bool isDuplicateName = false;
    private Line? ActiveContextMenuLine = null;
    private bool ShowDropdown = false;

    private void ToggleContextMenu(Line line)
    {
        if (ActiveContextMenuLine == line)
            ActiveContextMenuLine = null;
        else
            ActiveContextMenuLine = line;
    }

    private void StartEditing(Line line)
    {
        EditingLines.Add(line);
        ActiveContextMenuLine = null;
    }

    private async Task DeleteLine(Line line)
    {
        await Fassade.DeleteLine(line);
        AllLines.Remove(line);
        EditingLines.Remove(line);
        await SignalRService.SendMessageToServer("LineChanged");
        ActiveContextMenuLine = null;
        ApplyFilters();
    }

    protected override async Task OnInitializedAsync()
    {
        SignalRService.RegisterResponseHandler(async (string msg) =>
        {
            await InvokeAsync(async () =>
            {
                var result = await Fassade.GetAllLinesAsync();
                AllLines = result.ToList();
                ApplyFilters();
                StateHasChanged();
            });
        });
        await SignalRService.StartConnectionAsync();

        // Initiales Laden
        var result = await Fassade.GetAllLinesAsync();
        AllLines = result.ToList();
        ApplyFilters();
    }

    private void OnSearchTextChanged(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private void OnSortChanged(ChangeEventArgs e)
    {
        selectedSort = e.Value?.ToString() ?? "date";
        ShowDropdown = false; // Diese Zeile hinzufügen
        ApplyFilters();
    }

    private string GetSortDisplayText()
    {
        return selectedSort switch
        {
            "name" => "Sorted by name ascending",
            "date" => "Sorted by date descending",
            _ => "Sorted by date descending"
        };
    }

    private void ApplyFilters()
    {
        var filtered = AllLines
            .Where(line => line.lineName.StartsWith(searchText, StringComparison.OrdinalIgnoreCase));

        FilteredLines = selectedSort switch
        {
            "name" => filtered.OrderBy(l => l.lineName).ToList(),
            "date" => filtered.OrderByDescending(l => l.lastModified).ToList(),
            _ => filtered.ToList()
        };
    }

    private void CreateNewLine()
    {
        var newLine = new Line
            {
                lineName = "Enter a name",
                lastModified = DateTime.Now
            };
        AllLines.Insert(0, newLine);
        EditingLines.Add(newLine);
        ApplyFilters();

    }

    private async Task ConfirmEdit(Line line, ChangeEventArgs e)
    {
        var newName = e.Value?.ToString()?.Trim();
        isDuplicateName = await Fassade.LineExistsByName(newName);

        if (!string.IsNullOrEmpty(newName) && newName != "Enter a name" && !isDuplicateName)
        {
            line.lineName = newName;
            line.lastModified = DateTime.Now;

            if (line.lineID == 0) // ❗ prüft, ob es eine neue Line ist
            {
                await Fassade.LineRepository.Add(line);

            }
            else
            {
                await Fassade.LineRepository.Update(line);
            }
            // SignalR-Nachricht senden
            await SignalRService.SendMessageToServer("LineChanged");
            EditingLines.Remove(line);
            ApplyFilters();
        }
    }


    private void CancelEdit(Line line)
    {
        if (line.lineName == "Enter a name")
        {
            // Bei neu erstellten Lines: löschen
            AllLines.Remove(line);
        }

        EditingLines.Remove(line);
        isDuplicateName = false;
        ApplyFilters();
    }

    private void NavigateToLine(string lineName)
    {
        Navigation.NavigateTo($"/line/{Uri.EscapeDataString(lineName)}");
    }

    private async Task FilePick()
    {
        ActiveContextMenuLine = null;


        var json = await Fassade.Export();
        var bytes = Encoding.UTF8.GetBytes(json);
        var result = await FileSaver.Default.SaveAsync(
                "line.json",
                new MemoryStream(bytes),
                new CancellationToken()
            );
    }
}