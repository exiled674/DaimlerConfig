@page "/"

@inject DaimlerConfig.Components.Fassade.Fassade Fassade
@inject NavigationManager Navigation

@using DaimlerConfig.Services
@inject SignalRService SignalRService
@inject ISnackbar Snackbar

@using CommunityToolkit.Maui.Storage;
@using System.Text.Json
@using System.IO
@using System.Text
@using ClosedXML.Excel
@using DaimlerConfig.Components.Export
@using Microsoft.Maui.Storage
@inject DirtyManagerService DirtyManagerService
@using DaimlerConfig.Components.Models
@using MudBlazor
@using Microsoft.JSInterop
@inject IJSRuntime JS;
@inject ToastService ToastService


<MudLayout>
    <MudMainContent Class="pa-6">
        <MudContainer MaxWidth="MaxWidth.ExtraLarge">
            <!-- Header Section -->
            <MudStack Spacing="2" Class="mb-6">
                <MudText Typo="Typo.h5" Color="Color.Secondary"><b>Production Lines</b></MudText>
                <MudText Typo="Typo.body1">Manage and monitor your manufacturing production lines</MudText>
            </MudStack>

            <!-- Search and Sort -->
            <MudPaper Class="pa-4 mb-4" Elevation="1" Style="border-radius: 8px;">
                <MudGrid GutterSize="3">
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="searchText"
                                      @bind-Value:after="ApplyFilters"
                                      Placeholder="Search"
                                      Variant="Variant.Outlined"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Search"
                                      Immediate="true"
                                      Clearable="true"
                                      Margin="Margin.Dense"
                                      Class="w-100" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudSelect @bind-Value="selectedSort"
                                   @bind-Value:after="ApplyFilters"
                                   Variant="Variant.Outlined"
                                   Margin="Margin.Dense"
                                   Class="w-100">
                            <MudSelectItem Value="@("date")">Sorted by date descending</MudSelectItem>
                            <MudSelectItem Value="@("name")">Sorted by name ascending</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        


            <MudPaper Class="pa-4 mb-4" Elevation="1" Style="border-radius: 8px; max-height: 45vh; display: flex; flex-direction: column;">
                <MudText Typo="Typo.h6" Class="mb-4" Style="color: #2c3e50; flex-shrink: 0;">
                    Production Lines (@FilteredLines.Count items)
                </MudText>
            <!-- Lines List -->
                <div style="flex: 1; overflow-y: auto;">
            @if (FilteredLines is not null && FilteredLines.Any())
            {
                foreach (var line in FilteredLines)
                {
                    <div class="line-div border rounded d-flex align-items-center justify-content-between mb-2 p-0 overflow-visible position-relative">
                        @if (EditingLines.Contains(line))
                        {
                            <div class="d-flex align-items-center flex-grow-1 p-2">
                                <MudTextField @bind-Value="line.lineName"
                                              Class="flex-grow-1"
                                              Variant="Variant.Outlined"
                                              Margin="Margin.Dense"
                                              Error="@isDuplicateName"
                                              ErrorText="The name already exists."
                                              @onchange="e => ConfirmEdit(line, e)"
                                              Immediate="true"
                                              AutoFocus="true" />
                                <MudIconButton Icon="@Icons.Material.Filled.Cancel"
                                               Color="Color.Secondary"
                                               Class="ms-2"
                                               Title="Cancel"
                                               OnClick="@(() => CancelEdit(line))" />
                            </div>
                        }
                        else
                        {
                            <div class="d-flex align-items-center justify-content-between flex-grow-1 p-2"
                                 style="cursor: pointer;"
                                 @onclick="@(() => NavigateToLine(line.lineName))">

                                <span>@line.lineName</span>

                                <div class="d-flex align-items-center gap-2">
                                    <span class="text-muted">last modified: @line.lastModified</span>

                                    <!-- Context Menu -->
                                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Dense="true" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopRight">
                                        <MudMenuItem OnClick="@(() => StartEditing(line))">Edit</MudMenuItem>
                                        <MudMenuItem OnClick="@(() => DeleteLine(line))">Delete</MudMenuItem>
                                        <MudMenuItem OnClick="FilePick">Export to Excel</MudMenuItem>
                                        <MudMenuItem OnClick="FilePickJson">Export to Json</MudMenuItem>
                                    </MudMenu>
                                </div>
                            </div>
                        }
                    </div>
                }
            }
            else
            {
                <MudText Color="Color.Secondary">Keine Lines gefunden.</MudText>
            }
            </div>
            </MudPaper>

            <!-- Action Buttons -->
            @* <div class="mt-4 d-flex gap-3">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="CreateNewLine">
                    Create Empty Project
                </MudButton>

                <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="Test">
                    Test
                </MudButton>
            </div> *@

            <MudFab Color="Color.Primary"
                    StartIcon="@Icons.Material.Filled.Add"
                    Style="position: fixed; bottom: 24px; right: 24px; z-index: 1000;"
                    OnClick="@CreateNewLine" 
                    Label= "New Project"/>

        </MudContainer>
    </MudMainContent>
</MudLayout>




@code {

    public void Test()
    {
        Navigation.NavigateTo("/test");
    }
    private List<Line> AllLines = new();
    private List<Line> FilteredLines = new();
    private HashSet<Line> EditingLines = new();
    private string searchText = "";
    private string selectedSort = "date";
    private bool isDuplicateName = false;
    private Line? ActiveContextMenuLine = null;
    private bool ShowDropdown = false;

    private void ToggleContextMenu(Line line)
    {
        if (ActiveContextMenuLine == line)
            ActiveContextMenuLine = null;
        else
            ActiveContextMenuLine = line;
    }

    private void StartEditing(Line line)
    {
        EditingLines.Add(line);
        ActiveContextMenuLine = null;
    }

    private async Task DeleteLine(Line line)
    {
        if (!await Fassade.DeleteLine(line))
        {
            Snackbar.Add("Couldn't delete the line.", Severity.Error);
            return;
        }

        AllLines.Remove(line);
        EditingLines.Remove(line);
        await SignalRService.SendMessageToServer("LineChanged");
        ActiveContextMenuLine = null;
        ApplyFilters();
        ToastService.ShowSuccess("Line deletion was successful!");

    }

    protected override async Task OnInitializedAsync()
    {
        SignalRService.RegisterResponseHandler(async (string msg) =>
        {
            await InvokeAsync(async () =>
            {
                var result = await Fassade.GetAllLinesAsync();
                AllLines = result.ToList();
                ApplyFilters();
                StateHasChanged();
            });
        });
        await SignalRService.StartConnectionAsync();

        // Initiales Laden
        var result = await Fassade.GetAllLinesAsync();
        AllLines = result.ToList();
        ApplyFilters();
    }

   
    private void OnSearchTextChanged(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private void OnSortChanged(ChangeEventArgs e)
    {
        selectedSort = e.Value?.ToString() ?? "date";
        ShowDropdown = false; // Diese Zeile hinzufügen
        ApplyFilters();
    }

    private string GetSortDisplayText()
    {
        return selectedSort switch
        {
            "name" => "Sorted by name ascending",
            "date" => "Sorted by date descending",
            _ => "Sorted by date descending"
        };
    }

    private void ApplyFilters()
    {
        var filtered = AllLines
            .Where(line => line.lineName.StartsWith(searchText, StringComparison.OrdinalIgnoreCase));

        FilteredLines = selectedSort switch
        {
            "name" => filtered.OrderBy(l => l.lineName).ToList(),
            "date" => filtered.OrderByDescending(l => l.lastModified).ToList(),
            _ => filtered.ToList()
        };
    }


    private void CreateNewLine()
    {
        var newLine = new Line
            {
                lineName = "Enter a name",
                lastModified = DateTime.Now
            };
        AllLines.Insert(0, newLine);
        EditingLines.Add(newLine);
        ApplyFilters();

    }

    private async Task ConfirmEdit(Line line, ChangeEventArgs e)
    {
        var newName = e.Value?.ToString()?.Trim();

        isDuplicateName = await Fassade.LineExistsByName(newName);
        if (isDuplicateName)
        {
            Snackbar.Add("A line with this name already exists.", Severity.Error);
            return;
        }

        if (!string.IsNullOrEmpty(newName) && newName != "Enter a name" && !isDuplicateName)
        {
            line.lineName = newName;
            line.lastModified = DateTime.Now;

            if (line.lineID == 0) // ❗ prüft, ob es eine neue Line ist
            {
                await Fassade.LineRepository.Add(line);

            }
            else
            {
                await Fassade.LineRepository.Update(line);
            }
            // SignalR-Nachricht senden
            await SignalRService.SendMessageToServer("LineChanged");
            EditingLines.Remove(line);
            ApplyFilters();
        }
    }


    private void CancelEdit(Line line)
    {
        if (line.lineName == "Enter a name")
        {
            // Bei neu erstellten Lines: löschen
            AllLines.Remove(line);
        }

        EditingLines.Remove(line);
        isDuplicateName = false;
        ApplyFilters();
    }

    private void NavigateToLine(string lineName)
    {
        Navigation.NavigateTo($"/line/{Uri.EscapeDataString(lineName)}");
    }
    
    private async Task FilePick()
    {
    var line = ActiveContextMenuLine;
    ActiveContextMenuLine = null;

    try 
    {
        // Vorbereiten der Daten
        var tools = new List<Tool>();
        var operations = new List<Operation>();
        var stations = await Fassade.GetStationsFromLine(line.lineID);
        foreach (var station in stations)
        {
            tools.AddRange(await Fassade.GetToolsFromStation(station.stationID));
        }
        foreach (var tool in tools)
        {
            operations.AddRange(await Fassade.GetOperationsFromTool(tool.toolID));
        }

        var stationTypes = await Fassade.StationTypeRepository.GetAll();
        var toolTypes = await Fassade.ToolTypeRepository.GetAll();
        var toolClasses = await Fassade.ToolClassRepository.GetAll();

        // Excel-Datei erstellen und in MemoryStream speichern
        using var stream = new MemoryStream();
        using (var workbook = new XLWorkbook())
        {
            Fassade.ExcelExport.Export(stream, line, stations.ToArray(), tools.ToArray(), stationTypes.ToArray(), toolTypes.ToArray(), toolClasses.ToArray());
        }

        // Standard-Dateispeicherdialog verwenden
        var fileName = $"ExcelExport-{line.lineName ?? "line"}_{DateTime.Now:yyyyMMdd}.xlsx";
        var result = await FileSaver.Default.SaveAsync(
            fileName,
            stream,
            new CancellationToken()
        );

        if (result.IsSuccessful)
        {
            await Application.Current.MainPage.DisplayAlert("Success", "The file was saved successfully.", "OK");
        }
    }
    catch (Exception ex)
    {
        await Application.Current.MainPage.DisplayAlert("Error", 
            "An error occurred while saving the file: " + ex.Message, "OK");
    }
    
    }
    
    private async Task FilePickJson()
    {
        var line = ActiveContextMenuLine;
        ActiveContextMenuLine = null;

        try
        {
            var json = await Fassade.Export(line);
            var bytes = Encoding.UTF8.GetBytes(json);
            var fileName = $"JsonExport-{line.lineName ?? "line"}_{DateTime.Now:yyyyMMdd}.json";
            var result = await FileSaver.Default.SaveAsync(
                fileName,
                new MemoryStream(bytes),
                new CancellationToken()
            );
            if (result.IsSuccessful)
            {
                await Application.Current.MainPage.DisplayAlert("Success", "The file was saved successfully.", "OK");
            }
        }
        catch (Exception ex)
        {
            await Application.Current.MainPage.DisplayAlert("Error", 
                "An error occurred while saving the file: " + ex.Message, "OK");
        }
    }
}