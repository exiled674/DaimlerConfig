@page "/"

@inject DaimlerConfig.Components.Fassade.Fassade Fassade
@using DaimlerConfig.Components.Models

<h1>Select Station</h1>

<div class="ProjectManager">
    <div class="row">
        <div class="col">
            <form class="search-form">
                <div class="search-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                        <path d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z" />
                    </svg>
                </div>
                <input class="search-input" type="text" placeholder="Search" @oninput="OnSearchTextChanged" value="@searchText">
            </form>
        </div>
        <div class="col">
            <select class="search-input" @onchange="OnSortChanged">
                <option value="date" selected>Sorted by date descending</option>
                <option value="name">Sorted by name ascending</option>
            </select>

        </div>
    </div>
    <div class="projects">
        
        <p class="lineLabel">Lines:</p>
        @if (FilteredLines is not null && FilteredLines.Any())
        {
            foreach (var line in FilteredLines)
            {
                <div class="area-header">
                    <button class="area-title">@line.lineName : (@line.lastModified) </button> 
                    <button class="three-dots-btn">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-three-dots-vertical" viewBox="0 0 16 16">
                            <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
                        </svg>
                    </button>
                </div>
            }
        }
        else
        {
            <p>Keine Lines gefunden.</p>
        }
    </div>

    <div class="row">
        <div class="col">
            <button class="import-button">
                <span class="plus-icon">+</span>
                Import Similar Project
            </button>
        </div>
        <div class="col">
            <button class="import-button">
                <span class="plus-icon">+</span>
                Create Empty Project
            </button>
        </div>
    </div>
</div>

@code {
    private List<Line> AllLines = new();
    private List<Line> FilteredLines = new();
    private string searchText = "";
    private string selectedSort = "date"; // default sort

    protected override async Task OnInitializedAsync()
    {
        var result = await Fassade.LineRepository.GetAll();
        AllLines = result.ToList();
        ApplyFilters();
    }

    private void OnSearchTextChanged(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private void OnSortChanged(ChangeEventArgs e)
    {
        selectedSort = e.Value?.ToString() ?? "date";
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        var filtered = AllLines
            .Where(line => line.lineName.StartsWith(searchText, StringComparison.OrdinalIgnoreCase));


        FilteredLines = selectedSort switch
        {
            "name" => filtered.OrderBy(l => l.lineName).ToList(),
            "date" => filtered.OrderByDescending(l => l.lastModified).ToList(),
            _ => filtered.ToList()
        };
    }
}

