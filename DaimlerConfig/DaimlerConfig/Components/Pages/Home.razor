@page "/"

@inject DaimlerConfig.Components.Fassade.Fassade Fassade
@using DaimlerConfig.Components.Models

<h1>Select Station</h1>

<div class="ProjectManager">
    <!-- Such- und Sort-Form -->
    <div class="row">
        <div class="col">
            <form class="search-form">
                <div class="search-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                        <path d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 
                                 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 
                                 3.09-.59 4.23-1.57l.27.28v.79l5 
                                 4.99L20.49 19l-4.99-5zm-6 0C7.01 
                                 14 5 11.99 5 9.5S7.01 5 9.5 5 
                                 14 7.01 14 9.5 11.99 14 9.5 14z" />
                    </svg>
                </div>
                <input class="search-input"
                       type="text"
                       placeholder="Search"
                       @oninput="OnSearchTextChanged"
                       value="@searchText" />
            </form>
        </div>
        <div class="col">
            <select class="search-input" @onchange="OnSortChanged">
                <option value="date" selected>Sorted by date descending</option>
                <option value="name">Sorted by name ascending</option>
            </select>
        </div>
    </div>

    <!-- Lines -->
    <div class="projects">
        <p class="lineLabel">Lines:</p>
        @if (FilteredLines is not null && FilteredLines.Any())
        {
            foreach (var line in FilteredLines)
            {
                        <div class="area-header">
                    @if (EditingLines.Contains(line))
                    {
                                    <input class="edit-input"
                                           value="@line.lineName"
                                           @onchange="e => ConfirmEdit(line, e)"
                                           autofocus />
                    }
                    else
                    {
                                    <button class="area-title">
                            @line.lineName : (@line.lastModified)
                                    </button>
                    }

                            <div class="dropdown-wrapper" tabindex="0"
                                 @onfocusout="() => CloseMenu(line)">
                                <button class="three-dots-btn"
                                        @onclick="() => ToggleMenu(line)"
                                        aria-expanded="@(IsMenuOpen(line))">
                                    <svg xmlns="http://www.w3.org/2000/svg"
                                         width="20" height="20"
                                         fill="currentColor"
                                         class="bi bi-three-dots-vertical"
                                         viewBox="0 0 16 16">
                                        <path d="M9.5 13a1.5 1.5 0 1 1-3 0 
                                         1.5 1.5 0 0 1 3 0zm0-5a1.5 
                                         1.5 0 1 1-3 0 1.5 1.5 0 0 
                                         1 3 0zm0-5a1.5 1.5 0 1 1-3 
                                         0 1.5 1.5 0 0 1 3 0z"/>
                                    </svg>
                                </button>

                        @if (IsMenuOpen(line))
                        {
                                        <div class="dropdown-menu show">
                                            <div class="dropdown-item" @onclick="() => DeleteLine(line)">
                                                Delete
                                            </div>
                                            <div class="dropdown-item" @onclick="() => DoSomethingElse(line)">
                                                WeißNichMehrWas
                                            </div>
                                        </div>
                        }
                            </div>
                        </div>
            }
        }
        else
        {
                <p>Keine Lines gefunden.</p>
        }
    </div>

    <!-- Buttons unten -->
    <div class="row">
        <div class="col">
            <button class="import-button">
                <span class="plus-icon">+</span>
                Import Similar Project
            </button>
        </div>
        <div class="col">
            <button class="import-button" @onclick="CreateNewLine">
                <span class="plus-icon">+</span>
                Create Empty Project
            </button>
        </div>
    </div>
</div>

<style>
    .dropdown-wrapper {
        position: relative;
        display: inline-block;
        outline: none;
    }
    .three-dots-btn {
        background: none;
        border: none;
        cursor: pointer;
        padding: 5px;
        display: flex;
        align-items: center;
    }
    .three-dots-btn:hover {
        background-color: #f0f0f0;
    }
    .dropdown-menu {
        position: absolute;
        right: 0;
        top: 100%;
        background-color: white;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        min-width: 150px;
        z-index: 1000;
    }
    .dropdown-item {
        padding: 8px 12px;
        cursor: pointer;
        transition: background-color 0.2s;
    }
    .dropdown-item:hover {
        background-color: #f0f0f0;
    }
</style>

@code {
    private List<Line> AllLines = new();
    private List<Line> FilteredLines = new();
    private HashSet<Line> EditingLines = new();
    private string searchText = "";
    private string selectedSort = "date";

    // Für welches Line-Dropdown ist gerade offen?
    private Line? menuOpenForLine;

    protected override async Task OnInitializedAsync()
    {
        var result = await Fassade.LineRepository.GetAll();
        AllLines = result.ToList();
        ApplyFilters();
    }

    private void OnSearchTextChanged(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private void OnSortChanged(ChangeEventArgs e)
    {
        selectedSort = e.Value?.ToString() ?? "date";
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        var filtered = AllLines
            .Where(line => line.lineName.StartsWith(searchText, StringComparison.OrdinalIgnoreCase));

        FilteredLines = selectedSort switch
        {
            "name" => filtered.OrderBy(l => l.lineName).ToList(),
            "date" => filtered.OrderByDescending(l => l.lastModified).ToList(),
            _ => filtered.ToList()
        };
    }

    private void CreateNewLine()
    {
        var newLine = new Line
            {
                lineName = "Enter a name",
                lastModified = DateTime.Now
            };
        AllLines.Insert(0, newLine);
        EditingLines.Add(newLine);
        ApplyFilters();
    }

    private void ConfirmEdit(Line line, ChangeEventArgs e)
    {
        var newName = e.Value?.ToString()?.Trim();
        if (!string.IsNullOrEmpty(newName) && newName != "Enter a name")
        {
            line.lineName = newName;
            line.lastModified = DateTime.Now;
            Fassade.LineRepository.Add(line);
            EditingLines.Remove(line);
            ApplyFilters();
        }
    }

    private void ToggleMenu(Line line)
    {
        menuOpenForLine = menuOpenForLine == line ? null : line;
    }

    private bool IsMenuOpen(Line line)
        => menuOpenForLine == line;

    private void CloseMenu(Line line)
    {
        if (menuOpenForLine == line)
            menuOpenForLine = null;
    }

    private void DeleteLine(Line line)
    {
        AllLines.Remove(line);
        ApplyFilters();
    }

    private void DoSomethingElse(Line line)
    {
        Console.WriteLine($"Extra-Action für {line.lineName}");
    }
}
