@page "/"

@inject DaimlerConfig.Components.Fassade.Fassade Fassade
@inject NavigationManager Navigation

@using DaimlerConfig.Services
@inject SignalRService SignalRService


@using CommunityToolkit.Maui.Storage;
@using System.Text.Json
@using System.IO
@using System.Text
@using Microsoft.Maui.Storage

@inject DirtyManagerService DirtyManagerService



@using DaimlerConfig.Components.Models

<nav class="navbar fixed-top bg-white border-bottom px-5 mx-auto">
    <div class="container-fluid p-0">
        <span class="navbar-brand mb-0 h2">Select a line</span>
    </div>
</nav>


<div class="ProjectManager px-5 mx-auto">
   <div class="projects">
    <p class="lineLabel">Lines:</p>
    <hr/>
    @if (FilteredLines is not null && FilteredLines.Any())
    {
        foreach (var line in FilteredLines)
        {
            <div class="line-div border rounded d-flex align-items-center justify-content-between mb-2 p-0 overflow-visible position-relative">
                @if (EditingLines.Contains(line))
                {
                    <div class="d-flex align-items-center flex-grow-1 p-2">
                        <input class="form-control @(isDuplicateName ? "is-invalid" : "")"
                               value="@line.lineName"
                               @onchange="e => ConfirmEdit(line, e)"
                               autofocus />
                        <button class="btn btn-secondary ms-2" title="Cancel" @onclick="() => CancelEdit(line)">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                                 viewBox="0 0 16 16">
                                <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1
                                   .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646
                                   2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
                            </svg>
                        </button>
                        @if (isDuplicateName)
                        {
                            <div class="invalid-feedback ms-2">The name already exists.</div>
                        }
                    </div>
                }
                else
                {
                        <div class="d-flex align-items-center flex-grow-1 p-2"
                             style="cursor: pointer;"
                             @onclick="@(() => NavigateToLine(line.lineName))">

                            <span class="flex-grow-1">@line.lineName : (@line.lastModified)</span>

                            <div class="dropdown" @onclick:stopPropagation>
                                <button class="btn btn-sm btn-outline-secondary border-0 dropdown-toggle"
                                        @onclick="@(() => ToggleContextMenu(line))">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                                         class="bi bi-three-dots-vertical" viewBox="0 0 16 16">
                                        <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
                                    </svg>
                                </button>

                                @if (ActiveContextMenuLine == line)
                                {
                                    <div class="dropdown-menu show position-absolute end-0" style="z-index: 1000;">
                                        <button class="dropdown-item" @onclick="@(() => StartEditing(line))">Edit</button>
                                        <button class="dropdown-item" @onclick="@(() => DeleteLine(line))">Delete</button>
                                        <button class="dropdown-item" @onclick="FilePick">Export</button>
                                    </div>
                                }
                            </div>
                        </div>
                    }
            </div>
        }
    }
    else
    {
        <p class="text-muted">Keine Lines gefunden.</p>
    }
</div>
    <div>
    <button class="btn btn-block btn-primary" @onclick="CreateNewLine">
                <span class="plus-icon">+</span>
                Create Empty Project
    </button>
    </div>
</div>

@code {
    private List<Line> AllLines = new();
    private List<Line> FilteredLines = new();
    private HashSet<Line> EditingLines = new();
    private string searchText = "";
    private string selectedSort = "date";
    private bool isDuplicateName = false;
    private Line? ActiveContextMenuLine = null;

    private void ToggleContextMenu(Line line)
    {
        if (ActiveContextMenuLine == line)
            ActiveContextMenuLine = null;
        else
            ActiveContextMenuLine = line;
    }

    private void StartEditing(Line line)
    {
        EditingLines.Add(line);
        ActiveContextMenuLine = null;
    }

    private async Task DeleteLine(Line line)
    {
        await Fassade.DeleteLine(line);
        AllLines.Remove(line);
        EditingLines.Remove(line);
        await SignalRService.SendMessageToServer("LineChanged");
        ActiveContextMenuLine = null;
        ApplyFilters();
    }

    protected override async Task OnInitializedAsync()
    {
        SignalRService.RegisterResponseHandler(async (string msg) =>
        {
            await InvokeAsync(async () =>
            {
                var result = await Fassade.GetAllLinesAsync();
                AllLines = result.ToList();
                ApplyFilters();
                StateHasChanged();
            });
        });
        await SignalRService.StartConnectionAsync();

        // Initiales Laden
        var result = await Fassade.GetAllLinesAsync();
        AllLines = result.ToList();
        ApplyFilters();
    }

    private void OnSearchTextChanged(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private void OnSortChanged(ChangeEventArgs e)
    {
        selectedSort = e.Value?.ToString() ?? "date";
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        var filtered = AllLines
            .Where(line => line.lineName.StartsWith(searchText, StringComparison.OrdinalIgnoreCase));

        FilteredLines = selectedSort switch
        {
            "name" => filtered.OrderBy(l => l.lineName).ToList(),
            "date" => filtered.OrderByDescending(l => l.lastModified).ToList(),
            _ => filtered.ToList()
        };
    }

    private void CreateNewLine()
    {
        var newLine = new Line
            {
                lineName = "Enter a name",
                lastModified = DateTime.Now
            };
        AllLines.Insert(0, newLine);
        EditingLines.Add(newLine);
        ApplyFilters();

    }

    private async Task ConfirmEdit(Line line, ChangeEventArgs e)
    {
        var newName = e.Value?.ToString()?.Trim();
        isDuplicateName = await Fassade.LineExistsByName(newName);

        if (!string.IsNullOrEmpty(newName) && newName != "Enter a name" && !isDuplicateName)
        {
            line.lineName = newName;
            line.lastModified = DateTime.Now;

            if (line.lineID == 0) // ❗ prüft, ob es eine neue Line ist
            {
                await Fassade.LineRepository.Add(line);

            }
            else
            {
                await Fassade.LineRepository.Update(line);
            }
            // SignalR-Nachricht senden
            await SignalRService.SendMessageToServer("LineChanged");
            EditingLines.Remove(line);
            ApplyFilters();
        }
    }


    private void CancelEdit(Line line)
    {
        if (line.lineName == "Enter a name")
        {
            // Bei neu erstellten Lines: löschen
            AllLines.Remove(line);
        }

        EditingLines.Remove(line);
        isDuplicateName = false;
        ApplyFilters();
    }

    private void NavigateToLine(string lineName)
    {
        Navigation.NavigateTo($"/line/{Uri.EscapeDataString(lineName)}");
    }

    private async Task FilePick()
    {
        ActiveContextMenuLine = null;


        var json = await Fassade.Export();
        var bytes = Encoding.UTF8.GetBytes(json);
        var result = await FileSaver.Default.SaveAsync(
                "line.json",
                new MemoryStream(bytes),
                new CancellationToken()
            );
    }
}