@page "/line/{lineName}"

@inject DaimlerConfig.Components.Fassade.Fassade Fassade

@using DaimlerConfig.Components.Models

<body>
    <!-- Navbar -->
    <nav class="navbar fixed-top bg-white border-bottom">
        <div class="container-fluid">
            <span class="navbar-brand mb-0 h2">Project: Area_B02_Main</span>
        </div>
    </nav>


    <div class="d-flex sidebar bg-white">
        <!-- Sidebar -->
        <aside id="sidebar" class="@SidebarClass border-end ">

            <ul class="sidebar-nav p-0">

                <li class="sidebar-item">
                    <a href="/" class="sidebar-link">
                        <span>Home</span>
                    </a>
                </li>
                <li class="sidebar-header">
                    Stations
                </li>

                @foreach (var station in stations)
                {
                    <li class="sidebar-item">
                        <a  class="sidebar-link @(selectedStation?.stationID == station.stationID ? "active" : "")"
                        @onclick="() => { SelectStation(station); ToggleStationFormular(false); }">
                            <span>@station.stationName</span>
                        </a>
                    </li>
                }


                <li class="sidebar-item">
                    <a  class="sidebar-link" @onclick="() => ToggleStationFormular(true)">
                        <i class="lni lni-plus"></i>
                        <span>Add Station</span>
                    </a>
                </li>
            </ul>
        </aside>

        <!-- Sidebar ends-->
        <!-- Main Content -->
        <div class="main">
            <nav class="navbar navbar-expand">
                <button class="toggler-btn" @onclick="ToggleSidebar" type="button">
                    <i class="lni lni-menu-hamburger-1"></i>
                </button>
                <h5><span>@line?.lineName</span></h5>
            </nav>
            <main class="p-3 pb-0 d-flex gap-3">

                <!-- Linke Spalte: Tools und Operationen -->
                <div class="tool-operation-panel" style="width: 500px;">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h6>Tools and Operations</h6>
                        <button class="btn btn-primary btn-sm" @onclick="ToggleToolFormular">+ Tool</button>
                    </div>

                    <div id="toolsList">
                        @if (selectedStation == null)
                        {
                            <p>Bitte eine Station auswählen.</p>
                        }
                        else if (!tools.Any())
                        {
                            <p>Keine Tools für @selectedStation.stationName gefunden.</p>
                        }
                        else
                        {
                            @foreach (var tool in tools)
                            {
                                <div class="tool-section" data-tool-id="@tool.toolID">
                                    <div class="tool-header d-flex justify-content-between align-items-center">
                                        <span class="clickable" @onclick="@(() => SelectTool(tool))">@tool.toolShortname</span>
                                        <div>
                                            <button class="btn btn-secondary btn-sm mr-2">+</button>
                                        </div>
                                    </div>

                                    @foreach (var operation in allOperations.Where(op => op.toolID == tool.toolID))
                                    {
                                        <div class="operation-section d-flex justify-content-between align-items-center">
                                            <span class="clickable">@operation.operationShortname</span>
                                            <button class="btn btn-secondary btn-sm">Edit</button>
                                        </div>
                                    }
                                </div>
                            }
                        }
                    </div>
                </div>

                <!-- Rechte Spalte: Content -->
                <div class="content-panel flex-fill">
                    @if (showToolFormular)
                    {
                        <ToolFormular />
                    }

                    @if (showOperationFormular)
                    {
                        <OperationFormular />
                    }

                    @if (showStationFormular && selectedStation != null)
                    {
                        <StationFormular SelectedStation="selectedStation" OnUpdated="ReloadStations" />
                    }


                </div>
            </main>
        </div>

    </div>


</body>


@code {

    #region SideBar
    private string SidebarClass { get; set; } = string.Empty;
    private void ToggleSidebar()
    {
        if (SidebarClass.Contains("collapsed"))
            SidebarClass = string.Empty;
        else
            SidebarClass = "collapsed";
    }
    #endregion




    #region Line
    [Parameter]
    public string lineName { get; set; } = "";

    private Line? line;
    #endregion




    #region Stations
    private IEnumerable<Station> stations = Enumerable.Empty<Station>();
    private Station? selectedStation;

    private async Task SelectStation(Station station)
    {
        selectedStation = station;


        tools = await Fassade.GetToolsFromStation(station.stationID);



        StateHasChanged(); 
    }
    #endregion



    #region Tools
    private IEnumerable<Tool> tools = Enumerable.Empty<Tool>();
    private Tool? selectedTool;

    private async Task SelectTool(Tool tool)
    {
        selectedTool = tool;

        operations = await Fassade.GetOperationsFromTool(tool.toolID);



        StateHasChanged();
    }

    #endregion

    #region Operation
    private IEnumerable<Operation> operations = Enumerable.Empty<Operation>();
    private IEnumerable<Operation> allOperations; 
    #endregion





    protected override async Task OnInitializedAsync()
    {

        line = await Fassade.GetLineByName(lineName);
       

        if (line != null)
        {

            stations = await Fassade.GetStationsFromLine(line.lineID);
			if (stations != null)
        {
            allOperations = await Fassade.GetAllOperations();
        }
        }
    }

    private bool showToolFormular = false;
    private bool showOperationFormular = false;
    private bool showStationFormular = false;

    private void ToggleToolFormular()
    {
        showToolFormular = !showToolFormular;
        showOperationFormular = false; 
        showStationFormular = false;
    }



    <!--
    private void OpenOperationFormular(int toolId)
    {
        var newOperation = new Operation
            {
                operationID = GenerateOperationId(),
                operationShortname = newOperation.operationShortname,
                toolID = toolId
            };

        // Achtung: tools ist ein IEnumerable → wir brauchen eine Liste zum Hinzufügen
        operations = operations.Append(newOperation).ToList();

        showOperationFormular = true;
        showToolFormular = false;
        showStationFormular = false;
        // Du kannst hier auch den aktuellen Tool-Id speichern, wenn nötig
    }

    public void ToggleStationFormular(bool testBool)
    {
        if(testBool) {
            selectedStation = new Station();
        }
        showStationFormular = true;
        showToolFormular = false;
        showOperationFormular = false;
    }

    private async Task ReloadStations()
    {
        if (line != null)
        {
            stations = await Fassade.GetStationsFromLine(line.lineID);
            
            StateHasChanged(); 
        }
    }

}
