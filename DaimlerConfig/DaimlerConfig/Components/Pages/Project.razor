@page "/line/{lineName}"

@using DaimlerConfig.Services
@inject SignalRService SignalRService
@inject DirtyManagerService DirtyManagerService
@inject AppLifecycleService LifecycleService

@inject DaimlerConfig.Components.Fassade.Fassade Fassade

@using DaimlerConfig.Components.Models
@inject NavigationManager Navigation
@inject NavigationStateService NavState
@inject SelectionStateService SelectionState
@inject UsernameService UsernameService

@using Microsoft.JSInterop
@inject IJSRuntime JS;

<body>


    <!-- Navbar -->
    <nav class="navbar fixed-top bg-white border-bottom">
        <div class="container-fluid">
            <span class="navbar-brand mb-0 h2">Project: @line?.lineName</span>
            @UsernameService.Username
        </div>
    </nav>

    <div class="d-flex sidebar bg-white">
        <!-- Sidebar -->
        <aside id="sidebar" class="@SidebarClass border-end ">

            <ul class="sidebar-nav p-0">
                <li class="sidebar-item">
                    <a href="/" class="sidebar-link" @onclick="() => UnlockTool()">
                        <span>Home</span>
                    </a>
                </li>
                <li class="sidebar-header">
                    Stations
                </li>

                @foreach (var station in stations)
                {
                    <li class="sidebar-item justify-content-between draggable">
                        <a class="sidebar-link clickable d-flex align-items-center justify-content-between @(selectedStation?.stationID == station.stationID ? "active stationSelected" : "")"
                        @onclick="() => { SelectStation(station); ToggleStationFormular(false); }">

                            <div class="d-flex align-items-center">
                                <Badge colour="@GetBadgeColour(station.Status)"/>
                                <span class="ms-2">@station.assemblystation</span>
                            </div>

                            <div class=" ms-2">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                                class="bi bi-grip-vertical" viewBox="0 0 16 16">
                                    <path d="M7 2a1 1 0 1 1-2 0 1 1 0 0 1 2 0m3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0M7 5a1 1 0 1 1-2 0 1 1 0 0 1 2 0m3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0M7 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0m3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0m-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0m3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0m-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0m3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0" />
                                </svg>
                            </div>
                        </a>
                    </li>
                }

                <li class="sidebar-item">
                    <a class="sidebar-link clickable" @onclick="() => ToggleStationFormular(true)">
                        <i class="lni lni-plus"></i>
                        <span>Add Station</span>
                    </a>
                </li>
            </ul>
        </aside>

        <!-- Sidebar ends-->
        <!-- Main Content -->
        <div class="main">
            <nav class="navbar navbar-expand">
                <button class="toggler-btn" @onclick="ToggleSidebar" type="button">
                    <i class="lni lni-menu-hamburger-1"></i>
                </button>
                <h5><span>Current Station: @(selectedStation != null ? selectedStation.assemblystation : "Please choose a station")</span></h5>
            </nav>
            <main class="p-3 pb-0 d-flex gap-3">

                <!-- Linke Spalte: Tools und Operationen -->
                <div class="tool-operation-panel p-5" style="width: 500px;">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h6>Tools and Operations</h6>
                        @if (selectedStation != null)
                        {
                            if (copiedTool != null)
                            {
                                <button class="btn btn-primary btn-sm" @onclick="() => InsertTool()">Insert Tool</button>
                            }
                            <button class="btn btn-primary btn-sm" @onclick="() => ToggleToolFormular(true)">+ Tool</button>
                        }

                    </div>

                    <div id="toolsList">
                        @if (selectedStation == null)
                        {
                            <p>Please choose a station.</p>
                        }
                        else if (!tools.Any())
                        {
                            <p>No tools found.</p>
                        }
                        else
                        {
                            @foreach (var tool in tools)
                            {
                                <div class="tool-section tool-draggable" data-tool-id="@tool.toolID">
                                    <div class="tool-header d-flex justify-content-between align-items-center">
                                        <button class="btn btn-secondary btn-sm mr-2"@onclick="() =>CycleColour(tool)"><Badge colour="@GetBadgeColour(tool.Status)"/></button>
                                        <span class="clickable" @onclick="() => { SelectTool(tool); ToggleToolFormular(false); }">@tool.toolShortname</span>
                                        <div>
                                            <button class="btn btn-secondary btn-sm mr-2" @onclick="@(() => CloneTool(tool))">copy</button>
                                            <button class="btn btn-secondary btn-sm mr-2" @onclick="() => { SelectTool(tool); ToggleOperationFormular(true); }">+</button>
                                            @if (selectedTool != null)
                                            {
                                                if (copiedOperation != null)
                                                {
                                                    <button class="btn btn-primary btn-sm" @onclick="() => { SelectTool(tool); InsertOperation(); }">Insert Operation</button>
                                                }
                                            }
                                            <!-- Drag handle for tools -->
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                                            class="bi bi-grip-vertical drag-handle" viewBox="0 0 16 16">
                                                <path d="M7 2a1 1 0 1 1-2 0 1 1 0 0 1 2 0m3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0M7 5a1 1 0 1 1-2 0 1 1 0 0 1 2 0m3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0M7 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0m3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0m-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0m3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0m-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0m3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0"/>
                                            </svg>
                                        </div>
                                    </div>
                                    @if (allOperations.Where(op => op.toolID == tool.toolID).Any())
                                    {
                                        <div class="operation-list">
                                            @foreach (var operation in allOperations.Where(op => op.toolID == tool.toolID))
                                            {
                                                <div class="operation-section operation-draggable d-flex justify-content-between align-items-center" data-operation-id="@operation.operationID">
                                                    <button class="btn btn-secondary btn-sm mr-2"@onclick="() =>CycleColour(operation)"><Badge colour="@GetBadgeColour(operation.Status)"/></button>
                                                    <span class="clickable" @onclick="() => { OnOperationClicked(operation, false); }">@operation.operationShortname</span>
                                                    <button class="btn btn-secondary btn-sm mr-2" @onclick="@(() => CloneOperation(operation))">copy</button>
                                                    <!-- Drag handle for operations -->
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="currentColor"
                                                    class="bi bi-grip-vertical drag-handle-small" viewBox="0 0 16 16">
                                                        <path d="M7 2a1 1 0 1 1-2 0 1 1 0 0 1 2 0m3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0M7 5a1 1 0 1 1-2 0 1 1 0 0 1 2 0m3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0M7 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0m3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0m-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0m3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0m-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0m3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0"/>
                                                    </svg>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            }
                        }
                    </div>
                </div>

                <!-- Rechte Spalte: Content -->
                <div class="content-panel flex-fill">
                    @if (showToolFormular && toolFormularModel != null)
                    {

                        <ToolFormular @ref="toolFormular" ReadOnly="toolReadOnly" SelectedTool="@toolFormularModel" CurrentUser=@UsernameService.Username ToolVersions=@toolVersions />

                    }

                    @if (showOperationFormular && operationFormularModel != null)
                    {

                        <OperationFormular @ref="operationFormular" ReadOnly="operationReadOnly" SelectedOperation="@operationFormularModel" CurrentUser="@UsernameService.Username" OperationVersions=operationVersions />



                    }

                    @if (showStationFormular && selectedStation != null)
                    {
                        <StationFormular @ref="stationFormular" SelectedStation="@stationFormularModel" />
                    }
                </div>
            </main>
        </div>

    </div>
    @if (showPopup)
    {
        <SavePopup OnDismissChange="@HandleDismiss" OnSaveChange="@HandleSave"></SavePopup>
    }
</body>

@code {


    //private readonly string currentUser = DaimlerConfig.MauiProgram.Username;


    protected override void OnParametersSet()
    {


    }

    private StationFormular? stationFormular;
    private ToolFormular? toolFormular;
    private OperationFormular? operationFormular;

    #region SavePopup
    private bool showPopup = false;
    private async Task HandleDismiss()
    {
        showPopup = false;

        if (DirtyManagerService.dirtyEntity == "Station") stationFormular.ResetStation();
        if (DirtyManagerService.dirtyEntity == "Tool") toolFormular.ResetTool();
        if (DirtyManagerService.dirtyEntity == "Operation") operationFormular.ResetOperation();
        DirtyManagerService.setClean();

        if(pendingStation != null)
        {
            await SelectStation(pendingStation);
            await ToggleStationFormular(false);
        }
    }

    private async Task HandleSave()
    {
        showPopup = false;


        if (stationFormular != null)
        {
            if(await stationFormular.ValidateData() == true)
            {
                await stationFormular.UpdateStationAsync();
            }
            else
            {
                await stationFormular.ResetStation();
            }
			
        }



        if (toolFormular != null)
        {
            if (await toolFormular.ValidateData() == true)
            {
                await toolFormular.UpdateToolAsync();
            }
            else
            {
                await toolFormular.ResetTool();
            }
        }


        if (operationFormular != null)
        {
            if (await operationFormular.ValidateData() == true)
            {
                await operationFormular.UpdateOperationAsync();
            }
            else
            {
                await operationFormular.ResetOperation();
            }
        }
        DirtyManagerService.setClean();

        if (pendingStation != null)
        {
            await SelectStation(pendingStation);
            await ToggleStationFormular(false);
        }

    }
    #endregion

    #region SideBar

    private string SidebarClass { get; set; } = string.Empty;
    private void ToggleSidebar()
    {
        if (SidebarClass.Contains("collapsed"))
            SidebarClass = string.Empty;
        else
            SidebarClass = "collapsed";
    }
    #endregion

    #region Line
    [Parameter]
    public string lineName { get; set; } = "";
    private Line? line;
    #endregion

    #region Stations
    private IEnumerable<Station> stations = Enumerable.Empty<Station>();
    private Station? selectedStation;
    private bool showStationFormular = false;
    private Station? pendingStation;

    private async Task SelectStation(Station station)
    {
        if (DirtyManagerService.IsDirty().Result == true)
        {
            pendingStation = station;
            selectedStation = stationFormularModel;
            showPopup = true;
            return;
        }
        else
        {
            pendingStation = null;
            selectedStation = station;

            await UnlockTool();
            selectedTool = await CreateDummyTool();

            await UnlockOperation();
            selectedOperation = await CreateDummyOP();
            var xy = await Fassade.GetToolsFromStation(station.stationID);
            tools = xy;

            allOperations = await Fassade.GetAllOperations();
            tools = xy;
            SelectionState.SaveSelection(stationID: station.stationID);
            
            StateHasChanged();
        }

    }

    private Station? stationFormularModel;

    private async Task ToggleStationFormular(bool isNewStation)

    {
        if (isNewStation)
        {
            await UnlockOperation();
            await UnlockTool();
            selectedStation = new Station { lineID = line.lineID, stationTypeID = 1 };
            stationFormularModel = selectedStation.Clone();
            stationFormularModel.lineID = selectedStation.lineID;
            tools = Enumerable.Empty<Tool>();
            allOperations = Enumerable.Empty<Operation>();

        }
        else if (selectedStation != null)
        {
            // Kopie erstellen!
            stationFormularModel = selectedStation.Clone();
            stationFormularModel.stationID = selectedStation.stationID;
            stationFormularModel.lineID = selectedStation.lineID;
        }
        showStationFormular = true;
        showToolFormular = false;
        showOperationFormular = false;
    }

    #endregion

    #region Tools
    private IEnumerable<Tool> tools = Enumerable.Empty<Tool>();
    private Tool? selectedTool;
    private Tool? toolFormularModel; // NEU: Separate Kopie für das Formular
    private IEnumerable<ToolVersion> toolVersions = Enumerable.Empty<ToolVersion>();

    private bool toolReadOnly = false;
    private bool showToolFormular = false;

    private async Task SelectTool(Tool tool)
    {
        if (DirtyManagerService.IsDirty().Result == true)
        {
            selectedTool = toolFormularModel;
            showPopup = true;
            return;
        }
        else
        {
            if (selectedTool != null && tool.toolID != selectedTool.toolID) await UnlockTool();
            selectedTool = tool;

            toolFormularModel = selectedTool.Clone();
            toolFormularModel.toolID = selectedTool.toolID;
            toolFormularModel.stationID = selectedTool.stationID;
            toolReadOnly = (selectedTool.isLocked ?? false) && tool.lockedBy != UsernameService.Username;


            await UnlockOperation();

            selectedOperation = await CreateDummyOP();

            tools = await Fassade.GetToolsFromStation(selectedStation.stationID);

            if (tool.toolID > 0) // Dummy-Tools haben toolID = 0
            {
                SelectionState.SaveSelection(stationID: selectedStation.stationID, toolID: tool.toolID);
            }

            toolVersions = await Fassade.GetToolVersions(selectedTool.toolID.Value);
            StateHasChanged();
        }
    }

    private async Task ToggleToolFormular(bool isNewTool)
    {
        if (selectedStation == null)
        {
            // Optional: Benutzerfeedback, z.B. eine Meldung anzeigen
            return;
        }


        if (isNewTool)
        {
            await UnlockOperation();
            await UnlockTool();
            selectedTool = await CreateDummyTool();
            toolFormularModel = selectedTool.Clone();
            toolFormularModel.stationID = selectedStation.stationID;
            toolReadOnly = false;
        }
        else if (selectedTool != null)
        {
            toolFormularModel = selectedTool.Clone();
            toolFormularModel.toolID = selectedTool.toolID;
            toolFormularModel.stationID = selectedTool.stationID;
        }

        showToolFormular = true;
        showOperationFormular = false;
        showStationFormular = false;

        if (!isNewTool && selectedTool != null && selectedTool.toolID > 0)
        {
            SelectionState.SaveSelection(
                stationID: selectedStation.stationID,
                toolID: selectedTool.toolID
            );
        }

        StateHasChanged();
    }


    public async Task UnlockTool()
    {
        if (selectedTool != null && selectedTool.lockedBy == UsernameService.Username && selectedTool.isLocked == true)
        {
            selectedTool.isLocked = false;
            selectedTool.lockedBy = null;
            await Fassade.UpdateTool(selectedTool);

            await SignalRService.SendMessageToServer($"ToolUnlocked;{selectedTool.toolID}");
        }
    }

    public async Task<Tool> CreateDummyTool()
    {
        return new Tool
            {
                stationID = selectedStation.stationID,
                toolTypeID = 0,
                toolClassID = 0,
                isLocked = false
            };
    }
    #endregion

    #region Operation
    private IEnumerable<Operation> operations = Enumerable.Empty<Operation>();
    private IEnumerable<Operation> allOperations;
    private Operation? selectedOperation;

    private Operation? operationFormularModel; // NEU: Separate Kopie für das Formular

    private IEnumerable<OperationVersion> operationVersions = Enumerable.Empty<OperationVersion>();
    private bool operationReadOnly = false;
    private bool showOperationFormular = false;

    private async Task SelectOperation(Operation operation)
    {
        if (DirtyManagerService.IsDirty().Result)
        {
            selectedOperation = operationFormularModel;
            showPopup = true;
            return;
        }
        else
        {
            var opsList = allOperations.ToList();
            var idx = opsList.FindIndex(o => o.operationID == operation.operationID);
            if (idx >= 0)
            {
                var freshOp = await Fassade.GetOperation(operation.operationID);
                if (freshOp != null)
                    opsList[idx] = freshOp;
            }
            allOperations = opsList.AsEnumerable();

            if (selectedOperation != null && selectedOperation.operationID != operation.operationID)
                await UnlockOperation();

            selectedOperation = operation;
            operationReadOnly = (selectedOperation.isLocked ?? false) && operation.lockedBy != UsernameService.Username;

            await UnlockTool();
            selectedTool = await Fassade.GetTool(selectedOperation.toolID);

            if (operation.operationID > 0)
            {
                SelectionState.SaveSelection(
                    stationID: selectedStation.stationID,
                    toolID: selectedTool.toolID,
                    operationID: operation.operationID
                );
            }

            operationVersions = await Fassade.GetOperationVersions(selectedOperation.operationID.Value);

            showOperationFormular = true;
            showToolFormular = false;
            showStationFormular = false;
            StateHasChanged();  

        }
    }

    private async Task ToggleOperationFormular(bool isNewOperation)
    {
        if (isNewOperation)
        {
            await UnlockOperation();
            await UnlockTool();
            selectedOperation = await CreateDummyOP();
            operationFormularModel = selectedOperation.Clone(); // Kopie für neue Operation
            operationFormularModel.toolID = selectedTool.toolID;
            operationReadOnly = false;
        }
        else if (selectedOperation != null)
        {
            // WICHTIG: Kopie erstellen für bestehende Operation
            operationFormularModel = selectedOperation.Clone();
            operationFormularModel.operationID = selectedOperation.operationID;
            operationFormularModel.toolID = selectedOperation.toolID;
        }

        showOperationFormular = true;
        showToolFormular = false;
        showStationFormular = false;

        if (!isNewOperation && selectedOperation != null && selectedOperation.operationID > 0)
        {
            SelectionState.SaveSelection(
                stationID: selectedStation.stationID,
                toolID: selectedTool.toolID,
                operationID: selectedOperation.operationID
            );
        }

        StateHasChanged();
    }

    public async Task OnOperationClicked(Operation operation, bool isNewOperation)
    {
        await SelectOperation(operation);
        await ToggleOperationFormular(isNewOperation);
    }

    public async Task UnlockOperation()
    {
        if (selectedOperation != null && selectedOperation.lockedBy == UsernameService.Username && selectedOperation.isLocked == true)
        {
            selectedOperation.isLocked = false;
            selectedOperation.lockedBy = null;
            await Fassade.UpdateOperation(selectedOperation);

            await SignalRService.SendMessageToServer($"OperationUnlocked;{selectedOperation.operationID}");
        }
    }

    public async Task<Operation> CreateDummyOP()
    {
        return new Operation
            {
                toolID = selectedTool?.toolID,
                decisionClassID = 1,
                savingClassID = 1,
                generationClassID = 1,
                verificationClassID = 1,
                qGateID = 1,
                isLocked = false,
            };
    }
    #endregion

    protected override async Task OnInitializedAsync()
    {

        UsernameService.PropertyChanged += (_, __) => InvokeAsync(StateHasChanged);


        LifecycleService.OnAppClosing += HandleAppClosingAsync;
        SignalRService.RegisterResponseHandler(async (string msg) =>
    {
        await InvokeAsync(async () =>
        {
            if (msg.StartsWith("OperationUnlocked"))
            {
                var parts = msg.Split(';');
                var operationID = int.Parse(parts[1]);
                var operationList = allOperations.ToList();
                var idx = operationList.FindIndex(s => s.operationID == operationID);
                if (idx >= 0)
                {
                    var updatedOperation = await Fassade.GetOperation(operationID);
                    if (updatedOperation != null)
                    {
                        operationList[idx] = updatedOperation;
                        allOperations = operationList.AsEnumerable();
                        if (showOperationFormular && selectedOperation?.operationID == operationID)
                        {
                            selectedOperation = updatedOperation;
                            operationFormularModel = selectedOperation.Clone();
                            operationFormularModel.operationID = selectedOperation.operationID;
                            operationFormularModel.toolID = selectedOperation.toolID;
                        }
                        StateHasChanged();
                    }
                }

                if ( selectedOperation != null && selectedOperation?.operationID == operationID)
                {
                    operationReadOnly = false;
                }
            }
            else if (msg.StartsWith("OperationLocked"))
            {

                var parts = msg.Split(';');
                var operationID = int.Parse(parts[1]);
                var operationList = allOperations.ToList();
                var idx = operationList.FindIndex(s => s.operationID == operationID);
                if (idx >= 0)
                {
                    var updatedOperation = await Fassade.GetOperation(operationID);
                    if (updatedOperation != null)
                    {
                        operationList[idx] = updatedOperation;
                        allOperations = operationList.AsEnumerable();
                        if (showOperationFormular && selectedOperation?.operationID == operationID)
                        {
                            selectedOperation = updatedOperation;
                            operationFormularModel = selectedOperation.Clone();
                            operationFormularModel.operationID = selectedOperation.operationID;
                            operationFormularModel.toolID = selectedOperation.toolID;
                        }
                        StateHasChanged();
                    }
                }

                if ( selectedOperation != null && selectedOperation?.lockedBy != UsernameService.Username && selectedOperation.operationID == operationID)

                {

                    if (selectedOperation != null && selectedOperation?.lockedBy != UsernameService.Username && selectedOperation.operationID == operationID)
                    {
                        operationReadOnly = true;
                    }
                }
            }
            if (msg.StartsWith("ToolUnlocked"))
            {
                var parts = msg.Split(';');
                var toolID = int.Parse(parts[1]);

                var toolList = tools.ToList();
                var idx = toolList.FindIndex(s => s.toolID == toolID);

                if (idx >= 0)
                {

                    var updatedTool = await Fassade.GetTool(toolID);
                    if (updatedTool != null )
                    {
                        toolList[idx] = updatedTool;
                        tools = toolList.AsEnumerable();
                        if (showToolFormular && selectedTool?.toolID == toolID)
                        {
                            selectedTool = updatedTool;
                            toolFormularModel = selectedTool.Clone();
                            toolFormularModel.toolID = selectedTool.toolID;
                            toolFormularModel.stationID = selectedTool.stationID;

                        }
                        StateHasChanged();
                    }

                }

                if (selectedTool != null && selectedTool?.toolID == toolID)
                {
                    toolReadOnly = false;
                }
            }
            else if (msg.StartsWith("ToolLocked"))
            {

                var parts = msg.Split(';');
                var toolID = int.Parse(parts[1]);

                var toolList = tools.ToList();
                var idx = toolList.FindIndex(s => s.toolID == toolID);

                if (idx >= 0)

                {

                    var updatedTool = await Fassade.GetTool(toolID);
                    if (updatedTool != null)
                    {
                        toolList[idx] = updatedTool;
                        tools = toolList.AsEnumerable();
                        if (showToolFormular && selectedTool?.toolID == toolID)
                        {
                            selectedTool = updatedTool;
                            toolFormularModel = selectedTool.Clone();
                            toolFormularModel.toolID = selectedTool.toolID;
                            toolFormularModel.stationID = selectedTool.stationID;

                        }
                        StateHasChanged();
                    }

                }

                if (selectedTool != null && selectedTool?.lockedBy != UsernameService.Username && selectedTool.toolID == toolID)
                {
                    toolReadOnly = true;
                }
            }

            else
            {
                switch (msg)
                {
                    case var msg when msg.StartsWith("StationUpdated;"):
                        {
                            var parts = msg.Split(';');
                            var stationID = int.Parse(parts[1]);

                            var stationList = stations.ToList();
                            var idx = stationList.FindIndex(s => s.stationID == stationID);

                            if (idx >= 0)
                            {

                                var updatedStation = await Fassade.GetStation(stationID);
                                if (updatedStation != null)
                                {
                                    stationList[idx] = updatedStation;
                                    stations = stationList.AsEnumerable();
                                    if (showStationFormular && selectedStation?.stationID == stationID)
                                    {
                                        selectedStation = updatedStation;
                                        stationFormularModel = selectedStation.Clone();
                                        stationFormularModel.stationID = selectedStation.stationID;
                                        stationFormularModel.lineID = selectedStation.lineID;

                                    }
                                    StateHasChanged();
                                }

                            }
                            break;
                        }

                    case var msg when msg.StartsWith("StationCreated;"):
                        {
                            var parts = msg.Split(';');
                            var stationID = int.Parse(parts[1]);
                            var stationList = stations.ToList();


                            var newStation = await Fassade.GetStation(stationID);
                            if (newStation != null && !stationList.Any(s => s.stationID == stationID))
                            {

                                stationList.Add(newStation);
                                stations = stationList.AsEnumerable();


                                if (newStation.modifiedBy.Trim() == UsernameService.Username)
                                {
                                    selectedStation = new Station { lineID = line.lineID, stationTypeID = 1 };
                                    stationFormularModel = selectedStation.Clone();
                                    stationFormularModel.lineID = selectedStation.lineID;
                                    tools = Enumerable.Empty<Tool>();
                                    allOperations = Enumerable.Empty<Operation>();
                                }
                                StateHasChanged();
                            }
                            break;
                        }

                    case var msg when msg.StartsWith("StationDeleted;"):
                        {
                            var parts = msg.Split(';');
                            var stationID = int.Parse(parts[1]);
                            var stationList = stations.ToList();

                            var idx = stationList.FindIndex(s => s.stationID == stationID);
                            if (idx >= 0)
                            {
                                stationList.RemoveAt(idx);
                                stations = stationList.AsEnumerable();

                                if (selectedStation?.stationID == stationID)
                                {
                                    selectedStation = null;
                                    showStationFormular = false;
                                }

                                StateHasChanged();
                            }
                            break;
                        }

                    case var msg when msg.StartsWith("ToolUpdated;"):
                        {
                            var parts = msg.Split(';');
                            var toolID = int.Parse(parts[1]);

                            var toolList = tools.ToList();
                            var idx = toolList.FindIndex(s => s.toolID == toolID);

                            if (idx >= 0)
                            {

                                var updatedTool = await Fassade.GetTool(toolID);
                                if (updatedTool != null)
                                {
                                    toolList[idx] = updatedTool;
                                    tools = toolList.AsEnumerable();
                                    if (showToolFormular && selectedTool?.toolID == toolID)
                                    {
                                        selectedTool = updatedTool;
                                        toolFormularModel = selectedTool.Clone();
                                        toolFormularModel.toolID = selectedTool.toolID;
                                        toolFormularModel.stationID = selectedTool.stationID;

                                    }
                                    StateHasChanged();
                                }

                            }
                            break;
                        }

                    case var msg when msg.StartsWith("ToolCreated;"):
                        {
                            var parts = msg.Split(';');
                            var toolID = int.Parse(parts[1]);
                            var toolList = tools.ToList();
                            var newTool = await Fassade.GetTool(toolID);
                            if (newTool != null && !toolList.Any(s => s.toolID == toolID) && newTool.stationID == selectedStation.stationID)
                            {
                                toolList.Add(newTool);
                                tools = toolList.AsEnumerable();


                                if(newTool.modifiedBy == UsernameService.Username)
                                {
                                    selectedTool = await CreateDummyTool();
                                    toolFormularModel = selectedTool.Clone();
                                    toolFormularModel.stationID = selectedStation.stationID;
                                }
                                StateHasChanged();
                            }
                            break;
                        }

                    case var msg when msg.StartsWith("ToolDeleted;"):
                        {
                            var parts = msg.Split(';');
                            var toolID = int.Parse(parts[1]);
                            var toolList = tools.ToList();
                            var idx = toolList.FindIndex(s => s.toolID == toolID);
                            if (idx >= 0)
                            {
                                toolList.RemoveAt(idx);
                                tools = toolList.AsEnumerable();
                                if (selectedTool?.toolID == toolID)
                                {
                                    selectedTool = null;
                                    showToolFormular = false;
                                }
                                StateHasChanged();
                            }
                            break;
                        }

                    case var msg when msg.StartsWith("ToolClassChanged;"):
                        {
                            var id = msg.Split(';')[1];
                            var operations = Enumerable.Empty<Operation>();
                            if (selectedTool != null)
                            {
                                operations = await Fassade.GetOperationsFromTool(selectedTool.toolID);
                            }
                            if (operations != null)
                            {
                                foreach (var op in operations)
                                {
                                    op.decisionClassID = 1;
                                    op.verificationClassID = 0;
                                    op.savingClassID = 0;
                                    op.generationClassID = 0;
                                    await Fassade.UpdateOperation(op);
                                    var operationID = op.operationID;
                                    var operationList = allOperations.ToList();
                                    var idx = operationList.FindIndex(s => s.operationID == operationID);
                                    if (idx >= 0)
                                    {
                                        var updatedOperation = await Fassade.GetOperation(operationID);
                                        if (updatedOperation != null)
                                        {
                                            operationList[idx] = updatedOperation;
                                            allOperations = operationList.AsEnumerable();
                                            if (showOperationFormular && selectedOperation?.operationID == operationID)
                                            {
                                                selectedOperation = updatedOperation;
                                                operationFormularModel = selectedOperation.Clone();
                                                operationFormularModel.operationID = selectedOperation.operationID;
                                                operationFormularModel.toolID = selectedOperation.toolID;
                                            }
                                            StateHasChanged();
                                        }
                                    }
                                }

                            }
                            break;
                        }

                    case var msg when msg.StartsWith("OperationUpdated;"):
                        {
                            var parts = msg.Split(';');
                            var operationID = int.Parse(parts[1]);
                            var operationList = allOperations.ToList();
                            var idx = operationList.FindIndex(s => s.operationID == operationID);
                            if (idx >= 0)
                            {
                                var updatedOperation = await Fassade.GetOperation(operationID);
                                if (updatedOperation != null)
                                {
                                    operationList[idx] = updatedOperation;
                                    allOperations = operationList.AsEnumerable();
                                    if (showOperationFormular && selectedOperation?.operationID == operationID)
                                    {
                                        selectedOperation = updatedOperation;
                                        operationFormularModel = selectedOperation.Clone();
                                        operationFormularModel.operationID = selectedOperation.operationID;
                                        operationFormularModel.toolID = selectedOperation.toolID;
                                    }
                                    StateHasChanged();
                                }
                            }
                            break;
                        }

                    case var msg when msg.StartsWith("OperationCreated;"):
                        {
                            var parts = msg.Split(';');
                            var operationID = int.Parse(parts[1]);
                            var operationList = allOperations.ToList();
                            var newOperation = await Fassade.GetOperation(operationID);
                            if (newOperation != null && !operationList.Any(s => s.operationID == operationID))
                            {
                                operationList.Add(newOperation);
                                allOperations = operationList.AsEnumerable();


                                if(newOperation.modifiedBy == UsernameService.Username)
                                {
                                    selectedOperation = await CreateDummyOP();
                                    operationFormularModel = selectedOperation.Clone();
                                    operationFormularModel.toolID = selectedTool.toolID;
                                }
                                StateHasChanged();
                            }
                            break;
                        }

                    case var msg when msg.StartsWith("OperationDeleted;"):
                        {
                            var parts = msg.Split(';');
                            var operationID = int.Parse(parts[1]);
                            var operationList = allOperations.ToList();
                            var idx = operationList.FindIndex(s => s.operationID == operationID);
                            if (idx >= 0)
                            {
                                operationList.RemoveAt(idx);
                                allOperations = operationList.AsEnumerable();
                                if (selectedOperation?.operationID == operationID)
                                {
                                    selectedOperation = null;
                                    showOperationFormular = false;
                                }
                                StateHasChanged();
                            }
                            break;
                        }





                    case var msg when msg.StartsWith("LineDeleted;"):
                        {
                            var parts = msg.Split(';');
                            var lineID = int.Parse(parts[1]);
                            if (line != null)
                            {
                                var stillExists = await Fassade.GetLine(lineID);
                                if (stillExists == null && line.lineID == lineID)
                                {

                                    NavState.SetCurrentRoute("/");
                                    Navigation.NavigateTo("/", replace: true);
                                    return;
                                }
                            }
                            break;
                        }
                        
                }
            }
            StateHasChanged();
        });
    });
        // 2) Starte die Verbindung
        await SignalRService.StartConnectionAsync();

        line = await Fassade.GetLineByName(lineName);

        if (line == null)
        {
            // Line existiert nicht (mehr) - zur Home navigieren
            NavState.SetCurrentRoute("/");
            Navigation.NavigateTo("/", replace: true);
            return;
        }

        stations = await Fassade.GetStationsFromLine(line.lineID);
        if (stations != null)
        {
            stations = await Fassade.GetStationsFromLine(line.lineID);
            if (stations != null)
            {
                allOperations = await Fassade.GetAllOperations();
                foreach (var station in stations)
                {
                    station.Status = await GetStationBadgeColourAsync(station);
                }
            }
            await RestoreSavedSelection();
        }

        NavState.SetCurrentRoute($"/line/{lineName}");
    }

    #region Clone
    private Tool? copiedTool;
    private List<Operation> copiedOperations;
    private Operation? copiedOperation;
    public async Task CloneTool(Tool copied)
    {

        copiedTool = Fassade.Clone(copied);
        copiedTool.isLocked = false;
        copiedTool.lockedBy = null;
        copiedTool.lockTimestamp = null;
        copiedOperations = (await Fassade.GetOperationsFromTool(copied.toolID)).Select(op => op.Clone()).ToList();
    }

    public void CloneOperation(Operation copied)
    {
        copiedOperation = Fassade.Clone(copied);
        copiedOperation.isLocked = false;
        copiedOperation.lockedBy = null;
        copiedOperation.lockTimestamp = null;
    }

    public async Task InsertTool()
    {
        copiedTool.stationID = selectedStation.stationID;


        tools = await Fassade.GetToolsFromStation(copiedTool.stationID);
        if (tools.Any(t => t.toolShortname == copiedTool.toolShortname))
        {
            string baseName = copiedTool.toolShortname;
            int copyIndex = 1;
            string newName;

            do
            {
                newName = $"{baseName}({copyIndex})";
                copyIndex++;
            }
            while (tools.Any(t => t.toolShortname == newName));

            copiedTool.toolShortname = newName;
        }


        await Fassade.AddTool(copiedTool);
		
        
        copiedTool = await Fassade.GetToolByName(copiedTool.toolShortname, selectedStation.stationID.Value);
        await SignalRService.SendMessageToServer($"ToolCreated;{copiedTool.toolID}");
        foreach(var operation in copiedOperations)
        {
            operation.toolID = copiedTool.toolID;
            await Fassade.AddOperation(operation);
			var signalOperation = await Fassade.GetOperationByName(operation.operationShortname, copiedTool.toolID.Value);
            await SignalRService.SendMessageToServer($"OperationCreated;{signalOperation.operationID}");
        }

        await DirtyManagerService.setClean();



        copiedTool = null;


    }


    public async Task InsertOperation()
    {
        copiedOperation.toolID = selectedTool.toolID;


        operations = await Fassade.GetOperationsFromTool(copiedOperation.toolID);
        if (operations.Any(t => t.operationShortname == copiedOperation.operationShortname))
        {
            string baseName = copiedOperation.operationShortname;
            int copyIndex = 1;
            string newName;

            do
            {
                newName = $"{baseName}({copyIndex})";
                copyIndex++;
            }
            while (operations.Any(t => t.operationShortname == newName));

            copiedOperation.operationShortname = newName;
        }

        await Fassade.AddOperation(copiedOperation);
		copiedOperation = await Fassade.GetOperationByName(copiedOperation.operationShortname, selectedTool.toolID.Value);
        await SignalRService.SendMessageToServer($"OperationCreated;{copiedOperation.operationID}");
        await DirtyManagerService.setClean();



        copiedOperation = null;
    }
    #endregion

    #region Drag
    private bool _initialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_initialized)
        {
            _initialized = true;

            // Initialize drag and drop for stations
            await JS.InvokeVoidAsync("initializeStationDragDrop");

            // Set up the callback for when elements are reordered
            await JS.InvokeVoidAsync("eval", @"
            window.onElementReordered = function(elementType, newOrder) {
                console.log('New ' + elementType + ' order:', newOrder);

                // Call appropriate Blazor method based on element type
                switch(elementType) {
                    case 'station':
                        DotNet.invokeMethodAsync('DaimlerConfig', 'HandleStationReorder', newOrder);
                        break;
                    case 'tool':
                        DotNet.invokeMethodAsync('DaimlerConfig', 'HandleToolReorder', newOrder);
                        break;
                    case 'operation':
                        DotNet.invokeMethodAsync('DaimlerConfig', 'HandleOperationReorder', newOrder);
                        break;
                }
            };
        ");
        }
        // Initialize tool and operation drag and drop when they become available
        if (selectedStation != null && tools.Any())
        {
            await JS.InvokeVoidAsync("initializeToolDragDrop");
        }

        if (selectedTool != null && allOperations.Any(op => op.toolID == selectedTool.toolID))
        {
            await JS.InvokeVoidAsync("initializeOperationDragDrop");
        }
    }
    [JSInvokable]
    public static async Task HandleStationReorder(string[] newOrder)
    {
        // Handle the new order - save to database, update state, etc.
        Console.WriteLine($"Stations reordered: {string.Join(", ", newOrder)}");

        // Example: Update your stations collection based on the new order
        // You would need to implement this based on your specific requirements
    }

    [JSInvokable]
    public static async Task HandleToolReorder(string[] newOrder)
    {
        Console.WriteLine($"Tools reordered: {string.Join(", ", newOrder)}");
        // Implement your tool reordering logic here
        // Example: Update tool order in database
    }

    [JSInvokable]
    public static async Task HandleOperationReorder(string[] newOrder)
    {
        Console.WriteLine($"Operations reordered: {string.Join(", ", newOrder)}");
        // Implement your operation reordering logic here
        // Example: Update operation sequence in database
    }
    #endregion

    #region Badge

    private static string GetBadgeColour(Status status)
    {
        return status switch
        {
            Status.Green => "green",
            Status.Red => "red",
            Status.Yellow => "yellow",
            _ => "gray"
        };
    }
    private async Task<Status> GetStationBadgeColourAsync(Station station)
    {
        var worstStatus = Status.Undefined;
        var toolsList = (await Fassade.GetToolsFromStation(station.stationID)).ToList();
        var map = toolsList
                .GroupBy(op => op.Status)
                .ToDictionary(g => g.Key, g => g.Count());

        if (map.TryGetValue(Status.Red, out var redCount) && redCount >= 1)
            worstStatus = Status.Red;
        else if (map.TryGetValue(Status.Yellow, out var yellowCount) && yellowCount >= 1)
            worstStatus = Status.Yellow;
        else if (map.TryGetValue(Status.Green, out var greenCount) && greenCount == toolsList.Count)
            worstStatus = Status.Green;
        else
            worstStatus = Status.Undefined;
        return worstStatus;
    }


    private async Task CycleColour(Operation o)
    {
        o.Status = o.Status switch
        {
            Status.Green   => Status.Undefined,
            Status.Yellow  => Status.Green,
            Status.Red     => Status.Yellow,
            _              => Status.Red
        };
        if (!await Fassade.UpdateOperation(o))
            return;
        StateHasChanged();
    }
    private async Task CycleColour(Tool t)
    {
        t.Status = t.Status switch
        {
            Status.Green   => Status.Undefined,
            Status.Yellow  => Status.Green,
            Status.Red     => Status.Yellow,
            _              => Status.Red
        };
        if (!await Fassade.UpdateTool(t))
            return;
        if (selectedStation != null)
        {
            selectedStation.Status = await GetStationBadgeColourAsync(selectedStation);
            var stationToUpdate = stations.FirstOrDefault(s => s.stationID == t.stationID);
            if (stationToUpdate != null)
            {
                stationToUpdate.Status = await GetStationBadgeColourAsync(stationToUpdate);
            }
        }

        StateHasChanged();
    }

    #endregion

    #region Restore Selection

    private async Task RestoreSavedSelection()
    {
        var savedSelection = SelectionState.GetSavedSelection();

        if (savedSelection.StationID.HasValue)
        {
            var station = stations.FirstOrDefault(s => s.stationID == savedSelection.StationID.Value);
            if (station != null)
            {

                selectedStation = station;
                stationFormularModel = station.Clone();
                stationFormularModel.lineID = selectedStation.lineID;
                stationFormularModel.stationID = selectedStation.stationID;
                tools = await Fassade.GetToolsFromStation(station.stationID);

                if (savedSelection.ToolID.HasValue)
                {
                    var tool = tools.FirstOrDefault(t => t.toolID == savedSelection.ToolID.Value);
                    if (tool != null)
                    {
                        selectedTool = tool;

                        toolFormularModel = tool.Clone();
                        toolFormularModel.stationID = selectedTool.stationID;
						toolFormularModel.toolID = selectedTool.toolID;
                       
                        toolReadOnly = (selectedTool.isLocked ?? false) && tool.lockedBy != UsernameService.Username;


                        if (savedSelection.OperationID.HasValue)
                        {
                            var operation = allOperations.FirstOrDefault(o => o.operationID == savedSelection.OperationID.Value);
                            if (operation != null && operation.toolID == tool.toolID)
                            {
                                selectedOperation = operation;

                                operationFormularModel = operation.Clone();
                                operationFormularModel.operationID = selectedOperation.operationID;
								operationFormularModel.toolID = selectedOperation.toolID;

                                operationReadOnly = (selectedOperation.isLocked ?? false) && operation.lockedBy != UsernameService.Username;


                                // Operation-Formular anzeigen
                                showOperationFormular = true;
                                showToolFormular = false;
                                showStationFormular = false;
                            }
                        }
                        else
                        {

                            selectedOperation = await CreateDummyOP();

                            // Tool-Formular anzeigen
                            showToolFormular = true;
                            showOperationFormular = false;
                            showStationFormular = false;
                        }
                    }
                }
                else
                {

                    selectedTool = await CreateDummyTool();
                    selectedOperation = await CreateDummyOP();

                    // Station-Formular anzeigen - Das war der fehlende Teil!
                    showStationFormular = true;
                    showToolFormular = false;
                    showOperationFormular = false;
                }

                StateHasChanged();
            }
        }
    }


    #endregion

    private async Task HandleAppClosingAsync()
    {
        // Hier dein UnlockTool() aufrufen oder Warnung anzeigen
        await UnlockTool();
        await UnlockOperation();

        if (selectedStation != null)
        {
            SelectionState.SaveSelection(
                stationID: selectedStation.stationID,
                toolID: selectedTool?.toolID,
                operationID: selectedOperation?.operationID
            );
        }

    }

    public void Dispose()
    {
        UsernameService.PropertyChanged -= (_, __) => InvokeAsync(StateHasChanged);
    }

}

